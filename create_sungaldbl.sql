-- MySQL Script generated by MySQL Workbench
-- hardwareidsFri Dec 21 01:50:45 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
CREATE DATABASE IF NOT EXISTS  lpogdb;
USE lpogdb;

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------

USE lpogdb;

DROP TABLE IF EXISTS approutes;
CREATE TABLE `approutes` (
  `appID` int(3) NOT NULL COMMENT 'unique primary key',
  `appdesc` varchar(100) NOT NULL,
  `appname` varchar(50) NOT NULL,
  `approute` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- -----------------------------------------------------
-- Table manufacturers 
-- -----------------------------------------------------

DROP TABLE IF EXISTS manufacturers;

CREATE TABLE manufacturers (
  manufacturerID INT(11) NOT NULL,
  mfrName VARCHAR(50),
  mfrAddr1 VARCHAR(50),
  mfrAddr2 VARCHAR(50),
  mfrAddr3 VARCHAR(50),
  mfrCountryCode INT(4) NULL DEFAULT 0,
  PRIMARY KEY ( manufacturerID ),
  UNIQUE INDEX  manufacturerID_UNIQUE  ( manufacturerID  ASC) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;



-- -----------------------------------------------------
-- Table factorys 
-- -----------------------------------------------------

DROP TABLE IF EXISTS factorys;

CREATE TABLE factorys (
  factoryID INT(11) NOT NULL,
  factoryName VARCHAR(50),
  factoryAddr1 VARCHAR(50),
  factoryAddr2 VARCHAR(50),
  factoryAddr3 VARCHAR(50),
  factoryCountryCode INT(4) NULL DEFAULT 0,
  manufacturerID INT(11) NOT NULL,

   PRIMARY KEY ( factoryID ),
  UNIQUE INDEX  factoryID_UNIQUE  ( factoryID  ASC) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table batches 
-- -----------------------------------------------------


DROP TABLE IF EXISTS batches;

CREATE TABLE batches (
  batchID INT(11) NOT NULL,
  factoryID INT(11) NULL DEFAULT 0,
   -- deviceTypeName  VARCHAR(50) NOT NULL DEFAULT '',
   deviceTypeID  INT(11) NULL DEFAULT 0,
   mfDateMonth INT(2) NULL DEFAULT 0,
   mfDateDay INT(2) NULL DEFAULT 0,
   mfDateYear INT(4) NULL DEFAULT 0,
 
   PRIMARY KEY ( batchID ),
  UNIQUE INDEX  batchID_UNIQUE  ( batchID  ASC) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table   devicetypes 
-- -----------------------------------------------------


DROP TABLE IF EXISTS devicetypes;

CREATE TABLE devicetypes (
   deviceTypeName  VARCHAR(50) NOT NULL DEFAULT '',
   deviceTypeID  INT(11) NOT NULL,
   LED  TINYINT(1) NULL DEFAULT NULL,
   port  VARCHAR(10) NULL DEFAULT '23333',
   manufacturer  VARCHAR(30) NULL DEFAULT NULL,
   numberOfSensors  INT(4) NULL DEFAULT NULL,
   dimension  DOUBLE NULL DEFAULT NULL,
   thresholdadjustment  INT(4) NOT NULL DEFAULT -1,
   startingSensor  INT(3) NOT NULL DEFAULT 1,
   sensor1Distance  DOUBLE NOT NULL DEFAULT 1.293,
   sensor2Distance  DOUBLE NOT NULL DEFAULT 2.085,
   sensorSpacing  DOUBLE NOT NULL DEFAULT .792,
   frontGap DOUBLE NOT NULL DEFAULT 0.0,
   reverseOrder INT(1) NOT NULL DEFAULT 0,
   numberOfRFIDScanners INT(4) NOT NULL DEFAULT 24,
   startingRFIDScannerAddress INT(4)  NOT NULL DEFAULT 188,
   RFIDScannerWidth DOUBLE NOT NULL DEFAULT 1.98,
   RFIDSpaceBetweenScanners DOUBLE NOT NULL DEFAULT 0.20,
   RFIDScannerFirstPosition DOUBlE NOT NULL DEFAULT 0.0,
   numberOfPNPSockets INT(4) NOT NULL DEFAULT 24,
   startingPNPSocketAddress INT(4) NOT NULL DEFAULT 188,
   PNPSocketWidth DOUBLE NOT NULL DEFAULT 1.98,
   PNPSocketSpaceBetweenSockets DOUBLE NOT NULL DEFAULT 0.20,
   PNPSocketFirstPosition DOUBlE NOT NULL DEFAULT 0.0,
   PRIMARY KEY ( deviceTypeID ),
  UNIQUE INDEX  DeviceTypeID_UNIQUE  ( deviceTypeID  ASC) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table   hardwareids 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   hardwareids  ;

CREATE TABLE   hardwareids  ( 
   hardwareidID  INT(11) NOT NULL AUTO_INCREMENT COMMENT 'unique primary key',
   batchID  INT(10) NOT NULL,
   serialnumber  VARCHAR(12) NOT NULL , 
   -- category  VARCHAR(1) NOT NULL DEFAULT '', 
   -- mfdate  DATE NOT NULL ,
   -- devicetype  INT NOT NULL , 
  counter  INT NOT NULL DEFAULT 0,
  address  INT NOT NULL ,
  PRIMARY KEY ( hardwareidID ),
  UNIQUE INDEX  serialnumber_UNIQUE  ( serialnumber  ASC) )
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   displayfixtures 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   displayfixtures  ;
CREATE TABLE IF NOT EXISTS   displayfixtures  (
   displayfixtureID  INT(11) NOT NULL AUTO_INCREMENT COMMENT 'unique primary key',
   storeID  INT(11) NOT NULL,
   level  INT(11) NULL DEFAULT NULL,
   depth  DOUBLE NULL DEFAULT NULL,
   width  DOUBLE NULL DEFAULT NULL,
   height  DOUBLE NULL DEFAULT NULL,
   displayfixtureIDForUser  VARCHAR(45) NOT NULL,
   type  VARCHAR(20) NOT NULL,
   location  VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY ( displayfixtureID ) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   displayfixturesections 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   displayfixturesections  ;

CREATE TABLE IF NOT EXISTS   displayfixturesections  ( 
   displayfixturesectionID  INT(11) NOT NULL , 
   displayfixtureID  INT(11) NOT NULL , 
   width  DOUBLE NOT NULL , 
  PRIMARY KEY ( displayfixturesectionID )) 
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8mb4;

  -- -----------------------------------------------------
-- Table   shelfsections 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   shelfsections  ;

CREATE TABLE IF NOT EXISTS   shelfsections  ( 
   shelfsectionID  INT(11) NOT NULL , 
   shelfID  INT(11) NOT NULL , 
   width  DOUBLE NOT NULL , 
  PRIMARY KEY ( shelfsectionID )) 
  ENGINE = InnoDB
  DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   FacingMerchandiseLinks 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   facingmerchandiselinks  ;

CREATE TABLE IF NOT EXISTS   facingmerchandiselinks  (
   facingmerchandiselinksID  INT(11) NOT NULL AUTO_INCREMENT COMMENT 'unique primary key',
   facingID  INT(11) NOT NULL,
   productID  INT(11) NOT NULL,
   fromDate  DATETIME NOT NULL,
  PRIMARY KEY ( facingmerchandiselinksID ))

ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;



-- -----------------------------------------------------
-- Table   FacingQuantities 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   facingquantities  ;

CREATE TABLE IF NOT EXISTS   facingquantities  (
   facingID  INT(11) NOT NULL,
   timeStamp  DATETIME NOT NULL,
   realTimeQuantity  DOUBLE NULL DEFAULT NULL,
   planoGramQuantity  DOUBLE NULL DEFAULT NULL,
   warningQuantity  DOUBLE NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   sensorchanges 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   sensorchanges  ;

CREATE TABLE IF NOT EXISTS   sensorchanges  (
   sensorchangeID  INT(11) AUTO_INCREMENT,
    facingID  INT(11) NOT NULL,
   timeStamp  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
   state  TEXT NOT NULL,
PRIMARY KEY ( sensorchangeID ))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

CREATE INDEX idx_timestamp
ON sensorchanges (timeStamp);

-- -----------------------------------------------------
-- Table   Facings 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   facings  ;

CREATE TABLE IF NOT EXISTS   facings  (
   facingID  INT(11) NOT NULL AUTO_INCREMENT,
   shelfID  INT(11) NOT NULL,
   facingIDForUser  VARCHAR(30) NOT NULL,
   initialValues  VARCHAR(1000) NULL DEFAULT '',
   shelfRelativeAddress  INT(11) NOT NULL,
   depth  DOUBLE NULL DEFAULT 24.0,
   width  DOUBLE NULL DEFAULT 2.0,
   height  DOUBLE NULL DEFAULT 24.0,
   activationDate  DATETIME NULL DEFAULT NULL,
   deactivationDate  DATETIME NULL DEFAULT NULL,
   RS485Address  VARCHAR(3) NULL DEFAULT NULL,
   version  VARCHAR(15) NULL DEFAULT NULL,
   deviceTypeID  INT(11) NULL DEFAULT NULL,
   backBrightness  INT(11) NULL DEFAULT NULL,
   numberOfSensors  INT(11) NULL DEFAULT NULL,
   geolocation  VARCHAR(25) NULL DEFAULT NULL,
   mfdate  DATETIME NULL DEFAULT NULL,
   SN  VARCHAR(30) NULL DEFAULT '',
   PRIMARY KEY ( facingID ),
  UNIQUE INDEX  facingID_UNIQUE  ( facingID  ASC) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table   Senors 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   sensors  ;

CREATE TABLE IF NOT EXISTS   sensors  (
   sensorID  INT(11) NOT NULL AUTO_INCREMENT,
   facingID  INT(11) NULL DEFAULT NULL,
   facingPosition  INT(11) NULL DEFAULT NULL,
   sensorvalue  INT(11) NULL DEFAULT NULL,
   initialvalue  INT(11) NULL DEFAULT NULL,
  PRIMARY KEY ( sensorID ),
  UNIQUE INDEX  sensorID_UNIQUE  ( sensorID  ASC))
    
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   MerchandiseItems 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   merchandiseitems  ;


CREATE TABLE  merchandiseitems  (
   merchandiseItemID  int(11) NOT NULL AUTO_INCREMENT,
   productID  int(11) DEFAULT NULL,
   storeID  int(11) DEFAULT NULL,
   supplierID  int(11) DEFAULT NULL,
   country  varchar(15) DEFAULT NULL,
   state  varchar(2) DEFAULT NULL,
   invSufficientThreshold  double DEFAULT NULL,
   alertThreshold  double DEFAULT NULL,
   shortageThreshold  double DEFAULT NULL,
  PRIMARY KEY ( merchandiseItemID )) 
  
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   Products 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   products  ;
CREATE TABLE  products  (
   productID  INT(11) NOT NULL,
   upc varchar(30) NOT NULL,
   productName  varchar(75) DEFAULT NULL,
   manufacturerID INT(11) DEFAULT NULL,
   manufacturer varchar(75) DEFAULT NULL,
   brand varchar(75) DEFAULT NULL,
   variety varchar(75) DEFAULT NULL,
   description varchar(75) DEFAULT NULL,
   category varchar(30) DEFAULT NULL,
   unit_material varchar(30) DEFAULT NULL,
   volume DOUBLE  DEFAULT NULL,
   vol_measurement_unit varchar(20) DEFAULT NULL,
   packing_type varchar(30) DEFAULT NULL,
   unit_packing_type varchar(30) DEFAULT NULL,
   quantity INT(4) DEFAULT 1,
   weight DOUBLE DEFAULT 0,
   weight_measurement_unit varchar(20) DEFAULT "ounce",
   width  DOUBLE DEFAULT 2.5,
   depth  DOUBLE DEFAULT 2.5,
   height  DOUBLE DEFAULT 5.0,
   dimension_measurement_unit varchar(20) DEFAULT NULL,
   super_category varchar(30) DEFAULT NULL,
   transparency INT(1) DEFAULT 0,
PRIMARY KEY ( productID ))

ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

-- -----------------------------------------------------
-- Table   Shelfs 
-- -----------------------------------------------------
DROP TABLE IF EXISTS   shelfs  ;

CREATE TABLE IF NOT EXISTS   shelfs  (
   shelfID  INT(11) NOT NULL AUTO_INCREMENT,
   displayfixtureID  INT(11) NOT NULL,
   level  INT(11) NULL DEFAULT NULL,
   depth  DOUBLE NULL DEFAULT 24.0,
   width  DOUBLE NULL DEFAULT 48.0,
   height  DOUBLE NULL DEFAULT 20.0,
   IPAddress  VARCHAR(40) NOT NULL DEFAULT '',
   port  VARCHAR(10) NOT NULL DEFAULT '',
   MAC  VARCHAR(25) NOT NULL DEFAULT '',
   shelfIDForUser  VARCHAR(20) NOT NULL DEFAULT '',
   mfdate  DATETIME NULL DEFAULT NULL,
   SN  VARCHAR(30) NOT NULL DEFAULT '',
  PRIMARY KEY ( shelfID ),
  UNIQUE INDEX  shelfID_UNIQUE  ( shelfID  ASC)) 

ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

ALTER TABLE   shelfs  ADD INDEX  PARENTID  ( displayfixtureID );

DROP TABLE IF EXISTS   stores  ;
CREATE TABLE IF NOT EXISTS   stores  (
   storeID  INT(11) NOT NULL AUTO_INCREMENT,
   clientID  INT(11) NOT NULL,
   storeNumber varchar(10) DEFAULT NULL,
   storeName  VARCHAR(45) NOT NULL,
   address VARCHAR(50) NOT NULL,
   country  VARCHAR(15) NULL,
   city  VARCHAR(20) NOT NULL,  
   state  VARCHAR(2) NOT NULL,
   zipcode varchar(15) NOT NULL,
   district  VARCHAR(30) NULL,
   latitude  VARCHAR(45) NULL,
   longitude  VARCHAR(45) NULL,
  PRIMARY KEY ( storeID ),
  UNIQUE INDEX  storeID_UNIQUE  ( storeID  ASC))
  
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


DROP TABLE IF EXISTS   clients  ;
CREATE TABLE IF NOT EXISTS   clients  (
   clientID  INT NOT NULL AUTO_INCREMENT,
   clientName  VARCHAR(45) NOT NULL,
  PRIMARY KEY ( clientID ),
  UNIQUE INDEX  clientID_UNIQUE  ( clientID  ASC))
  
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;

DROP TABLE IF EXISTS   useraccounts  ;
CREATE TABLE `useraccounts` (
  `useraccountID` int(11) NOT NULL COMMENT 'unique primary key',
  `clientID` int(11) DEFAULT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(32) NOT NULL,
  `usertype` varchar(10) NOT NULL DEFAULT '3' COMMENT '1 supervisor, 2 employee, 3 guest',
  `firstname` varchar(25) DEFAULT NULL,
  `lastname` varchar(50) DEFAULT NULL,
  `apppermissions` varchar(100) DEFAULT NULL COMMENT 'contains all app ids user can log into',
  `clientIDs` varchar(600) DEFAULT NULL COMMENT 'contains all client IDs user can access on any app or api call - if not null, will be used to define scope of access',
  `storeIDs` varchar(600) DEFAULT NULL COMMENT 'contains all store IDs user can access on any app or api call - if clienyIDs not null, and not null will be used to define scope of access',
  `displayfixtureIDs` varchar(600) DEFAULT NULL COMMENT 'contains all display fixtures user can access on any app or api call - if previous fields are null, this will define scope',
  `writetablespermission` int(1) DEFAULT '0',
  `rawSQLexecutepermission` int(1) DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
-- -----------------------------------------------------
-- create views
-- -----------------------------------------------------
DROP TABLE IF EXISTS  hardwarewithbatch;

CREATE OR REPLACE VIEW hardwarewithbatch AS
-- SELECT hardwareids.*,
--        batches.factoryID,
--        batches.deviceTypeID,
--        batches.mfDateMonth,
--        batches.mfDateDay,
--        batches.mfDateYear
--        from hardwareids join batches
--        on hardwareids.batchID = batches.batchID;
select   hardwareids . hardwareidID  AS  hardwareidID ,  
         hardwareids . batchID  AS  batchID ,  
         hardwareids . serialnumber  AS  serialnumber ,  
         hardwareids . counter  AS  counter ,  
         hardwareids . address  AS  address ,  
         batches . factoryID  AS  factoryID ,  
         batches . deviceTypeID  AS  deviceTypeID ,  
         batches . mfDateMonth  AS  mfDateMonth ,  
         batches . mfDateDay  AS  mfDateDay ,  
         batches . mfDateYear  AS  mfDateYear  
         from (  hardwareids  join   batches  on((  hardwareids . batchID  =   batches . batchID )));

DROP TABLE IF EXISTS  hardwarewithdevicetypes;

CREATE OR REPLACE VIEW hardwarewithdevicetypes AS
-- select hardwarewithbatch.*,devicetypes.numberOfRFIDScanners, 
--            devicetypes.startingRFIDScannerAddress,
--            devicetypes.RFIDScannerWidth, 
--            devicetypes.RFIDScannerFirstPosition,
--            devicetypes.RFIDSpaceBetweenScanners,
--            devicetypes.numberOfPNPSockets,
--            devicetypes.startingPNPSocketAddress,
--            devicetypes.PNPSocketWidth,
--            devicetypes.PNPSocketFirstPosition,
--            devicetypes.PNPSocketSpaceBetweenSockets  
--            from hardwarewithbatch join devicetypes 
--            on hardwarewithbatch.devicetypeID = devicetypes.devicetypeID;
select   hardwarewithbatch . hardwareidID  AS  hardwareidID , 
         hardwarewithbatch . batchID  AS  batchID , 
         hardwarewithbatch . serialnumber  AS  serialnumber , 
         hardwarewithbatch . counter  AS  counter , 
         hardwarewithbatch . address  AS  address , 
         hardwarewithbatch . factoryID  AS  factoryID , 
         hardwarewithbatch . deviceTypeID  AS  deviceTypeID , 
         hardwarewithbatch . mfDateMonth  AS  mfDateMonth , 
         hardwarewithbatch . mfDateDay  AS  mfDateDay , 
         hardwarewithbatch . mfDateYear  AS  mfDateYear , 
         devicetypes . numberOfRFIDScanners  AS  numberOfRFIDScanners , 
         devicetypes . startingRFIDScannerAddress  AS  startingRFIDScannerAddress , 
         devicetypes . RFIDScannerWidth  AS  RFIDScannerWidth , 
         devicetypes . RFIDScannerFirstPosition  AS  RFIDScannerFirstPosition , 
         devicetypes . RFIDSpaceBetweenScanners  AS  RFIDSpaceBetweenScanners , 
         devicetypes . numberOfPNPSockets  AS  numberOfPNPSockets , 
         devicetypes . startingPNPSocketAddress  AS  startingPNPSocketAddress , 
         devicetypes . PNPSocketWidth  AS  PNPSocketWidth , 
         devicetypes . PNPSocketFirstPosition  AS  PNPSocketFirstPosition , 
         devicetypes . PNPSocketSpaceBetweenSockets  AS  PNPSocketSpaceBetweenSockets  
         from ( hardwarewithbatch  join  devicetypes  
         on(( hardwarewithbatch . deviceTypeID  =  devicetypes . deviceTypeID )));

DROP TABLE IF EXISTS fmlview;
CREATE OR REPLACE VIEW fmlview AS
-- select  facingmerchandiselinks.facingID AS facingID,
--         facingmerchandiselinks.productID AS productID,
--         facingmerchandiselinks.fromDate AS fromDate from facingmerchandiselinks 
-- order by facingmerchandiselinks.facingID,facingmerchandiselinks.fromDate;
select   facingmerchandiselinks . facingID  AS  facingID ,  
         facingmerchandiselinks . productID  AS  productID ,  
         facingmerchandiselinks . fromDate  AS  fromDate  
         from   facingmerchandiselinks  order by   facingmerchandiselinks . facingID ,  facingmerchandiselinks . fromDate ;

DROP TABLE IF EXISTS  facingswithsensorchanges_1;

CREATE OR REPLACE VIEW facingswithsensorchanges_1 AS 
select max( facingID ) as maxfacingID, 
       min( timeStamp ) as earliesttimestamp 
       from  sensorchanges  group by  sensorchanges . facingID ;




DROP TABLE IF EXISTS  facingswithsensorchanges_2;

CREATE OR REPLACE VIEW facingswithsensorchanges_2 AS 
-- SELECT * FROM facingswithsensorchanges_1 
-- JOIN
-- facings
-- WHERE(facingswithsensorchanges_1.maxfacingID=facings.facingID);
select  facingswithsensorchanges_1 . maxfacingID  AS  maxfacingID , 
        facingswithsensorchanges_1 . earliesttimestamp  AS  earliesttimestamp , 
        facings . facingID  AS  facingID , 
        facings . shelfID  AS  shelfID , 
        facings . facingIDForUser  AS  facingIDForUser , 
        facings . initialValues  AS  initialValues , 
        facings . shelfRelativeAddress  AS  shelfRelativeAddress , 
        facings . depth  AS  depth , 
        facings . width  AS  width , 
        facings . height  AS  height , 
        facings . activationDate  AS  activationDate , 
        facings . deactivationDate  AS  deactivationDate , 
        facings . RS485Address  AS  RS485Address , 
        facings . version  AS  version , 
        facings . deviceTypeID  AS  deviceTypeID , 
        facings . backBrightness  AS  backBrightness , 
        facings . numberOfSensors  AS  numberOfSensors , 
        facings . geolocation  AS  geolocation , 
        facings . mfdate  AS  mfdate , 
        facings . SN  AS  SN  
        from ( facingswithsensorchanges_1  join  facings ) 
        where ( facingswithsensorchanges_1 . maxfacingID  =  facings . facingID );

DROP TABLE IF EXISTS  facingswithsensorchanges;

CREATE OR REPLACE VIEW facingswithsensorchanges AS
-- SELECT facingswithsensorchanges_2.*,shelfs.displayfixtureID,shelfs.shelfIDForUser FROM facingswithsensorchanges_2 
-- JOIN
-- shelfs
-- WHERE(facingswithsensorchanges_2.shelfID=shelfs.shelfID);
select  facingswithsensorchanges_2 . maxfacingID  AS  maxfacingID , 
        facingswithsensorchanges_2 . earliesttimestamp  AS  earliesttimestamp , 
        facingswithsensorchanges_2 . facingID  AS  facingID , 
        facingswithsensorchanges_2 . shelfID  AS  shelfID , 
        facingswithsensorchanges_2 . facingIDForUser  AS  facingIDForUser , 
        facingswithsensorchanges_2 . initialValues  AS  initialValues , 
        facingswithsensorchanges_2 . shelfRelativeAddress  AS  shelfRelativeAddress , 
        facingswithsensorchanges_2 . depth  AS  depth , 
        facingswithsensorchanges_2 . width  AS  width , 
        facingswithsensorchanges_2 . height  AS  height , 
        facingswithsensorchanges_2 . activationDate  AS  activationDate , 
        facingswithsensorchanges_2 . deactivationDate  AS  deactivationDate , 
        facingswithsensorchanges_2 . RS485Address  AS  RS485Address , 
        facingswithsensorchanges_2 . version  AS  version , 
        facingswithsensorchanges_2 . deviceTypeID  AS  deviceTypeID , 
        facingswithsensorchanges_2 . backBrightness  AS  backBrightness , 
        facingswithsensorchanges_2 . numberOfSensors  AS  numberOfSensors , 
        facingswithsensorchanges_2 . geolocation  AS  geolocation , 
        facingswithsensorchanges_2 . mfdate  AS  mfdate , 
        facingswithsensorchanges_2 . SN  AS  SN , 
        shelfs . displayfixtureID  AS  displayfixtureID , 
        shelfs . shelfIDForUser  AS  shelfIDForUser  
        from  (facingswithsensorchanges_2  join  shelfs) where (facingswithsensorchanges_2 . shelfID  =  shelfs . shelfID) ;

DROP TABLE IF EXISTS  merchandiseitemview;
CREATE OR REPLACE VIEW merchandiseitemview AS
-- select   products . productName  AS  productName ,
--          products . productID  AS  productID ,
--          merchandiseitems . merchandiseItemID  AS  merchandiseItemID  
--        from   merchandiseitems  
--        join   products  
--        where (  merchandiseitems . productID  =   products . productID ) 
--        order by   products . productName ,  products . productID ; 
select  products . productName  AS  productName ,  
        products . productID  AS  productID ,  
        products . upc  AS  upc ,  
        products . manufacturer  AS  manufacturer ,  
        products . brand  AS  brand ,  
        products . variety  AS  variety , 
         products . description  AS  description ,  
         products . super_category  AS  super_category ,  
         products . category  AS  category ,  
         products . unit_material  AS  unit_material ,  
         products . quantity  AS  quantity  
         from   products  
         order by   products . productName ,  products . productID ;

DROP TABLE IF EXISTS  merchandiseItemToProductView;
CREATE OR REPLACE VIEW merchandiseItemToProductView AS
select  products . upc  AS  upc , 
            products . productID  AS  productID , 
            products . productName  AS  productName , 
            products . manufacturer  AS  manufacturer , 
            products . brand  AS  brand , 
            products . variety  AS  variety , 
            products . description  AS  description , 
            products . category  AS  category , 
            products . super_category  AS  super_category , 
            products . unit_material  AS  unit_material , 
            products . quantity  AS  quantity , 
            products . depth  AS  depth , 
            products . width  AS  width , 
            products . height  AS  height  from  products ;


DROP TABLE IF EXISTS   activatedshelfs_1;
CREATE OR REPLACE VIEW activatedshelfs_1 AS
-- select   shelfs . shelfID  AS  shelfID ,
--          shelfs . displayfixtureID  AS  displayfixtureID ,
--          displayfixtures . storeID  AS  storeID ,
--          displayfixtures . displayfixtureIDForUser  AS  displayfixtureIDForUser ,
--          shelfs . level  AS  level ,
--          shelfs . IPAddress  AS  IPAddress ,
--          shelfs . port  AS  port ,
--          shelfs . shelfIDForUser  AS  shelfIDForUser ,
--          shelfs . mfdate  AS  mfdate ,
--          shelfs . SN  AS  SN  
--        from (  shelfs  
--        join   displayfixtures  
--        on((  shelfs . displayfixtureID  =   displayfixtures . displayfixtureID ))) 
--        where (  shelfs . SN  <> '');
select   shelfs . shelfID  AS  shelfID ,  
         shelfs . displayfixtureID  AS  displayfixtureID ,  
         displayfixtures . storeID  AS  storeID ,  
         displayfixtures . displayfixtureIDForUser  AS  displayfixtureIDForUser ,  
         shelfs . level  AS  level ,  
         shelfs . IPAddress  AS  IPAddress ,  
         shelfs . port  AS  port ,  
         shelfs . shelfIDForUser  AS  shelfIDForUser ,  
         shelfs . mfdate  AS  mfdate ,  
         shelfs . SN  AS  SN  
         from (  shelfs  join   displayfixtures  
         on((  shelfs . displayfixtureID  =   displayfixtures . displayfixtureID ))) 
         where (  shelfs . SN  <> '');

DROP TABLE IF EXISTS activatedshelfs;

CREATE OR REPLACE VIEW activatedshelfs AS
-- select activatedshelfs_1.*,
--    hardwarewithdevicetypes.numberOfRFIDScanners ,
--    hardwarewithdevicetypes.startingRFIDScannerAddress,
--    hardwarewithdevicetypes.RFIDScannerWidth, 
--    hardwarewithdevicetypes.RFIDSpaceBetweenScanners, 
--    hardwarewithdevicetypes.RFIDScannerFirstPosition,
--    hardwarewithdevicetypes.numberOfPNPSockets ,
--    hardwarewithdevicetypes.startingPNPSocketAddress,
--    hardwarewithdevicetypes.PNPSocketWidth, 
--    hardwarewithdevicetypes.PNPSocketSpaceBetweenSockets, 
--    hardwarewithdevicetypes.PNPSocketFirstPosition
   
--    from activatedshelfs_1 join hardwarewithdevicetypes ON
--    activatedshelfs_1.SN = hardwarewithdevicetypes.serialnumber;  
select  activatedshelfs_1 . shelfID  AS  shelfID , 
        activatedshelfs_1 . displayfixtureID  AS  displayfixtureID , 
        activatedshelfs_1 . storeID  AS  storeID , 
        activatedshelfs_1 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        activatedshelfs_1 . level  AS  level , 
        activatedshelfs_1 . IPAddress  AS  IPAddress , 
        activatedshelfs_1 . port  AS  port , 
        activatedshelfs_1 . shelfIDForUser  AS  shelfIDForUser , 
        activatedshelfs_1 . mfdate  AS  mfdate , 
        activatedshelfs_1 . SN  AS  SN , 
        hardwarewithdevicetypes . numberOfRFIDScanners  AS  numberOfRFIDScanners , 
        hardwarewithdevicetypes . startingRFIDScannerAddress  AS  startingRFIDScannerAddress , 
        hardwarewithdevicetypes . RFIDScannerWidth  AS  RFIDScannerWidth , 
        hardwarewithdevicetypes . RFIDSpaceBetweenScanners  AS  RFIDSpaceBetweenScanners , 
        hardwarewithdevicetypes . RFIDScannerFirstPosition  AS  RFIDScannerFirstPosition , 
        hardwarewithdevicetypes . numberOfPNPSockets  AS  numberOfPNPSockets , 
        hardwarewithdevicetypes . startingPNPSocketAddress  AS  startingPNPSocketAddress , 
        hardwarewithdevicetypes . PNPSocketWidth  AS  PNPSocketWidth , 
        hardwarewithdevicetypes . PNPSocketSpaceBetweenSockets  AS  PNPSocketSpaceBetweenSockets , 
        hardwarewithdevicetypes . PNPSocketFirstPosition  AS  PNPSocketFirstPosition  
        from ( activatedshelfs_1  join  hardwarewithdevicetypes  
        on(( activatedshelfs_1 . SN  =  hardwarewithdevicetypes . serialnumber )));

DROP TABLE IF EXISTS allshelfs;
CREATE OR REPLACE VIEW allshelfs AS
--   select shelfs.shelfID AS shelfID,
--              shelfs.shelfIDForUser AS shelfIDForUser,
--              shelfs.displayfixtureID AS  displayfixtureID,
--              shelfs.level AS level,
--              shelfs.IPAddress AS IPAddress,
--              shelfs.port AS  port,
--              shelfs.mfdate  AS  mfdate,
--              shelfs.SN AS  SN,
--             displayfixtures.storeID AS storeID,
--             displayfixtures.displayfixtureIDForUser AS displayfixtureIDForUser 
--             from (shelfs 
--             join  displayfixtures  
--             on (( shelfs.displayfixtureID = displayfixtures.displayfixtureID)));
select  shelfs . shelfID  AS  shelfID , 
        shelfs . shelfIDForUser  AS  shelfIDForUser , 
        shelfs . displayfixtureID  AS  displayfixtureID , 
        shelfs . level  AS  level , 
        shelfs . IPAddress  AS  IPAddress , 
        shelfs . port  AS  port , 
        shelfs . mfdate  AS  mfdate , 
        shelfs . SN  AS  SN , 
        displayfixtures . storeID  AS  storeID , 
        displayfixtures . displayfixtureIDForUser  AS  displayfixtureIDForUser  
        from ( shelfs  join  displayfixtures  
        on(( shelfs . displayfixtureID  =  displayfixtures . displayfixtureID )));


DROP TABLE IF EXISTS currentproducts;
CREATE OR REPLACE VIEW currentproducts AS   
         -- select  products . productID  AS  productID , 
         --            products . upc  AS  upc , 
         --            products . productName  AS  productName , 
         --            products . manufacturer  AS  manufacturer , 
         --            products . brand  AS  brand , 
         --            products . variety  AS  variety , 
         --            products . description  AS  description , 
         --            products . category  AS  category , 
         --            products . unit_material  AS  unit_material , 
         --            products . volume  AS  volume , 
         --            products . vol_measurement_unit  AS  vol_measurement_unit , 
         --            products . packing_type  AS  packing_type , 
         --            products . unit_packing_type  AS  unit_packing_type , 
         --            products . quantity  AS  quantity , 
         --            products . weight  AS  weight , 
         --            products . weight_measurement_unit  AS  weight_measurement_unit , 
         --            products . width  AS  width , products . depth  AS  depth , 
         --            products . height  AS  height , 
         --            products . dimension_measurement_unit  AS  dimension_measurement_unit , 
         --            products . super_category  AS  super_category  from  products;
select   products . productID  AS  productID ,  
         products . upc  AS  upc ,  
         products . productName  AS  productName ,  
         products . manufacturer  AS  manufacturer ,  
         products . brand  AS  brand ,  
         products . variety  AS  variety ,  
         products . description  AS  description ,  
         products . category  AS  category ,  
         products . unit_material  AS  unit_material ,  
         products . volume  AS  volume ,  
         products . vol_measurement_unit  AS  vol_measurement_unit ,  
         products . packing_type  AS  packing_type ,  
         products . unit_packing_type  AS  unit_packing_type ,  
         products . quantity  AS  quantity ,  
         products . weight  AS  weight ,  
         products . weight_measurement_unit  AS  weight_measurement_unit ,  
         products . width  AS  width ,  products . depth  AS  depth ,  
         products . height  AS  height ,  
         products . dimension_measurement_unit  AS  dimension_measurement_unit ,  
         products . super_category  AS  super_category  
         from   products ;




DROP TABLE IF EXISTS facingtoproductlink;

CREATE OR REPLACE VIEW facingtoproductlink AS
      --    select fmlview . fromDate  AS  fromDate ,
      --       fmlview . facingID AS facingID,
      --       products . *
      --  from   fmlview  
      --   join   products  
      --   where ( fmlview . productID  =   products . productID );
select  fmlview . fromDate  AS  fromDate , 
      fmlview . facingID  AS  facingID , 
      products . productID  AS  productID , 
      products . upc  AS  upc , 
      products . productName  AS  productName , 
      products . manufacturer  AS  manufacturer , 
      products . brand  AS  brand , 
      products . variety  AS  variety , 
      products . description  AS  description , 
      products . category  AS  category , 
      products . unit_material  AS  unit_material , 
      products . volume  AS  volume , 
      products . vol_measurement_unit  AS  vol_measurement_unit , 
      products . packing_type  AS  packing_type , 
      products . unit_packing_type  AS  unit_packing_type , 
      products . quantity  AS  quantity , 
      products . weight  AS  weight , 
      products . weight_measurement_unit  AS  weight_measurement_unit , 
      products . width  AS  width , products . depth  AS  depth , 
      products . height  AS  height , 
      products . dimension_measurement_unit  AS  dimension_measurement_unit , 
      products . super_category  AS  super_category , 
      products . transparency  AS  transparency  
      from ( fmlview  join  products ) where ( fmlview . productID  =  products . productID );

DROP TABLE IF EXISTS facingtoproductlinklastdates_1;
CREATE OR REPLACE VIEW facingtoproductlinklastdates_1 AS
		-- select facingID AS facingID,
		--  max(fromDate) AS fromDate 
		-- from facingtoproductlink 
      --   group by facingID;
select facingtoproductlink.facingID AS facingID,
       max(facingtoproductlink.fromDate) AS fromDate 
       from facingtoproductlink group by facingtoproductlink.facingID;

DROP TABLE IF EXISTS facingtoproductlinklastdates;
CREATE OR REPLACE VIEW facingtoproductlinklastdates AS
select  facingtoproductlink . facingID  AS  facingID , 
        facingtoproductlink . fromDate  AS  fromDate , 
        facingtoproductlink . productID  AS  productID , 
        facingtoproductlink . upc  AS  upc , 
        facingtoproductlink . productName  AS  productName , 
        facingtoproductlink . manufacturer  AS  manufacturer , 
        facingtoproductlink . brand  AS  brand , 
        facingtoproductlink . variety  AS  variety , 
        facingtoproductlink . description  AS  description , 
        facingtoproductlink . super_category  AS  super_category , 
        facingtoproductlink . category  AS  category , 
        facingtoproductlink . unit_material  AS  unit_material , 
        facingtoproductlink . quantity  AS  quantity , 
        facingtoproductlink . depth  AS  depth , 
        facingtoproductlink . width  AS  width , 
        facingtoproductlink . height  AS  height  
        from ( facingtoproductlink  join  facingtoproductlinklastdates_1 ) 
        where (( facingtoproductlink . facingID  =  facingtoproductlinklastdates_1 . facingID ) and 
                ( facingtoproductlink . fromDate  =  facingtoproductlinklastdates_1 . fromDate ));


DROP TABLE IF EXISTS displaymatrix_1;
CREATE OR REPLACE VIEW displaymatrix_1 AS
select  stores . clientID  AS  clientID , stores . 
storeID  AS  storeID , 
stores . storeName  AS  storeName , 
stores . storeNumber  AS  storeNumber , 
stores . country  AS  storeCountry , 
stores . address  AS  storeAddress , 
stores . city  AS  storeCity , stores . 
state  AS  storeState , 
stores . zipcode  AS  storeZipcode , 
stores . district  AS  storeDistrict , 
stores . latitude  AS  storeLatitude , 
stores . longitude  AS  storeLongitude , 
displayfixtures . displayfixtureID  AS  displayfixtureID , 
displayfixtures . level  AS  displayfixtureLevel , 
displayfixtures . depth  AS  displayfixtureDepth , 
displayfixtures . width  AS  displayfixtureWidth , 
displayfixtures . height  AS  displayfixtureHeight , 
displayfixtures . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
displayfixtures . type  AS  displayfixtureType , 
displayfixtures . location  AS  displayfixtureLocation 
 from ( stores  left join  displayfixtures  on(( stores . storeID  =  displayfixtures . storeID )));



DROP TABLE IF EXISTS displaymatrix_2;
CREATE OR REPLACE VIEW displaymatrix_2 AS
select  displaymatrix_1 . clientID  AS  clientID , 
            displaymatrix_1 . storeID  AS  storeID ,
            displaymatrix_1 . storeName  AS  storeName , 
            displaymatrix_1 . storeNumber  AS  storeNumber , 
            displaymatrix_1 . storeCountry  AS  storeCountry , 
            displaymatrix_1 . storeAddress  AS  storeAddress , 
            displaymatrix_1 . storeCity  AS  storeCity , 
            displaymatrix_1 . storeState  AS  storeState , 
            displaymatrix_1 . storeZipcode  AS  storeZipcode , 
            displaymatrix_1 . storeDistrict  AS  storeDistrict , 
            displaymatrix_1 . storeLatitude  AS  storeLatitude , 
            displaymatrix_1 . storeLongitude  AS  storeLongitude , 
            displaymatrix_1 . displayfixtureID  AS  displayfixtureID , 
            displaymatrix_1 . displayfixtureLevel  AS  displayfixtureLevel , 
            displaymatrix_1 . displayfixtureDepth  AS  displayfixtureDepth , 
            displaymatrix_1 . displayfixtureWidth  AS  displayfixtureWidth , 
            displaymatrix_1 . displayfixtureHeight  AS  displayfixtureHeight , 
            displaymatrix_1 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
            displaymatrix_1 . displayfixtureType  AS  displayfixtureType , 
            displaymatrix_1 . displayfixtureLocation  AS  displayfixtureLocation , 
            shelfs . shelfID  AS  shelfID , 
            shelfs . level  AS  shelfLevel ,
            shelfs . depth  AS  shelfDepth , 
            shelfs . width  AS  shelfWidth , 
            shelfs . height  AS  shelfHeight , 
            shelfs . IPAddress  AS  shelfIPAddress , shelfs .
            port  AS  shelfPort , 
            shelfs . MAC  AS  shelfMAC , 
            shelfs . shelfIDForUser  AS  shelfIDForUser , 
            shelfs . mfdate  AS  shelfMfdate , 
            shelfs . SN  AS  shelfSN  
            from ( displaymatrix_1  left join  shelfs  on(( displaymatrix_1 . displayfixtureID  =  shelfs . displayfixtureID )));


DROP TABLE IF EXISTS displaymatrix_3;
CREATE OR REPLACE VIEW displaymatrix_3 AS
select  displaymatrix_2 . clientID  AS  clientID , 
		  displaymatrix_2 . storeID  AS  storeID , 
        displaymatrix_2 . storeName  AS  storeName , 
        displaymatrix_2 . storeNumber  AS  storeNumber , 
        displaymatrix_2 . storeCountry  AS  storeCountry , 
        displaymatrix_2 . storeAddress  AS  storeAddress , 
        displaymatrix_2 . storeCity  AS  storeCity , 
        displaymatrix_2 . storeState  AS  storeState , 
        displaymatrix_2 . storeZipcode  AS  storeZipcode , 
        displaymatrix_2 . storeDistrict  AS  storeDistrict , 
        displaymatrix_2 . storeLatitude  AS  storeLatitude , 
        displaymatrix_2 . storeLongitude  AS  storeLongitude , 
        displaymatrix_2 . displayfixtureID  AS  displayfixtureID , 
        displaymatrix_2 . displayfixtureLevel  AS  displayfixtureLevel , 
        displaymatrix_2 . displayfixtureDepth  AS  displayfixtureDepth , displaymatrix_2 . 
        displayfixtureWidth  AS  displayfixtureWidth , 
        displaymatrix_2 . displayfixtureHeight  AS  displayfixtureHeight , 
        displaymatrix_2 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        displaymatrix_2 . displayfixtureType  AS  displayfixtureType , 
        displaymatrix_2 . displayfixtureLocation  AS  displayfixtureLocation , 
        displaymatrix_2 . shelfID  AS  shelfID , 
        displaymatrix_2 . shelfLevel  AS  shelfLevel , 
        displaymatrix_2 . shelfDepth  AS  shelfDepth , 
        displaymatrix_2 . shelfWidth  AS  shelfWidth , 
        displaymatrix_2 . shelfHeight  AS  shelfHeight , 
        displaymatrix_2 . shelfIPAddress  AS  shelfIPAddress , 
        displaymatrix_2 . shelfPort  AS  shelfPort , 
        displaymatrix_2 . shelfMAC  AS  shelfMAC , 
        displaymatrix_2 . shelfIDForUser  AS  shelfIDForUser , 
        displaymatrix_2 . shelfMfdate  AS  shelfMfdate , 
        displaymatrix_2 . shelfSN  AS  shelfSN , 
        facings . facingID  AS  facingID , 
        facings . facingIDForUser  AS  facingIDForUser , 
        facings . initialValues  AS  facingInitialValues ,
        facings . shelfRelativeAddress  AS  facingShelfRelativeAddress , 
        facings . depth  AS  facingDepth , 
        facings . width  AS  facingWidth ,
        facings . height  AS  facingHeight , 
        facings . activationDate  AS  facingActivationDate ,
        facings . deactivationDate  AS  facingDeactivationDate , 
        facings . RS485Address  AS  facingRS485Address ,
        facings . version  AS  facingsVersion , 
        facings . deviceTypeID  AS  facingDeviceTypeID , 
        facings . backBrightness  AS  facingBackBrightness , 
        facings . numberOfSensors  AS  facingNumberOfSensors ,
        facings . geolocation  AS  facingGeoloaction , 
        facings . mfdate  AS  facingMfdate , 
        facings . SN  AS  facingSN  
        from ( displaymatrix_2  left join  facings  
        on(( displaymatrix_2 . shelfID  =  facings . shelfID )));


DROP TABLE IF EXISTS displaymatrix;
CREATE OR REPLACE VIEW displaymatrix AS
select  displaymatrix_3 . clientID  AS  clientID , 
           displaymatrix_3 . storeID  AS  storeID , 
           displaymatrix_3 . storeName  AS  storeName , 
           displaymatrix_3 . storeNumber  AS  storeNumber , 
           displaymatrix_3 . storeCountry  AS  storeCountry , 
           displaymatrix_3 . storeAddress  AS  storeAddress , 
           displaymatrix_3 . storeCity  AS  storeCity ,
           displaymatrix_3 . storeState  AS  storeState ,
           displaymatrix_3 . storeZipcode  AS  storeZipcode , 
           displaymatrix_3 . storeDistrict  AS  storeDistrict , 
           displaymatrix_3 . storeLatitude  AS  storeLatitude , 
           displaymatrix_3 . storeLongitude  AS  storeLongitude , 
           displaymatrix_3 . displayfixtureID  AS  displayfixtureID , 
           displaymatrix_3 . displayfixtureLevel  AS  displayfixtureLevel , 
           displaymatrix_3 . displayfixtureDepth  AS  displayfixtureDepth , 
           displaymatrix_3 . displayfixtureWidth  AS  displayfixtureWidth , 
           displaymatrix_3 . displayfixtureHeight  AS  displayfixtureHeight ,
           displaymatrix_3 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
           displaymatrix_3 . displayfixtureType  AS  displayfixtureType , 
           displaymatrix_3 . displayfixtureLocation  AS  displayfixtureLocation , 
           displaymatrix_3 . shelfID  AS  shelfID , 
           displaymatrix_3 . shelfLevel  AS  shelfLevel , 
           displaymatrix_3 . shelfDepth  AS  shelfDepth , 
           displaymatrix_3 . shelfWidth  AS  shelfWidth , 
           displaymatrix_3 . shelfHeight  AS  shelfHeight , 
           displaymatrix_3 . shelfIPAddress  AS  shelfIPAddress , 
           displaymatrix_3 . shelfPort  AS  shelfPort , 
           displaymatrix_3 . shelfMAC  AS  shelfMAC , 
           displaymatrix_3 . shelfIDForUser  AS  shelfIDForUser , 
           displaymatrix_3 . shelfMfdate  AS  shelfMfdate , 
           displaymatrix_3 . shelfSN  AS  shelfSN , 
           displaymatrix_3 . facingID  AS  facingID , 
           displaymatrix_3 . facingIDForUser  AS  facingIDForUser , 
           displaymatrix_3 . facingInitialValues  AS  facingInitialValues , 
           displaymatrix_3 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
           displaymatrix_3 . facingDepth  AS  facingDepth , 
           displaymatrix_3 . facingWidth  AS  facingWidth , 
           displaymatrix_3 . facingHeight  AS  facingHeight , 
           displaymatrix_3 . facingActivationDate  AS  facingActivationDate , 
           displaymatrix_3 . facingDeactivationDate  AS  facingDeactivationDate , 
           displaymatrix_3 . facingRS485Address  AS  facingRS485Address , 
           displaymatrix_3 . facingsVersion  AS  facingsVersion , 
           displaymatrix_3 . facingDeviceTypeID  AS  facingDeviceTypeID , 
           displaymatrix_3 . facingBackBrightness  AS  facingBackBrightness , 
           displaymatrix_3 . facingNumberOfSensors  AS  facingNumberOfSensors ,
           displaymatrix_3 . facingGeoloaction  AS  facingGeoloaction , 
           displaymatrix_3 . facingMfdate  AS  facingMfdate , 
           displaymatrix_3 . facingSN  AS  facingSN , 
           facingtoproductlinklastdates . fromDate  AS  productFromDate , 
           facingtoproductlinklastdates . productID  AS  productID , 
           facingtoproductlinklastdates . productName  AS  productName , 
           facingtoproductlinklastdates . upc  AS  productUPC , 
           facingtoproductlinklastdates . manufacturer  AS  productManufacturer , 
           facingtoproductlinklastdates . brand  AS  productBrand , 
           facingtoproductlinklastdates . variety  AS  productVariety , 
           facingtoproductlinklastdates . description  AS  productDescription , 
           facingtoproductlinklastdates . super_category  AS  productSuperCategory , 
           facingtoproductlinklastdates . category  AS  productCategory , 
           facingtoproductlinklastdates . unit_material  AS  productUnit_material , 
           facingtoproductlinklastdates . quantity  AS  productQuantity , 
           facingtoproductlinklastdates . depth  AS  productDepth , 
           facingtoproductlinklastdates . width  AS  productWidth ,
           facingtoproductlinklastdates . height  AS  productHeight  
           from ( displaymatrix_3  left join  facingtoproductlinklastdates  on(( displaymatrix_3 . facingID  =  facingtoproductlinklastdates . facingID ))) 
           order by  displaymatrix_3 . clientID , displaymatrix_3 . storeName , displaymatrix_3 . storeID , displaymatrix_3 . displayfixtureIDForUser , displaymatrix_3 . displayfixtureID , displaymatrix_3 . shelfLevel , displaymatrix_3 . facingShelfRelativeAddress;




DROP TABLE IF EXISTS sensorchangesMatrix_1;
CREATE OR REPLACE VIEW sensorchangesMatrix_1 AS
select  displaymatrix . clientID  AS  clientID , 
        displaymatrix . storeID  AS  storeID , 
        displaymatrix . storeName  AS  storeName , 
        displaymatrix . storeNumber  AS  storeNumber , 
        displaymatrix . storeCountry  AS  storeCountry , 
        displaymatrix . storeAddress  AS  storeAddress , 
        displaymatrix . storeCity  AS  storeCity , 
        displaymatrix . storeState  AS  storeState , 
        displaymatrix . storeZipcode  AS  storeZipcode , 
        displaymatrix . storeDistrict  AS  storeDistrict , 
        displaymatrix . storeLatitude  AS  storeLatitude , 
        displaymatrix . storeLongitude  AS  storeLongitude , 
        displaymatrix . displayfixtureID  AS  displayfixtureID , 
        displaymatrix . displayfixtureLevel  AS  displayfixtureLevel , 
        displaymatrix . displayfixtureDepth  AS  displayfixtureDepth , 
        displaymatrix . displayfixtureWidth  AS  displayfixtureWidth , 
        displaymatrix . displayfixtureHeight  AS  displayfixtureHeight , 
        displaymatrix . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        displaymatrix . displayfixtureType  AS  displayfixtureType , 
        displaymatrix . displayfixtureLocation  AS  displayfixtureLocation , 
        displaymatrix . shelfID  AS  shelfID , 
        displaymatrix . shelfLevel  AS  shelfLevel , 
        displaymatrix . shelfDepth  AS  shelfDepth , 
        displaymatrix . shelfWidth  AS  shelfWidth , 
        displaymatrix . shelfHeight  AS  shelfHeight , 
        displaymatrix . shelfIPAddress  AS  shelfIPAddress , 
        displaymatrix . shelfPort  AS  shelfPort , 
        displaymatrix . shelfMAC  AS  shelfMAC , 
        displaymatrix . shelfIDForUser  AS  shelfIDForUser , 
        displaymatrix . shelfMfdate  AS  shelfMfdate , 
        displaymatrix . shelfSN  AS  shelfSN , 
        displaymatrix . facingID  AS  facingID , 
        displaymatrix . facingIDForUser  AS  facingIDForUser , 
        displaymatrix . facingInitialValues  AS  facingInitialValues , 
        displaymatrix . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
        displaymatrix . facingDepth  AS  facingDepth , 
        displaymatrix . facingWidth  AS  facingWidth , 
        displaymatrix . facingHeight  AS  facingHeight ,
        displaymatrix . facingActivationDate  AS  facingActivationDate , 
        displaymatrix . facingDeactivationDate  AS  facingDeactivationDate , 
        displaymatrix . facingRS485Address  AS  facingRS485Address , 
        displaymatrix . facingsVersion  AS  facingsVersion , 
        displaymatrix . facingDeviceTypeID  AS  facingDeviceTypeID , 
        displaymatrix . facingBackBrightness  AS  facingBackBrightness , 
        displaymatrix . facingNumberOfSensors  AS  facingNumberOfSensors , 
        displaymatrix . facingGeoloaction  AS  facingGeoloaction , 
        displaymatrix . facingMfdate  AS  facingMfdate , 
        displaymatrix . facingSN  AS  facingSN , 
        displaymatrix . productFromDate  AS  productFromDate , 
        displaymatrix . productID  AS  productID , 
        displaymatrix . productName  AS  productName , 
        displaymatrix . productUPC  AS  productUPC , 
        displaymatrix . productManufacturer  AS  productManufacturer , 
        displaymatrix . productBrand  AS  productBrand , 
        displaymatrix . productVariety  AS  productVariety , 
        displaymatrix . productDescription  AS  productDescription , 
        displaymatrix . productSuperCategory  AS  productSuperCategory , 
        displaymatrix . productCategory  AS  productCategory , 
        displaymatrix . productUnit_material  AS  productUnit_material , 
        displaymatrix . productQuantity  AS  productQuantity , 
        displaymatrix . productDepth  AS  productDepth , 
        displaymatrix . productWidth  AS  productWidth , 
        displaymatrix . productHeight  AS  productHeight , 
        sensorchanges . sensorchangeID  AS  sensorchangeID , 
        sensorchanges . timeStamp  AS  timeStamp , 
        sensorchanges . state  AS  state  
        from ( sensorchanges  left join  displaymatrix  
        on(( sensorchanges . facingID  =  displaymatrix . facingID ))) 
        order by  sensorchanges . timeStamp ;

DROP TABLE IF EXISTS sensorchangesMatrix_2;
CREATE OR REPLACE VIEW sensorchangesMatrix_2 AS
select  sensorchangesMatrix_1 . clientID  AS  clientID , sensorchangesMatrix_1 . storeID  AS  storeID , 
            sensorchangesMatrix_1 . storeName  AS  storeName , sensorchangesMatrix_1 . storeNumber  AS  storeNumber , sensorchangesMatrix_1 . storeCountry  AS  storeCountry , 
            sensorchangesMatrix_1 . storeAddress  AS  storeAddress , sensorchangesMatrix_1 . storeCity  AS  storeCity , sensorchangesMatrix_1 . storeState  AS  storeState , sensorchangesMatrix_1 . storeZipcode  AS  storeZipcode , 
            sensorchangesMatrix_1 . storeDistrict  AS  storeDistrict , sensorchangesMatrix_1 . storeLatitude  AS  storeLatitude , sensorchangesMatrix_1 . storeLongitude  AS  storeLongitude , sensorchangesMatrix_1 . displayfixtureID  AS  displayfixtureID , 
            sensorchangesMatrix_1 . displayfixtureLevel  AS  displayfixtureLevel , sensorchangesMatrix_1 . displayfixtureDepth  AS  displayfixtureDepth , sensorchangesMatrix_1 . displayfixtureWidth  AS  displayfixtureWidth , 
            sensorchangesMatrix_1 . displayfixtureHeight  AS  displayfixtureHeight , sensorchangesMatrix_1 . displayfixtureIDForUser  AS  displayfixtureIDForUser , sensorchangesMatrix_1 . displayfixtureType  AS  displayfixtureType , 
            sensorchangesMatrix_1 . displayfixtureLocation  AS  displayfixtureLocation , sensorchangesMatrix_1 . shelfID  AS  shelfID , sensorchangesMatrix_1 . shelfLevel  AS  shelfLevel , sensorchangesMatrix_1 . shelfDepth  AS  shelfDepth , 
            sensorchangesMatrix_1 . shelfWidth  AS  shelfWidth , sensorchangesMatrix_1 . shelfHeight  AS  shelfHeight , sensorchangesMatrix_1 . shelfIPAddress  AS  shelfIPAddress , sensorchangesMatrix_1 . shelfPort  AS  shelfPort ,
            sensorchangesMatrix_1 . shelfMAC  AS  shelfMAC , sensorchangesMatrix_1 . shelfIDForUser  AS  shelfIDForUser , sensorchangesMatrix_1 . shelfMfdate  AS  shelfMfdate , sensorchangesMatrix_1 . shelfSN  AS  shelfSN , 
            sensorchangesMatrix_1 . facingID  AS  facingID , sensorchangesMatrix_1 . facingIDForUser  AS  facingIDForUser , sensorchangesMatrix_1 . facingInitialValues  AS  facingInitialValues , sensorchangesMatrix_1 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
            sensorchangesMatrix_1 . facingDepth  AS  facingDepth , sensorchangesMatrix_1 . facingWidth  AS  facingWidth , sensorchangesMatrix_1 . facingHeight  AS  facingHeight , sensorchangesMatrix_1 . facingActivationDate  AS  facingActivationDate , 
            sensorchangesMatrix_1 . facingDeactivationDate  AS  facingDeactivationDate , sensorchangesMatrix_1 . facingRS485Address  AS  facingRS485Address , sensorchangesMatrix_1 . facingsVersion  AS  facingsVersion , 
            sensorchangesMatrix_1 . facingDeviceTypeID  AS  facingDeviceTypeID , sensorchangesMatrix_1 . facingBackBrightness  AS  facingBackBrightness , sensorchangesMatrix_1 . facingNumberOfSensors  AS  facingNumberOfSensors , 
            sensorchangesMatrix_1 . facingGeoloaction  AS  facingGeoloaction , sensorchangesMatrix_1 . facingMfdate  AS  facingMfdate , sensorchangesMatrix_1 . facingSN  AS  facingSN , sensorchangesMatrix_1 . productFromDate  AS  productFromDate ,
            sensorchangesMatrix_1 . productID  AS  productID , sensorchangesMatrix_1 . productName  AS  productName , sensorchangesMatrix_1 . productUPC  AS  productUPC , sensorchangesMatrix_1 . productManufacturer  AS  productManufacturer , 
            sensorchangesMatrix_1 . productBrand  AS  productBrand , sensorchangesMatrix_1 . productVariety  AS  productVariety , sensorchangesMatrix_1 . productDescription  AS  productDescription , sensorchangesMatrix_1 . productSuperCategory  AS  productSuperCategory , 
            sensorchangesMatrix_1 . productCategory  AS  productCategory , sensorchangesMatrix_1 . productUnit_material  AS  productUnit_material , sensorchangesMatrix_1 . productQuantity  AS  productQuantity , sensorchangesMatrix_1 . productDepth  AS  productDepth , 
            sensorchangesMatrix_1 . productWidth  AS  productWidth , sensorchangesMatrix_1 . productHeight  AS  productHeight , sensorchangesMatrix_1 . sensorchangeID  AS  sensorchangeID , sensorchangesMatrix_1 . timeStamp  AS  timeStamp , sensorchangesMatrix_1 . state  AS  state , 
            facingmerchandiselinks . fromDate  AS  fromDate  
            from ( sensorchangesMatrix_1  left join  facingmerchandiselinks  on((( sensorchangesMatrix_1 . facingID  =  facingmerchandiselinks . facingID ) and ( facingmerchandiselinks . fromDate  <=  sensorchangesMatrix_1 . timeStamp ))))
            order by  sensorchangesMatrix_1 . facingID , sensorchangesMatrix_1 . timeStamp  desc;


DROP TABLE IF EXISTS sensorchangesMatrix_3;
CREATE OR REPLACE VIEW sensorchangesMatrix_3 AS
select  sensorchangesMatrix_2 . clientID  AS  clientID , 
            sensorchangesMatrix_2 . storeID  AS  storeID , sensorchangesMatrix_2 . storeName  AS  storeName , 
            sensorchangesMatrix_2 . storeNumber  AS  storeNumber , sensorchangesMatrix_2 . storeCountry  AS  storeCountry , 
            sensorchangesMatrix_2 . storeAddress  AS  storeAddress , sensorchangesMatrix_2 . storeCity  AS  storeCity , sensorchangesMatrix_2 . storeState  AS  storeState , 
            sensorchangesMatrix_2 . storeZipcode  AS  storeZipcode , sensorchangesMatrix_2 . storeDistrict  AS  storeDistrict , sensorchangesMatrix_2 . storeLatitude  AS  storeLatitude , 
            sensorchangesMatrix_2 . storeLongitude  AS  storeLongitude , sensorchangesMatrix_2 . displayfixtureID  AS  displayfixtureID , sensorchangesMatrix_2 . displayfixtureLevel  AS  displayfixtureLevel , 
            sensorchangesMatrix_2 . displayfixtureDepth  AS  displayfixtureDepth , sensorchangesMatrix_2 . displayfixtureWidth  AS  displayfixtureWidth , sensorchangesMatrix_2 . displayfixtureHeight  AS  displayfixtureHeight , 
            sensorchangesMatrix_2 . displayfixtureIDForUser  AS  displayfixtureIDForUser , sensorchangesMatrix_2 . displayfixtureType  AS  displayfixtureType , sensorchangesMatrix_2 . displayfixtureLocation  AS  displayfixtureLocation , 
            sensorchangesMatrix_2 . shelfID  AS  shelfID , sensorchangesMatrix_2 . shelfLevel  AS  shelfLevel , sensorchangesMatrix_2 . shelfDepth  AS  shelfDepth , sensorchangesMatrix_2 . shelfWidth  AS  shelfWidth , 
            sensorchangesMatrix_2 . shelfHeight  AS  shelfHeight , sensorchangesMatrix_2 . shelfIPAddress  AS  shelfIPAddress , sensorchangesMatrix_2 . shelfPort  AS  shelfPort , sensorchangesMatrix_2 . shelfMAC  AS  shelfMAC , 
            sensorchangesMatrix_2 . shelfIDForUser  AS  shelfIDForUser , sensorchangesMatrix_2 . shelfMfdate  AS  shelfMfdate , sensorchangesMatrix_2 . shelfSN  AS  shelfSN , sensorchangesMatrix_2 . facingID  AS  facingID , 
            sensorchangesMatrix_2 . facingIDForUser  AS  facingIDForUser , sensorchangesMatrix_2 . facingInitialValues  AS  facingInitialValues , sensorchangesMatrix_2 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
            sensorchangesMatrix_2 . facingDepth  AS  facingDepth , sensorchangesMatrix_2 . facingWidth  AS  facingWidth , sensorchangesMatrix_2 . facingHeight  AS  facingHeight , 
            sensorchangesMatrix_2 . facingActivationDate  AS  facingActivationDate , sensorchangesMatrix_2 . facingDeactivationDate  AS  facingDeactivationDate , sensorchangesMatrix_2 . facingRS485Address  AS  facingRS485Address , 
            sensorchangesMatrix_2 . facingsVersion  AS  facingsVersion , sensorchangesMatrix_2 . facingDeviceTypeID  AS  facingDeviceTypeID , sensorchangesMatrix_2 . facingBackBrightness  AS  facingBackBrightness , 
            sensorchangesMatrix_2 . facingNumberOfSensors  AS  facingNumberOfSensors , sensorchangesMatrix_2 . facingGeoloaction  AS  facingGeoloaction , sensorchangesMatrix_2 . facingMfdate  AS  facingMfdate , 
            sensorchangesMatrix_2 . facingSN  AS  facingSN , sensorchangesMatrix_2 . productFromDate  AS  productFromDate , sensorchangesMatrix_2 . productID  AS  productID , sensorchangesMatrix_2 . productName  AS  productName , 
            sensorchangesMatrix_2 . productUPC  AS  productUPC , sensorchangesMatrix_2 . productManufacturer  AS  productManufacturer , sensorchangesMatrix_2 . productBrand  AS  productBrand , 
            sensorchangesMatrix_2 . productVariety  AS  productVariety , sensorchangesMatrix_2 . productDescription  AS  productDescription , sensorchangesMatrix_2 . productSuperCategory  AS  productSuperCategory , 
            sensorchangesMatrix_2 . productCategory  AS  productCategory , sensorchangesMatrix_2 . productUnit_material  AS  productUnit_material , sensorchangesMatrix_2 . productQuantity  AS  productQuantity , 
            sensorchangesMatrix_2 . productDepth  AS  productDepth , sensorchangesMatrix_2 . productWidth  AS  productWidth , sensorchangesMatrix_2 . productHeight  AS  productHeight , 
            sensorchangesMatrix_2 . sensorchangeID  AS  sensorchangeID , sensorchangesMatrix_2 . timeStamp  AS  timeStamp , sensorchangesMatrix_2 . state  AS  state , 
            sensorchangesMatrix_2 . fromDate  AS  fromDate ,max( sensorchangesMatrix_2 . fromDate ) AS  productAssignDate  from  sensorchangesMatrix_2  
 group by  sensorchangesMatrix_2 . sensorchangeID ;

DROP TABLE IF EXISTS sensorchangesMatrix_4;
CREATE OR REPLACE VIEW sensorchangesMatrix_4 AS
select  sensorchangesMatrix_3 . clientID  AS  clientID , sensorchangesMatrix_3 . storeID  AS  storeID , sensorchangesMatrix_3 . storeName  AS  storeName , 
           sensorchangesMatrix_3 . storeNumber  AS  storeNumber , sensorchangesMatrix_3 . storeCountry  AS  storeCountry , sensorchangesMatrix_3 . storeAddress  AS  storeAddress , 
           sensorchangesMatrix_3 . storeCity  AS  storeCity , sensorchangesMatrix_3 . storeState  AS  storeState , sensorchangesMatrix_3 . storeZipcode  AS  storeZipcode , sensorchangesMatrix_3 . storeDistrict  AS  storeDistrict , 
           sensorchangesMatrix_3 . storeLatitude  AS  storeLatitude , sensorchangesMatrix_3 . storeLongitude  AS  storeLongitude , sensorchangesMatrix_3 . displayfixtureID  AS  displayfixtureID , 
           sensorchangesMatrix_3 . displayfixtureLevel  AS  displayfixtureLevel , sensorchangesMatrix_3 . displayfixtureDepth  AS  displayfixtureDepth , sensorchangesMatrix_3 . displayfixtureWidth  AS  displayfixtureWidth , 
           sensorchangesMatrix_3 . displayfixtureHeight  AS  displayfixtureHeight , sensorchangesMatrix_3 . displayfixtureIDForUser  AS  displayfixtureIDForUser , sensorchangesMatrix_3 . displayfixtureType  AS  displayfixtureType , 
           sensorchangesMatrix_3 . displayfixtureLocation  AS  displayfixtureLocation , sensorchangesMatrix_3 . shelfID  AS  shelfID , sensorchangesMatrix_3 . shelfLevel  AS  shelfLevel , 
           sensorchangesMatrix_3 . shelfDepth  AS  shelfDepth , sensorchangesMatrix_3 . shelfWidth  AS  shelfWidth , sensorchangesMatrix_3 . shelfHeight  AS  shelfHeight , 
           sensorchangesMatrix_3 . shelfIPAddress  AS  shelfIPAddress , sensorchangesMatrix_3 . shelfPort  AS  shelfPort , sensorchangesMatrix_3 . shelfMAC  AS  shelfMAC , 
           sensorchangesMatrix_3 . shelfIDForUser  AS  shelfIDForUser , sensorchangesMatrix_3 . shelfMfdate  AS  shelfMfdate , sensorchangesMatrix_3 . shelfSN  AS  shelfSN ,
           sensorchangesMatrix_3 . facingID  AS  facingID , sensorchangesMatrix_3 . facingIDForUser  AS  facingIDForUser , sensorchangesMatrix_3 . facingInitialValues  AS  facingInitialValues , 
           sensorchangesMatrix_3 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , sensorchangesMatrix_3 . facingDepth  AS  facingDepth , sensorchangesMatrix_3 . facingWidth  AS  facingWidth , 
           sensorchangesMatrix_3 . facingHeight  AS  facingHeight , sensorchangesMatrix_3 . facingActivationDate  AS  facingActivationDate , sensorchangesMatrix_3 . facingDeactivationDate  AS  facingDeactivationDate , 
           sensorchangesMatrix_3 . facingRS485Address  AS  facingRS485Address , sensorchangesMatrix_3 . facingsVersion  AS  facingsVersion , sensorchangesMatrix_3 . facingDeviceTypeID  AS  facingDeviceTypeID ,
           sensorchangesMatrix_3 . facingBackBrightness  AS  facingBackBrightness , sensorchangesMatrix_3 . facingNumberOfSensors  AS  facingNumberOfSensors , sensorchangesMatrix_3 . facingGeoloaction  AS  facingGeoloaction , 
           sensorchangesMatrix_3 . facingMfdate  AS  facingMfdate , sensorchangesMatrix_3 . facingSN  AS  facingSN , sensorchangesMatrix_3 . productFromDate  AS  productFromDate , sensorchangesMatrix_3 . productID  AS  productID , 
           sensorchangesMatrix_3 . productName  AS  productName , sensorchangesMatrix_3 . productUPC  AS  productUPC , sensorchangesMatrix_3 . productManufacturer  AS  productManufacturer , 
           sensorchangesMatrix_3 . productBrand  AS  productBrand , sensorchangesMatrix_3 . productVariety  AS  productVariety , sensorchangesMatrix_3 . productDescription  AS  productDescription , 
           sensorchangesMatrix_3 . productSuperCategory  AS  productSuperCategory , sensorchangesMatrix_3 . productCategory  AS  productCategory , sensorchangesMatrix_3 . productUnit_material  AS  productUnit_material , 
           sensorchangesMatrix_3 . productQuantity  AS  productQuantity , sensorchangesMatrix_3 . productDepth  AS  productDepth , sensorchangesMatrix_3 . productWidth  AS  productWidth , sensorchangesMatrix_3 . productHeight  AS  productHeight , 
           sensorchangesMatrix_3 . sensorchangeID  AS  sensorchangeID , sensorchangesMatrix_3 . timeStamp  AS  timeStamp , sensorchangesMatrix_3 . state  AS  state , sensorchangesMatrix_3 . fromDate  AS  fromDate , 
           sensorchangesMatrix_3 . productAssignDate  AS  productAssignDate  
           from ( sensorchangesMatrix_3  left join  facingmerchandiselinks  
           on((( sensorchangesMatrix_3 . facingID  =  facingmerchandiselinks . facingID ) and ( facingmerchandiselinks . fromDate  =  sensorchangesMatrix_3 . productAssignDate ))));

DROP TABLE IF EXISTS sensorchangesMatrix_5;
CREATE OR REPLACE VIEW sensorchangesMatrix_5 AS
select  sensorchangesMatrix_4 . clientID  AS  clientID , 
		    sensorchangesMatrix_4 . storeID  AS  storeID , 
            sensorchangesMatrix_4 . storeName  AS  storeName , 
            sensorchangesMatrix_4 . storeNumber  AS  storeNumber , 
            sensorchangesMatrix_4 . storeCountry  AS  storeCountry , 
            sensorchangesMatrix_4 . storeAddress  AS  storeAddress , 
            sensorchangesMatrix_4 . storeCity  AS  storeCity , 
            sensorchangesMatrix_4 . storeState  AS  storeState , 
            sensorchangesMatrix_4 . storeZipcode  AS  storeZipcode , 
            sensorchangesMatrix_4 . storeDistrict  AS  storeDistrict , 
            sensorchangesMatrix_4 . storeLatitude  AS  storeLatitude , 
            sensorchangesMatrix_4 . storeLongitude  AS  storeLongitude , 
            sensorchangesMatrix_4 . displayfixtureID  AS  displayfixtureID , 
            sensorchangesMatrix_4 . displayfixtureLevel  AS  displayfixtureLevel , 
            sensorchangesMatrix_4 . displayfixtureDepth  AS  displayfixtureDepth , 
            sensorchangesMatrix_4 . displayfixtureWidth  AS  displayfixtureWidth , 
            sensorchangesMatrix_4 . displayfixtureHeight  AS  displayfixtureHeight , 
            sensorchangesMatrix_4 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
            sensorchangesMatrix_4 . displayfixtureType  AS  displayfixtureType , 
            sensorchangesMatrix_4 . displayfixtureLocation  AS  displayfixtureLocation , 
            sensorchangesMatrix_4 . shelfID  AS  shelfID , 
            sensorchangesMatrix_4 . shelfLevel  AS  shelfLevel , 
            sensorchangesMatrix_4 . shelfDepth  AS  shelfDepth , 
            sensorchangesMatrix_4 . shelfWidth  AS  shelfWidth , 
            sensorchangesMatrix_4 . shelfHeight  AS  shelfHeight ,
            sensorchangesMatrix_4 . shelfIPAddress  AS  shelfIPAddress , 
            sensorchangesMatrix_4 . shelfPort  AS  shelfPort , 
            sensorchangesMatrix_4 . shelfMAC  AS  shelfMAC , 
            sensorchangesMatrix_4 . shelfIDForUser  AS  shelfIDForUser , 
            sensorchangesMatrix_4 . shelfMfdate  AS  shelfMfdate , 
            sensorchangesMatrix_4 . shelfSN  AS  shelfSN , 
            sensorchangesMatrix_4 . facingID  AS  facingID , 
            sensorchangesMatrix_4 . facingIDForUser  AS  facingIDForUser , 
            sensorchangesMatrix_4 . facingInitialValues  AS  facingInitialValues , 
            sensorchangesMatrix_4 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
            sensorchangesMatrix_4 . facingDepth  AS  facingDepth , 
            sensorchangesMatrix_4 . facingWidth  AS  facingWidth , 
            sensorchangesMatrix_4 . facingHeight  AS  facingHeight , 
            sensorchangesMatrix_4 . facingActivationDate  AS  facingActivationDate , sensorchangesMatrix_4 . facingDeactivationDate  AS  facingDeactivationDate , 
            sensorchangesMatrix_4 . facingRS485Address  AS  facingRS485Address , sensorchangesMatrix_4 . facingsVersion  AS  facingsVersion , sensorchangesMatrix_4 . facingDeviceTypeID  AS  facingDeviceTypeID , 
            sensorchangesMatrix_4 . facingBackBrightness  AS  facingBackBrightness , sensorchangesMatrix_4 . facingNumberOfSensors  AS  facingNumberOfSensors , sensorchangesMatrix_4 . facingGeoloaction  AS  facingGeoloaction ,
            sensorchangesMatrix_4 . facingMfdate  AS  facingMfdate , sensorchangesMatrix_4 . facingSN  AS  facingSN , sensorchangesMatrix_4 . productFromDate  AS  productFromDate , sensorchangesMatrix_4 . productID  AS  productID ,
            sensorchangesMatrix_4 . productName  AS  productName , sensorchangesMatrix_4 . productUPC  AS  productUPC , 
            sensorchangesMatrix_4 . productManufacturer  AS  productManufacturer , sensorchangesMatrix_4 . productBrand  AS  productBrand , 
            sensorchangesMatrix_4 . productVariety  AS  productVariety , sensorchangesMatrix_4 . productDescription  AS  productDescription , 
            sensorchangesMatrix_4 . productSuperCategory  AS  productSuperCategory , sensorchangesMatrix_4 . productCategory  AS  productCategory , 
            sensorchangesMatrix_4 . productUnit_material  AS  productUnit_material , sensorchangesMatrix_4 . productQuantity  AS  productQuantity , 
            sensorchangesMatrix_4 . productDepth  AS  productDepth , sensorchangesMatrix_4 . productWidth  AS  productWidth , sensorchangesMatrix_4 . productHeight  AS  productHeight , 
            sensorchangesMatrix_4 . sensorchangeID  AS  sensorchangeID , sensorchangesMatrix_4 . timeStamp  AS  timeStamp , sensorchangesMatrix_4 . state  AS  state , sensorchangesMatrix_4 . fromDate  AS  fromDate , 
            sensorchangesMatrix_4 . productAssignDate  AS  productAssignDate  from ( sensorchangesMatrix_4  left join  merchandiseItemToProductView  
            on(( sensorchangesMatrix_4 . productID  =  merchandiseItemToProductView . productID )));


DROP TABLE IF EXISTS sensorchangesMatrix;
CREATE OR REPLACE VIEW sensorchangesMatrix AS
select  clients . clientName  AS  clientName , sensorchangesMatrix_5 . clientID  AS  clientID , sensorchangesMatrix_5 . storeID  AS  storeID , sensorchangesMatrix_5 . storeName  AS  storeName , 
            sensorchangesMatrix_5 . storeNumber  AS  storeNumber , sensorchangesMatrix_5 . storeCountry  AS  storeCountry , 
            sensorchangesMatrix_5 . storeAddress  AS  storeAddress , sensorchangesMatrix_5 . storeCity  AS  storeCity , 
            sensorchangesMatrix_5 . storeState  AS  storeState , sensorchangesMatrix_5 . storeZipcode  AS  storeZipcode , 
            sensorchangesMatrix_5 . storeDistrict  AS  storeDistrict , sensorchangesMatrix_5 . storeLatitude  AS  storeLatitude , 
            sensorchangesMatrix_5 . storeLongitude  AS  storeLongitude , sensorchangesMatrix_5 . displayfixtureID  AS  displayfixtureID , 
            sensorchangesMatrix_5 . displayfixtureLevel  AS  displayfixtureLevel , sensorchangesMatrix_5 . displayfixtureDepth  AS  displayfixtureDepth , 
            sensorchangesMatrix_5 . displayfixtureWidth  AS  displayfixtureWidth , sensorchangesMatrix_5 . displayfixtureHeight  AS  displayfixtureHeight , 
            sensorchangesMatrix_5 . displayfixtureIDForUser  AS  displayfixtureIDForUser , sensorchangesMatrix_5 . displayfixtureType  AS  displayfixtureType , 
            sensorchangesMatrix_5 . displayfixtureLocation  AS  displayfixtureLocation , sensorchangesMatrix_5 . shelfID  AS  shelfID , sensorchangesMatrix_5 . shelfLevel  AS  shelfLevel , 
            sensorchangesMatrix_5 . shelfDepth  AS  shelfDepth , sensorchangesMatrix_5 . shelfWidth  AS  shelfWidth , sensorchangesMatrix_5 . shelfHeight  AS  shelfHeight , 
            sensorchangesMatrix_5 . shelfIPAddress  AS  shelfIPAddress , sensorchangesMatrix_5 . shelfPort  AS  shelfPort , sensorchangesMatrix_5 . shelfMAC  AS  shelfMAC , 
            sensorchangesMatrix_5 . shelfIDForUser  AS  shelfIDForUser , sensorchangesMatrix_5 . shelfMfdate  AS  shelfMfdate , sensorchangesMatrix_5 . shelfSN  AS  shelfSN , 
            sensorchangesMatrix_5 . facingID  AS  facingID , sensorchangesMatrix_5 . facingIDForUser  AS  facingIDForUser , sensorchangesMatrix_5 . facingInitialValues  AS  facingInitialValues , 
            sensorchangesMatrix_5 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , sensorchangesMatrix_5 . facingDepth  AS  facingDepth , sensorchangesMatrix_5 . facingWidth  AS  facingWidth , 
            sensorchangesMatrix_5 . facingHeight  AS  facingHeight , sensorchangesMatrix_5 . facingActivationDate  AS  facingActivationDate , sensorchangesMatrix_5 . facingDeactivationDate  AS  facingDeactivationDate , 
            sensorchangesMatrix_5 . facingRS485Address  AS  facingRS485Address , sensorchangesMatrix_5 . facingsVersion  AS  facingsVersion , sensorchangesMatrix_5 . facingDeviceTypeID  AS  facingDeviceTypeID , 
            sensorchangesMatrix_5 . facingBackBrightness  AS  facingBackBrightness , sensorchangesMatrix_5 . facingNumberOfSensors  AS  facingNumberOfSensors , sensorchangesMatrix_5 . facingGeoloaction  AS  facingGeoloaction , 
            sensorchangesMatrix_5 . facingMfdate  AS  facingMfdate , sensorchangesMatrix_5 . facingSN  AS  facingSN , sensorchangesMatrix_5 . productFromDate  AS  productFromDate , 
            sensorchangesMatrix_5 . productID  AS  productID , sensorchangesMatrix_5 . productName  AS  productName , sensorchangesMatrix_5 . productUPC  AS  productUPC , 
            sensorchangesMatrix_5 . productManufacturer  AS  productManufacturer , sensorchangesMatrix_5 . productBrand  AS  productBrand , sensorchangesMatrix_5 . productVariety  AS  productVariety , 
            sensorchangesMatrix_5 . productDescription  AS  productDescription , sensorchangesMatrix_5 . productSuperCategory  AS  productSuperCategory , sensorchangesMatrix_5 . productCategory  AS  productCategory , 
            sensorchangesMatrix_5 . productUnit_material  AS  productUnit_material , sensorchangesMatrix_5 . productQuantity  AS  productQuantity , sensorchangesMatrix_5 . productDepth  AS  productDepth ,
            sensorchangesMatrix_5 . productWidth  AS  productWidth , sensorchangesMatrix_5 . productHeight  AS  productHeight , sensorchangesMatrix_5 . sensorchangeID  AS  sensorchangeID , 
            sensorchangesMatrix_5 . timeStamp  AS  timeStamp , sensorchangesMatrix_5 . state  AS  state , sensorchangesMatrix_5 . fromDate  AS  fromDate , 
            sensorchangesMatrix_5 . productAssignDate  AS  productAssignDate  
            from ( sensorchangesMatrix_5  left join  clients  
            on(( sensorchangesMatrix_5 . clientID  =  clients . clientID )));

DROP TABLE IF EXISTS maxFacingPositionByShelf;
CREATE OR REPLACE VIEW maxFacingPositionByShelf AS
select displaymatrix.shelfID AS shelfID,
       max(displaymatrix.facingShelfRelativeAddress) AS maxposition 
from displaymatrix group by displaymatrix.shelfID;

DROP TABLE IF EXISTS maxShelfLevelByFixture;
CREATE OR REPLACE VIEW maxShelfLevelByFixture AS
select displaymatrix.displayfixtureID AS displayfixtureID,
       max(displaymatrix.shelfLevel) AS maxlevel
from displaymatrix group by displaymatrix.displayfixtureID;


DROP TABLE IF EXISTS facingdisplaymatrix_1;
CREATE OR REPLACE VIEW facingdisplaymatrix_1 AS
select  allshelfs . shelfID  AS  shelfID , 
            allshelfs . displayfixtureID  AS  displayfixtureID , 
            allshelfs . storeID  AS  storeID , 
            allshelfs . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
            allshelfs . IPAddress  AS  shelfIPAddress , 
            allshelfs . port  AS  shelfPort , 
            allshelfs . shelfIDForUser  AS  shelfIDForUser , 
            allshelfs . level  AS  shelfLevel , 
            facings . facingID  AS  facingID , 
            facings . facingIDForUser  AS  facingIDForUser , 
            facings . shelfRelativeAddress  AS  facingShelfRelativeAddress , 
            facings . SN  AS  facingSN , 
            facings . RS485Address  AS  facingRS485Address , 
            facings . initialValues  AS  facingInitialValues , 
            facings . deviceTypeID  AS  facingDeviceTypeID  
            from ( allshelfs  join  facings  on(( allshelfs . shelfID  =  facings . shelfID )));

DROP TABLE IF EXISTS facingdisplaymatrix_2;
CREATE OR REPLACE VIEW facingdisplaymatrix_2 AS
select  facingdisplaymatrix_1 . storeID  AS  storeID ,
		  facingdisplaymatrix_1 . displayfixtureID  AS  displayfixtureID ,
        facingdisplaymatrix_1 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        facingdisplaymatrix_1 . shelfID  AS  shelfID ,
        facingdisplaymatrix_1 . facingID  AS  facingID , 
        facingdisplaymatrix_1 . facingIDForUser  AS  facingIDForUser , 
        facingdisplaymatrix_1 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
        facingdisplaymatrix_1 . shelfIPAddress  AS  shelfIPAddress , 
        facingdisplaymatrix_1 . shelfPort  AS  shelfPort , 
        facingdisplaymatrix_1 . shelfIDForUser  AS  shelfIDForUser , 
        facingdisplaymatrix_1 . shelfLevel  AS  shelfLevel , 
        facingdisplaymatrix_1 . facingSN  AS  facingSN , facingdisplaymatrix_1 . facingRS485Address  AS  facingRS485Address , 
        facingdisplaymatrix_1 . facingInitialValues  AS  facingInitialValues , 
        facingdisplaymatrix_1 . facingDeviceTypeID  AS  facingDeviceTypeID , 
        facingtoproductlinklastdates . fromDate  AS  productFromDate , 
        facingtoproductlinklastdates . productID  AS  productID , 
        facingtoproductlinklastdates . upc  AS  upc , 
        facingtoproductlinklastdates . productName  AS  productName , 
        facingtoproductlinklastdates . manufacturer  AS  productManufacturer , 
        facingtoproductlinklastdates . brand  AS  productBrand , 
        facingtoproductlinklastdates . variety  AS  productVariety , 
        facingtoproductlinklastdates . description  AS  productDescription , 
        facingtoproductlinklastdates . super_category  AS  productSuperCategory , 
        facingtoproductlinklastdates . category  AS  productCategory , 
        facingtoproductlinklastdates . unit_material  AS  productUnit_material , 
        facingtoproductlinklastdates . quantity  AS  productQuantity , 
        facingtoproductlinklastdates . depth  AS  productDepth  
        from ( facingdisplaymatrix_1  left join  facingtoproductlinklastdates  on(( facingdisplaymatrix_1 . facingID  =  facingtoproductlinklastdates . facingID ))) 
        order by  facingdisplaymatrix_1 . displayfixtureIDForUser , facingdisplaymatrix_1 . shelfLevel , facingdisplaymatrix_1 . facingShelfRelativeAddress ;


DROP TABLE IF EXISTS facingdisplaymatrix;
CREATE OR REPLACE VIEW facingdisplaymatrix AS
select  stores . clientID  AS  clientID , 
		stores . storeName  AS  storeName , 
        stores . storeNumber  AS  storeNumber , 
        stores . country  AS  storeCountry , 
        stores . address  AS  storeAddress , 
        stores . city  AS  storeCity ,
        stores . state  AS  storeState , 
        stores . zipcode  AS  storeZipcode , 
        stores . district  AS  storeDistrict , 
        stores . latitude  AS  storeLatitude , 
        stores . longitude  AS  storeLongitude ,
        facingdisplaymatrix_2 . storeID  AS  storeID , 
        facingdisplaymatrix_2 . displayfixtureID  AS  displayfixtureID , 
        facingdisplaymatrix_2 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        facingdisplaymatrix_2 . shelfID  AS  shelfID , 
        facingdisplaymatrix_2 . facingID  AS  facingID ,
        facingdisplaymatrix_2 . facingIDForUser  AS  facingIDForUser , 
        facingdisplaymatrix_2 . facingShelfRelativeAddress  AS  facingShelfRelativeAddress , 
        facingdisplaymatrix_2 . shelfIPAddress  AS  shelfIPAddress , 
        facingdisplaymatrix_2 . shelfPort  AS  shelfPort , 
        facingdisplaymatrix_2 . shelfIDForUser  AS  shelfIDForUser , 
        facingdisplaymatrix_2 . shelfLevel  AS  shelfLevel , 
        facingdisplaymatrix_2 . facingSN  AS  facingSN ,
        facingdisplaymatrix_2 . facingRS485Address  AS  facingRS485Address , 
        facingdisplaymatrix_2 . facingInitialValues  AS  facingInitialValues , 
        facingdisplaymatrix_2 . facingDeviceTypeID  AS  facingDeviceTypeID , 
        facingdisplaymatrix_2 . productFromDate  AS  productFromDate , 
        facingdisplaymatrix_2 . productID  AS  productID , 
        facingdisplaymatrix_2 . upc  AS  upc , 
        facingdisplaymatrix_2 . productName  AS  productName ,
        facingdisplaymatrix_2 . productManufacturer  AS  productManufacturer , 
        facingdisplaymatrix_2 . productBrand  AS  productBrand , 
        facingdisplaymatrix_2 . productVariety  AS  productVariety , 
        facingdisplaymatrix_2 . productDescription  AS  productDescription , 
        facingdisplaymatrix_2 . productSuperCategory  AS  productSuperCategory , 
        facingdisplaymatrix_2 . productCategory  AS  productCategory ,
        facingdisplaymatrix_2 . productUnit_material  AS  productUnit_material , 
        facingdisplaymatrix_2 . productQuantity  AS  productQuantity , 
        facingdisplaymatrix_2 . productDepth  AS  productDepth  
        from ( facingdisplaymatrix_2  join  stores  on(( facingdisplaymatrix_2 . storeID  =  stores . storeID ))) 
        order by  stores . clientID , facingdisplaymatrix_2 . storeID , facingdisplaymatrix_2 . displayfixtureIDForUser , facingdisplaymatrix_2 . shelfLevel , facingdisplaymatrix_2 . facingShelfRelativeAddress ;

    

DROP TABLE IF EXISTS facingswithbatch;
CREATE OR REPLACE VIEW facingswithbatch AS 
-- SELECT facings.SN,
--                facings.facingID,
--                facings.shelfID,
--                facings.initialValues,
--                facings.shelfRelativeAddress,
--                hardwarewithbatch.address,
--                hardwarewithbatch.factoryID,
--                hardwarewithbatch.deviceTypeID,
--                hardwarewithbatch.mfDateMonth,
--        hardwarewithbatch.mfDateDay,
--        hardwarewithbatch.mfDateYear
--        from facings join hardwarewithbatch
--        on facings.SN =  hardwarewithbatch.serialnumber;
select  facings . SN  AS  SN , 
        facings . facingID  AS  facingID , 
        facings . shelfID  AS  shelfID , 
        facings . initialValues  AS  initialValues , 
        facings . shelfRelativeAddress  AS  shelfRelativeAddress , 
        hardwarewithbatch . address  AS  address , 
        hardwarewithbatch . factoryID  AS  factoryID , 
        hardwarewithbatch . deviceTypeID  AS  deviceTypeID , 
        hardwarewithbatch . mfDateMonth  AS  mfDateMonth , 
        hardwarewithbatch . mfDateDay  AS  mfDateDay , 
        hardwarewithbatch . mfDateYear  AS  mfDateYear  
        from ( facings  join  hardwarewithbatch  
        on(( facings . SN  =  hardwarewithbatch . serialnumber )));

DROP TABLE IF EXISTS activatedfacings_1;
CREATE OR REPLACE VIEW activatedfacings_1 AS 
-- select  activatedshelfs . shelfID  AS  shelfID ,
--         activatedshelfs . displayfixtureID  AS  displayfixtureID ,
--         activatedshelfs . displayfixtureIDForUser AS displayfixtureIDForUser ,
--         activatedshelfs . storeID  AS  storeID ,
--         facingswithbatch . facingID  AS  facingID ,
--         facingswithbatch . shelfRelativeAddress AS shelfRelativeAddress,
--         activatedshelfs . IPAddress  AS  IPAddress ,
--         activatedshelfs . port  AS  port ,
--          facingswithbatch . SN  AS  SN ,
--          facingswithbatch . address  AS  RS485Address ,
--          facingswithbatch . initialValues  AS  initialValues ,
--          facingswithbatch . deviceTypeID  AS  deviceTypeID  
--        from (  activatedshelfs  
--        join   facingswithbatch  
--        on(( activatedshelfs . shelfID  =   facingswithbatch . shelfID ))) 
--        where (  facingswithbatch . SN  <> '');
select  activatedshelfs . shelfID  AS  shelfID , 
        activatedshelfs . displayfixtureID  AS  displayfixtureID , 
        activatedshelfs . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        activatedshelfs . storeID  AS  storeID , 
        facingswithbatch . facingID  AS  facingID , 
        facingswithbatch . shelfRelativeAddress  AS  shelfRelativeAddress , 
        activatedshelfs . IPAddress  AS  IPAddress , 
        activatedshelfs . port  AS  port , 
        facingswithbatch . SN  AS  SN , 
        facingswithbatch . address  AS  RS485Address , 
        facingswithbatch . initialValues  AS  initialValues , 
        facingswithbatch . deviceTypeID  AS  deviceTypeID  
        from ( activatedshelfs  join  facingswithbatch  
        on(( activatedshelfs . shelfID  =  facingswithbatch . shelfID ))) 
        where ( facingswithbatch . SN  <> '');

DROP TABLE IF EXISTS activatedfacings_2;
CREATE OR REPLACE VIEW activatedfacings_2 AS 
-- select  activatedfacings_1 . shelfID  AS  shelfID ,
--         activatedfacings_1 . displayfixtureID  AS  displayfixtureID ,
--         activatedfacings_1 . displayfixtureIDForUser  AS  displayfixtureIDForUser ,
--         activatedfacings_1 . storeID  AS  storeID ,
--         activatedfacings_1 . facingID  AS  facingID ,
--         activatedfacings_1.  shelfRelativeAddress AS shelfRelativeAddress,
--         activatedfacings_1 . IPAddress  AS  IPAddress ,
--         activatedfacings_1 . port  AS  port ,
--         activatedfacings_1 . SN  AS  SN ,
--         activatedfacings_1 . RS485Address  AS  RS485Address ,
--         activatedfacings_1 . initialValues  AS  initialValues ,
--         activatedfacings_1 . deviceTypeID  AS  deviceTypeID ,
--         facingtoproductlink . fromDate  AS  productFromDate ,
--         facingtoproductlink . transparency  AS  productTransparency ,        
--         facingtoproductlink . depth  AS  productDepth                                     
--        from (  activatedfacings_1  
--        join   facingtoproductlink                                                    
--        on( activatedfacings_1 . facingID  =  facingtoproductlink . facingID ));   
select  activatedfacings_1 . shelfID  AS  shelfID , 
        activatedfacings_1 . displayfixtureID  AS  displayfixtureID , 
        activatedfacings_1 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        activatedfacings_1 . storeID  AS  storeID , 
        activatedfacings_1 . facingID  AS  facingID , 
        activatedfacings_1 . shelfRelativeAddress  AS  shelfRelativeAddress , 
        activatedfacings_1 . IPAddress  AS  IPAddress , 
        activatedfacings_1 . port  AS  port , 
        activatedfacings_1 . SN  AS  SN , 
        activatedfacings_1 . RS485Address  AS  RS485Address , 
        activatedfacings_1 . initialValues  AS  initialValues , 
        activatedfacings_1 . deviceTypeID  AS  deviceTypeID , 
        facingtoproductlink . fromDate  AS  productFromDate , 
        facingtoproductlink . transparency  AS  productTransparency , 
        facingtoproductlink . depth  AS  productDepth  
        from ( activatedfacings_1  join  facingtoproductlink  
        on(( activatedfacings_1 . facingID  =  facingtoproductlink . facingID ))); 

DROP TABLE IF EXISTS activatedfacings_3;
CREATE OR REPLACE VIEW activatedfacings_3 AS
      --  select   activatedfacings_2 . shelfID  AS  shelfID ,
      --          activatedfacings_2 . displayfixtureID  AS  displayfixtureID ,
      --          activatedfacings_2 . displayfixtureIDForUser  AS  displayfixtureIDForUser ,
      --          activatedfacings_2 . storeID  AS  storeID ,
      --          activatedfacings_2 . facingID  AS  facingID ,
      --          activatedfacings_2.  shelfRelativeAddress AS shelfRelativeAddress,
      --          activatedfacings_2 . IPAddress  AS  IPAddress ,
      --          activatedfacings_2 . port  AS  port ,
      --          activatedfacings_2 . SN  AS  SN ,
      --          activatedfacings_2 . RS485Address  AS  RS485Address ,
      --          activatedfacings_2 . initialValues  AS  initialValues ,
      --          activatedfacings_2 . deviceTypeID  AS  deviceTypeID ,
      --          activatedfacings_2 . productFromDate  AS  productFromDate ,
      --          activatedfacings_2 . productTransparency AS productTransparency,
      --          activatedfacings_2 . productDepth  AS  productDepth 
      --  from ( activatedfacings_2 
      --  join  facingtoproductlinklastdates  
      --  on  facingtoproductlinklastdates . facingID  =  activatedfacings_2 . facingID 
      --  AND  facingtoproductlinklastdates . fromDate  =  activatedfacings_2 . productFromDate ); 
select  activatedfacings_2 . shelfID  AS  shelfID , 
        activatedfacings_2 . displayfixtureID  AS  displayfixtureID , 
        activatedfacings_2 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        activatedfacings_2 . storeID  AS  storeID , 
        activatedfacings_2 . facingID  AS  facingID , 
        activatedfacings_2 . shelfRelativeAddress  AS  shelfRelativeAddress , 
        activatedfacings_2 . IPAddress  AS  IPAddress , 
        activatedfacings_2 . port  AS  port , 
        activatedfacings_2 . SN  AS  SN , 
        activatedfacings_2 . RS485Address  AS  RS485Address , 
        activatedfacings_2 . initialValues  AS  initialValues , 
        activatedfacings_2 . deviceTypeID  AS  deviceTypeID , 
        activatedfacings_2 . productFromDate  AS  productFromDate , 
        activatedfacings_2 . productTransparency  AS  productTransparency , 
        activatedfacings_2 . productDepth  AS  productDepth  
        from ( activatedfacings_2  join  facingtoproductlinklastdates  
        on((( facingtoproductlinklastdates . facingID  =  activatedfacings_2 . facingID ) 
        and ( facingtoproductlinklastdates . fromDate  =  activatedfacings_2 . productFromDate ))));

DROP TABLE IF EXISTS activatedfacings;
CREATE OR REPLACE VIEW activatedfacings AS
-- select  activatedfacings_3 . facingID  AS  facingID ,
--         activatedfacings_3.  shelfRelativeAddress AS shelfRelativeAddress,
--         activatedfacings_3 . displayfixtureID  AS  displayfixtureID ,
--         activatedfacings_3 . displayfixtureIDForUser  AS  displayfixtureIDForUser ,
--         activatedfacings_3 . storeID  AS  storeID ,
--         activatedfacings_3 . initialValues  AS  initialValues ,
--         activatedfacings_3 . shelfID  AS  shelfID ,
--         activatedfacings_3 . IPAddress  AS  IPAddress ,
--         activatedfacings_3 . port  AS  port ,
--         activatedfacings_3 . SN  AS  SN ,
--         activatedfacings_3 . RS485Address  AS  RS485Address ,
--         activatedfacings_3 . productDepth  AS  productDepth ,
--         activatedfacings_3 . productTransparency AS productTransparency,
--         activatedfacings_3 . deviceTypeID  AS  deviceTypeID ,
--          devicetypes . numberOfSensors  AS  numberOfSensors ,
--          devicetypes . startingSensor  AS  startingSensor , 
--          devicetypes . thresholdadjustment  AS  thresholdadjustment ,
--          devicetypes . sensor1Distance  AS  sensor1Distance ,
--          devicetypes . frontGap AS frontGap,
--          devicetypes . sensorSpacing  AS  sensorSpacing ,
--          devicetypes . reverseOrder AS reverseOrder ,
--          devicetypes . dimension  AS  dimension        
--        from (  activatedfacings_3  
--        join   devicetypes  
--        on((  devicetypes . deviceTypeID  =  activatedfacings_3 . deviceTypeID )));
select  activatedfacings_3 . facingID  AS  facingID , 
        activatedfacings_3 . shelfRelativeAddress  AS  shelfRelativeAddress , 
        activatedfacings_3 . displayfixtureID  AS  displayfixtureID , 
        activatedfacings_3 . displayfixtureIDForUser  AS  displayfixtureIDForUser , 
        activatedfacings_3 . storeID  AS  storeID , 
        activatedfacings_3 . initialValues  AS  initialValues , 
        activatedfacings_3 . shelfID  AS  shelfID , 
        activatedfacings_3 . IPAddress  AS  IPAddress , 
        activatedfacings_3 . port  AS  port , 
        activatedfacings_3 . SN  AS  SN , 
        activatedfacings_3 . RS485Address  AS  RS485Address , 
        activatedfacings_3 . productDepth  AS  productDepth , 
        activatedfacings_3 . productTransparency  AS  productTransparency , 
        activatedfacings_3 . deviceTypeID  AS  deviceTypeID ,   
        devicetypes . numberOfSensors  AS  numberOfSensors ,   
        devicetypes . startingSensor  AS  startingSensor ,   
        devicetypes . thresholdadjustment  AS  thresholdadjustment ,   
        devicetypes . sensor1Distance  AS  sensor1Distance ,   
        devicetypes . frontGap  AS  frontGap ,   
        devicetypes . sensorSpacing  AS  sensorSpacing ,   
        devicetypes . reverseOrder  AS  reverseOrder ,   
        devicetypes . dimension  AS  dimension  
        from (   activatedfacings_3  join    devicetypes  
        on(( devicetypes . deviceTypeID  =  activatedfacings_3 . deviceTypeID )));

DROP TABLE IF EXISTS  unactivatedshelfs;
CREATE OR REPLACE VIEW unactivatedshelfs AS
select   shelfs . shelfID  AS  shelfID ,
         shelfs . displayfixtureID  AS  displayfixtureID ,
         shelfs . level  AS  level ,
         shelfs . IPAddress  AS  IPAddress ,
         shelfs . port  AS  port ,
         shelfs . MAC  AS  MAC ,
         shelfs . shelfIDForUser  AS 
        shelfIDForUser ,  shelfs . mfdate  AS 
        mfdate ,  shelfs . SN  AS 
        SN  from   shelfs  where (  shelfs . IPAddress  = '');
        
DROP TABLE IF EXISTS  unactivateddisplayfixtures;
CREATE OR REPLACE VIEW unactivateddisplayfixtures AS
select   displayfixtures . displayfixtureID  AS  displayfixtureID ,
  displayfixtures . displayfixtureIDForUser  AS  displayfixtureIDForUser  
from (  displayfixtures  join   unactivatedshelfs  
on((  displayfixtures . displayfixtureID  =  unactivatedshelfs . displayfixtureID ))) 
group by   displayfixtures . displayfixtureID ,  displayfixtures . displayfixtureIDForUser  
order by   displayfixtures . displayfixtureIDForUser ;

DROP TABLE IF EXISTS  unactivateddisplayfixtures;
CREATE OR REPLACE VIEW unactivateddisplayfixtures AS
select   displayfixtures . displayfixtureID  AS  displayfixtureID ,
  displayfixtures . displayfixtureIDForUser  AS  displayfixtureIDForUser  
from (  displayfixtures ) 
group by   displayfixtures . displayfixtureID ,  displayfixtures . displayfixtureIDForUser  
order by   displayfixtures . displayfixtureIDForUser ;

DROP TABLE IF EXISTS  activatedFacingsHW;
CREATE OR REPLACE VIEW activatedFacingsHW AS
SELECT  facingid , shelfid , ipaddress , rs485address 
FROM  activatedfacings ;

DROP TABLE IF EXISTS  lastdevicebatchnumber;
CREATE OR REPLACE VIEW lastdevicebatchnumber AS
select max(  hardwareids . batchID ) AS  lastbatchnumber  from   hardwareids ;

DROP TABLE IF EXISTS  mdevicetypes;

CREATE OR REPLACE VIEW mdevicetypes AS
select   devicetypes . deviceTypeID  AS  deviceTypeID ,
         devicetypes . dimension  AS  dimension ,
         devicetypes . LED  AS  LED ,
         devicetypes . numberOfSensors  AS  numberOfSensors  
       from   devicetypes  where (  devicetypes . deviceTypeID  >= 3000);

DROP TABLE IF EXISTS  tdevicetypes;
CREATE OR REPLACE VIEW tdevicetypes AS
select   devicetypes . deviceTypeID  AS  deviceTypeID ,
         devicetypes . dimension  AS  dimension ,
         devicetypes . LED  AS  LED ,
         devicetypes . numberOfSensors  AS  numberOfSensors  
       from   devicetypes  where (  devicetypes . deviceTypeID  < 3000);  


DROP TABLE IF EXISTS  sensorstates_1;
CREATE OR REPLACE VIEW sensorstates_1 AS
-- select   sensorchanges . sensorchangeID  AS  sensorchangeID ,
--          sensorchanges . facingID  AS  facingID ,
--          sensorchanges . state  AS  state  
--        from   sensorchanges  
--        where   sensorchanges . timeStamp  
--        in (select max(  sensorchanges . timeStamp ) 
--             from   sensorchanges  
--             group by   sensorchanges . facingID 
--            );
select sensorchangeID AS sensorchangeID,
       facingID AS facingID,
       state AS state
       from sensorchanges 
       where timeStamp in (select max(timeStamp) from sensorchanges group by facingID);


DROP TABLE IF EXISTS  sensorstates1; 
CREATE OR REPLACE VIEW sensorstates1 AS
select sensorstates_1.sensorchangeID AS sensorchangeID, sensorstates_1.facingID AS facingID, sensorstates_1.state AS  state  from  sensorstates_1;



DROP TABLE IF EXISTS schangeview;
CREATE OR REPLACE VIEW schangeview AS
select sensorchangeID AS sensorchangeID,
       sensorchanges.facingID AS facingID,
       sensorchanges.state AS state
       from sensorchanges 
       where sensorchanges.timeStamp in (select max(sensorchanges.timeStamp) from sensorchanges group by sensorchanges.facingID);

     


DROP TABLE IF EXISTS  sensorstates; 
 CREATE OR REPLACE VIEW sensorstates AS   
 select  sensorstates_1 . sensorchangeID  AS  sensorchangeID ,
         sensorstates_1 . facingID  AS  facingID ,
         sensorstates_1 . state  AS  state ,
         activatedfacings . storeID  AS  storeID,
         activatedfacings . shelfRelativeAddress AS facingPosition,
         activatedfacings .  IPAddress AS IPAddress

        from (  sensorstates_1  
                join   activatedfacings  
                on(( sensorstates_1 . facingID  =  activatedfacings . facingID ))
              ); 
              
DROP TABLE IF EXISTS  tlastdevicetypeid; 
CREATE OR REPLACE VIEW tlastdevicetypeid AS
select max( tdevicetypes . deviceTypeID ) AS  lastdevicetypeid  from   tdevicetypes ;   

DROP TABLE IF EXISTS  mlastdevicetypeid; 
CREATE OR REPLACE VIEW mlastdevicetypeid AS
select max( mdevicetypes . deviceTypeID ) AS  lastdevicetypeid  from   mdevicetypes ;   



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- =========================================================


INSERT INTO `approutes` (`appID`, `appdesc`, `appname`, `approute`) VALUES
(1, 'Living POG Web App', 'LPOGWEBAPP', '/'),
(2, 'Living POG Report App', 'LPOGREPORTAPP', '/lpogreportapp'),
(3, 'Stockman Mobile App', 'STOCKERMOBILEAPP', '/stockermobileapp');



INSERT INTO `batches` (`batchID`, `factoryID`, `deviceTypeID`, `mfDateMonth`, `mfDateDay`, `mfDateYear`) VALUES
(2, 1, 3000, 7, 15, 2021),
(4, 1, 210, 10, 10, 2021);



INSERT INTO `clients` (`clientID`, `clientName`) VALUES
(1, 'Wallgreens'),
(2, 'Target');




INSERT INTO `devicetypes` (`deviceTypeName`, `deviceTypeID`, `LED`, `port`, `manufacturer`, `numberOfSensors`, `dimension`, `thresholdadjustment`, `startingSensor`, `sensor1Distance`, `sensor2Distance`, `sensorSpacing`, `frontGap`, `reverseOrder`, `numberOfRFIDScanners`, `startingRFIDScannerAddress`, `RFIDScannerWidth`, `RFIDSpaceBetweenScanners`, `RFIDScannerFirstPosition`, `numberOfPNPSockets`, `startingPNPSocketAddress`, `PNPSocketWidth`, `PNPSocketSpaceBetweenSockets`, `PNPSocketFirstPosition`) VALUES
('', 210, 1, '23333', NULL, 23, 20, 900, 3, 0.49, 1.3, 0.81, 0.67, 0, 0, 0, 0, 0.2, 0, 24, 1, 2, 0, 0),
('', 3000, 1, '23333', NULL, 0, 12, 0, 0, 0, 0, 0, 0, 0, 24, 188, 1.98, 0.2, 0, 24, 1, 2, 0, 0);



INSERT INTO `displayfixtures` (`displayfixtureID`, `storeID`, `level`, `depth`, `width`, `height`, `displayfixtureIDForUser`, `type`, `location`) VALUES
(22, 4, 1, 72, 48, 96, 'C100-S223', 'Cooler', 'Top Floor'),
(28, 4, 2, 75, 75, 75, 'C100-S3', 'Gondola', 'Floor 1'),
(35, 4, 1, 48, 120, 72, 'C200', 'Gondola', 'level 2'),
(36, 6, 0, 0, 0, 0, 'C30011', 'Gondola', 'level 3 NW'),
(37, 6, 0, 0, 0, 0, '000-0', 'Cooler', 'level 2 NW'),
(38, 5, 0, 0, 0, 0, 'C30099', 'Gondola', 'cccc'),
(39, 1, 0, 0, 0, 0, 'C3001', 'Gondola', 'cccc'),
(40, 7, 0, 0, 0, 0, 'G-00111', 'Gondola', 'level1'),
(41, 5, 1, 20, 300, 72, 'C300099-1', 'Gondola', 'Q2B4'),
(42, 4, 0, 0, 0, 0, 'cz00', 'Gondola', 'Top Floor'),
(43, 10, 0, 0, 0, 0, 'G-12', 'Gondola', 'West '),
(44, 10, 0, 0, 0, 0, 'G-13', 'Gondola', 'Floor 2'),
(45, 7, 0, 0, 0, 0, 'RFID-TEST', 'Gondola', 'level 2 NW'),
(46, 7, 0, 0, 0, 0, 'R2D2-Test', 'Gondola', 'Floor 1'),
(47, 15, 0, 0, 0, 0, 'DF001', 'Gondola', 'level 23'),
(48, 16, 1, 0, 0, 0, 'OMTC', 'Gondola', 'level 2 NW');



INSERT INTO `facingmerchandiselinks` (`facingmerchandiselinksID`, `facingID`, `productID`, `fromDate`) VALUES
(395, 158, 1, '2020-01-23 12:00:48'),
(396, 159, 1, '2020-01-23 12:00:48'),
(397, 160, 1, '2020-01-23 12:00:48'),
(398, 161, 1, '2020-01-23 12:00:48'),
(399, 162, 1, '2020-01-23 12:00:48'),
(400, 163, 1, '2020-01-23 12:00:48'),
(401, 164, 1, '2020-01-23 12:00:48'),
(402, 293, 1, '2020-01-23 12:00:48'),
(403, 294, 1, '2020-01-23 12:00:48'),
(404, 295, 1, '2020-01-23 12:00:48'),
(405, 165, 0, '2020-01-23 12:00:36'),
(406, 166, 0, '2020-01-23 12:00:36'),
(407, 167, 0, '2020-01-23 12:00:36'),
(408, 168, 0, '2020-01-23 12:00:36'),
(409, 169, 0, '2020-01-23 12:00:36'),
(410, 233, 0, '2020-01-23 12:00:36'),
(411, 234, 0, '2020-01-23 12:00:36'),
(412, 235, 0, '2020-01-23 12:00:36'),
(413, 236, 0, '2020-01-23 12:00:36'),
(414, 165, 2, '2020-01-23 12:00:58'),
(415, 166, 2, '2020-01-23 12:00:58'),
(416, 167, 2, '2020-01-23 12:00:58'),
(417, 168, 2, '2020-01-23 12:00:58'),
(418, 169, 2, '2020-01-23 12:00:58'),
(419, 233, 2, '2020-01-23 12:00:58'),
(420, 234, 2, '2020-01-23 12:00:58'),
(421, 235, 2, '2020-01-23 12:00:58'),
(422, 236, 2, '2020-01-23 12:00:58'),
(423, 237, 2, '2020-01-23 12:00:58'),
(424, 170, 4, '2020-01-23 12:00:02'),
(425, 171, 4, '2020-01-23 12:00:02'),
(426, 172, 4, '2020-01-23 12:00:02'),
(427, 173, 4, '2020-01-23 12:00:02'),
(428, 209, 4, '2020-01-23 12:00:02'),
(429, 210, 4, '2020-01-23 12:00:02'),
(430, 211, 4, '2020-01-23 12:00:02'),
(431, 212, 4, '2020-01-23 12:00:02'),
(432, 1, 5, '2020-01-23 12:00:12'),
(433, 2, 5, '2020-01-23 12:00:12'),
(434, 3, 5, '2020-01-23 12:00:12'),
(435, 4, 5, '2020-01-23 12:00:12'),
(436, 1, 3, '2020-02-23 13:57:42'),
(437, 2, 3, '2020-02-23 13:57:42'),
(438, 3, 3, '2020-02-23 13:57:42'),
(439, 4, 3, '2020-02-23 13:57:42'),
(440, 1, 2, '2020-02-24 14:21:50'),
(441, 2, 2, '2020-02-24 14:21:50'),
(442, 3, 2, '2020-02-24 14:21:50'),
(443, 4, 2, '2020-02-24 14:21:50'),
(445, 2, 6, '2020-02-25 01:00:27'),
(446, 3, 6, '2020-02-25 01:00:27'),
(447, 4, 6, '2020-02-25 01:00:27'),
(448, 1, 3, '2020-02-23 12:15:22'),
(449, 2, 3, '2020-02-23 12:15:22'),
(450, 3, 3, '2020-02-23 12:15:22'),
(451, 4, 3, '2020-02-23 12:15:22'),
(452, 3, 7, '2020-02-23 13:25:02'),
(453, 4, 7, '2020-02-23 13:25:02'),
(454, 3, 8, '2020-02-23 14:18:34'),
(455, 4, 8, '2020-02-23 14:18:34'),
(456, 3, 4, '2020-02-24 11:33:44'),
(457, 4, 4, '2020-02-24 11:33:44'),
(458, 1, 8, '2020-02-24 13:35:25'),
(459, 2, 8, '2020-02-24 13:35:25'),
(460, 3, 8, '2020-02-24 13:35:25'),
(461, 4, 8, '2020-02-24 13:35:25'),
(462, 293, 0, '2020-04-14 00:37:47'),
(463, 293, 0, '2020-04-29 00:43:35'),
(464, 293, 0, '2020-04-29 00:53:54'),
(465, 293, 0, '2020-04-28 04:54:25'),
(466, 196, 3, '2020-06-29 02:43:29'),
(467, 197, 3, '2020-06-29 02:43:29'),
(468, 198, 3, '2020-06-29 02:43:29'),
(469, 199, 3, '2020-06-29 02:43:29'),
(470, 200, 3, '2020-06-29 02:43:29'),
(471, 347, 1, '2020-06-30 10:13:03'),
(472, 348, 2, '2020-06-30 10:14:08'),
(473, 138, 11, '2020-06-30 10:53:32'),
(474, 139, 11, '2020-06-30 10:53:32'),
(475, 140, 11, '2020-06-30 10:53:32'),
(476, 141, 11, '2020-06-30 10:53:32'),
(477, 142, 11, '2020-06-30 10:53:32'),
(478, 143, 11, '2020-06-30 10:53:32'),
(479, 144, 11, '2020-06-30 10:53:32'),
(480, 145, 11, '2020-06-30 10:53:32'),
(481, 146, 11, '2020-06-30 10:53:32'),
(482, 147, 11, '2020-06-30 10:53:32'),
(483, 148, 11, '2020-06-30 10:53:32'),
(484, 149, 11, '2020-06-30 10:53:32'),
(485, 150, 11, '2020-06-30 10:53:32'),
(486, 151, 11, '2020-06-30 10:53:32'),
(487, 152, 11, '2020-06-30 10:53:32'),
(488, 153, 11, '2020-06-30 10:53:32'),
(489, 154, 11, '2020-06-30 10:53:32'),
(490, 155, 11, '2020-06-30 10:53:32'),
(491, 156, 11, '2020-06-30 10:53:32'),
(492, 157, 11, '2020-06-30 10:53:32'),
(493, 213, 11, '2020-06-30 10:53:32'),
(494, 214, 11, '2020-06-30 10:53:32'),
(495, 215, 11, '2020-06-30 10:53:32'),
(496, 216, 11, '2020-06-30 10:53:32'),
(497, 217, 11, '2020-06-30 10:53:32'),
(498, 218, 11, '2020-06-30 10:53:32'),
(499, 219, 11, '2020-06-30 10:53:32'),
(500, 220, 11, '2020-06-30 10:53:32'),
(501, 221, 11, '2020-06-30 10:53:32'),
(502, 222, 11, '2020-06-30 10:53:32'),
(503, 349, 3, '2020-07-05 01:42:54'),
(504, 350, 19, '2020-07-05 13:42:57'),
(505, 350, 8, '2020-07-05 13:44:25'),
(506, 351, 8, '2020-07-05 13:44:25'),
(507, 352, 8, '2020-07-05 13:44:25'),
(508, 353, 8, '2020-07-05 13:44:25'),
(509, 354, 8, '2020-07-05 13:44:25'),
(510, 355, 8, '2020-07-05 13:44:25'),
(511, 356, 8, '2020-07-05 13:44:25'),
(512, 357, 8, '2020-07-05 13:44:25'),
(513, 358, 8, '2020-07-05 13:44:25'),
(514, 44, 4, '2020-07-05 13:44:14'),
(515, 45, 4, '2020-07-05 13:44:14'),
(516, 324, 18, '2020-07-05 13:45:17'),
(517, 325, 18, '2020-07-05 13:45:17'),
(518, 326, 18, '2020-07-05 13:45:17'),
(519, 327, 18, '2020-07-05 13:45:17'),
(520, 328, 18, '2020-07-05 13:45:17'),
(521, 329, 18, '2020-07-05 13:45:17'),
(522, 330, 18, '2020-07-05 13:45:17'),
(523, 331, 18, '2020-07-05 13:45:17'),
(524, 332, 18, '2020-07-05 13:45:17'),
(525, 333, 18, '2020-07-05 13:45:17'),
(526, 334, 18, '2020-07-05 13:45:17'),
(527, 335, 18, '2020-07-05 13:45:17'),
(528, 336, 18, '2020-07-05 13:45:17'),
(529, 149, 4, '2020-07-05 13:46:40'),
(530, 150, 4, '2020-07-05 13:46:40'),
(531, 151, 4, '2020-07-05 13:46:40'),
(532, 152, 4, '2020-07-05 13:46:40'),
(533, 153, 4, '2020-07-05 13:46:40'),
(534, 154, 4, '2020-07-05 13:46:40'),
(535, 155, 4, '2020-07-05 13:46:40'),
(536, 156, 4, '2020-07-05 13:46:40'),
(537, 157, 4, '2020-07-05 13:46:40'),
(538, 213, 4, '2020-07-05 13:46:40'),
(539, 138, 10, '2020-07-05 13:47:11'),
(540, 139, 10, '2020-07-05 13:48:03'),
(541, 140, 10, '2020-07-05 13:48:03'),
(542, 141, 10, '2020-07-05 13:48:03'),
(543, 142, 10, '2020-07-05 13:48:03'),
(544, 143, 10, '2020-07-05 13:48:03'),
(545, 144, 10, '2020-07-05 13:48:03'),
(546, 145, 10, '2020-07-05 13:48:03'),
(547, 146, 10, '2020-07-05 13:48:03'),
(548, 147, 10, '2020-07-05 13:48:03'),
(549, 148, 10, '2020-07-05 13:48:03'),
(550, 347, 2, '2020-07-05 13:50:35'),
(551, 348, 2, '2020-07-05 13:50:35'),
(552, 349, 2, '2020-07-05 13:50:35'),
(553, 347, 4, '2020-07-06 14:35:57'),
(554, 223, 16, '2020-07-06 14:37:19'),
(555, 224, 16, '2020-07-06 14:37:19'),
(556, 225, 16, '2020-07-06 14:37:19'),
(557, 226, 16, '2020-07-06 14:37:19'),
(558, 227, 16, '2020-07-06 14:37:19'),
(559, 228, 16, '2020-07-06 14:37:19'),
(560, 229, 16, '2020-07-06 14:37:19'),
(561, 230, 16, '2020-07-06 14:37:19'),
(562, 231, 16, '2020-07-06 14:37:19'),
(563, 232, 16, '2020-07-06 14:37:19'),
(564, 359, 2, '2020-07-06 15:09:32'),
(565, 360, 3, '2020-07-07 15:13:08'),
(566, 361, 3, '2020-07-07 15:13:08'),
(567, 362, 3, '2020-07-07 15:13:08'),
(568, 363, 3, '2020-07-07 15:13:08'),
(569, 364, 3, '2020-07-07 15:13:08'),
(570, 347, 12, '2020-07-07 16:11:28'),
(571, 268, 4, '2020-07-08 02:01:18'),
(572, 269, 4, '2020-07-08 02:01:18'),
(573, 270, 4, '2020-07-08 02:01:18'),
(574, 271, 4, '2020-07-08 02:01:18'),
(575, 272, 4, '2020-07-08 02:01:18'),
(576, 273, 4, '2020-07-08 02:01:18'),
(577, 366, 3, '2020-07-08 02:06:55'),
(578, 337, 19, '2020-07-08 12:53:00'),
(579, 338, 19, '2020-07-08 12:53:00'),
(580, 339, 19, '2020-07-08 12:53:00'),
(581, 340, 19, '2020-07-08 12:53:00'),
(582, 341, 19, '2020-07-08 12:53:00'),
(583, 342, 19, '2020-07-08 12:53:00'),
(584, 343, 19, '2020-07-08 12:53:00'),
(585, 344, 19, '2020-07-08 12:53:00'),
(586, 345, 19, '2020-07-08 12:53:00'),
(587, 346, 19, '2020-07-08 12:53:00'),
(588, 371, 1, '2020-07-08 14:33:46'),
(589, 372, 1, '2020-07-08 14:33:46'),
(590, 373, 1, '2020-07-08 14:33:46'),
(591, 374, 1, '2020-07-08 14:33:46'),
(592, 375, 1, '2020-07-08 14:33:46'),
(593, 376, 1, '2020-07-08 14:33:46'),
(594, 377, 1, '2020-07-08 14:33:46'),
(595, 378, 1, '2020-07-08 14:33:46'),
(596, 379, 1, '2020-07-08 14:33:46'),
(597, 380, 1, '2020-07-08 14:33:46'),
(598, 381, 1, '2020-07-08 14:33:46'),
(599, 382, 1, '2020-07-08 14:33:46'),
(600, 383, 1, '2020-07-08 14:33:46'),
(601, 384, 1, '2020-07-08 14:33:46'),
(602, 385, 1, '2020-07-08 14:33:46'),
(603, 201, 3, '2020-07-08 14:35:39'),
(604, 202, 3, '2020-07-08 14:35:39'),
(605, 203, 3, '2020-07-08 14:35:39'),
(606, 204, 3, '2020-07-08 14:35:39'),
(607, 205, 3, '2020-07-08 14:35:39'),
(608, 206, 3, '2020-07-08 14:35:39'),
(609, 207, 3, '2020-07-08 14:35:39'),
(610, 201, 4, '2020-07-08 14:35:06'),
(611, 202, 4, '2020-07-08 14:35:06'),
(612, 203, 4, '2020-07-08 14:35:06'),
(613, 204, 4, '2020-07-08 14:35:06'),
(614, 205, 4, '2020-07-08 14:35:06'),
(615, 206, 4, '2020-07-08 14:35:06'),
(616, 207, 4, '2020-07-08 14:35:06'),
(617, 201, 10, '2020-07-08 14:38:12'),
(618, 202, 10, '2020-07-08 14:38:12'),
(619, 203, 10, '2020-07-08 14:38:12'),
(620, 204, 10, '2020-07-08 14:38:12'),
(621, 205, 10, '2020-07-08 14:38:12'),
(622, 206, 10, '2020-07-08 14:38:12'),
(623, 207, 10, '2020-07-08 14:38:12'),
(624, 44, 5, '2020-07-08 14:41:05'),
(625, 44, 2, '2020-07-08 14:44:22'),
(626, 45, 2, '2020-07-08 14:44:22'),
(627, 44, 6, '2020-07-08 14:52:58'),
(628, 44, 0, '2020-07-08 15:16:51'),
(629, 44, 0, '2020-07-08 16:31:19'),
(630, 44, 0, '2020-07-08 16:52:39'),
(631, 44, 0, '2020-07-08 16:55:22'),
(632, 388, 17, '2020-07-08 22:09:06'),
(633, 389, 17, '2020-07-08 22:09:06'),
(634, 390, 17, '2020-07-08 22:09:06'),
(635, 391, 17, '2020-07-08 22:09:06'),
(636, 392, 17, '2020-07-08 22:09:06'),
(637, 393, 4, '2020-07-08 22:10:40'),
(638, 394, 4, '2020-07-08 22:10:40'),
(639, 395, 4, '2020-07-08 22:10:40'),
(640, 396, 4, '2020-07-08 22:10:40'),
(641, 397, 4, '2020-07-08 22:10:40'),
(642, 398, 20, '2020-07-08 22:11:42'),
(643, 398, 20, '2020-07-08 22:11:06'),
(644, 399, 20, '2020-07-08 22:11:06'),
(645, 400, 20, '2020-07-08 22:11:06'),
(646, 401, 20, '2020-07-08 22:11:06'),
(647, 402, 20, '2020-07-08 22:11:06'),
(648, 403, 20, '2020-07-08 22:11:06'),
(649, 404, 20, '2020-07-08 22:11:06'),
(650, 405, 20, '2020-07-08 22:11:06'),
(651, 406, 20, '2020-07-08 22:11:06'),
(652, 407, 20, '2020-07-08 22:11:06'),
(653, 408, 20, '2020-07-08 22:11:06'),
(654, 409, 20, '2020-07-08 22:11:06'),
(655, 410, 20, '2020-07-08 22:11:06'),
(656, 411, 20, '2020-07-08 22:11:06'),
(657, 412, 20, '2020-07-08 22:11:06'),
(658, 413, 20, '2020-07-08 22:11:06'),
(659, 414, 20, '2020-07-08 22:11:06'),
(660, 415, 20, '2020-07-08 22:11:06'),
(661, 416, 20, '2020-07-08 22:11:06'),
(662, 417, 20, '2020-07-08 22:11:06'),
(663, 388, 2, '2020-07-08 22:22:29'),
(664, 418, 18, '2020-07-08 22:24:37'),
(665, 202, 5, '2020-07-08 22:45:10'),
(666, 203, 5, '2020-07-08 22:45:10'),
(667, 204, 5, '2020-07-08 22:45:10'),
(668, 205, 5, '2020-07-08 22:45:10'),
(669, 206, 5, '2020-07-08 22:45:10'),
(670, 207, 5, '2020-07-08 22:45:10'),
(671, 202, 5, '2020-07-08 22:45:20'),
(672, 203, 5, '2020-07-08 22:45:20'),
(673, 204, 5, '2020-07-08 22:45:20'),
(674, 205, 5, '2020-07-08 22:45:20'),
(675, 206, 5, '2020-07-08 22:45:20'),
(676, 207, 5, '2020-07-08 22:45:20'),
(677, 201, 3, '2020-07-09 17:43:33'),
(678, 45, 12, '2020-07-09 20:36:11'),
(679, 44, 1, '2020-07-21 15:02:13'),
(680, 389, 3, '2020-07-22 00:37:21'),
(681, 419, 1, '2020-07-22 13:39:03'),
(682, 419, 3, '2020-07-22 13:40:24'),
(683, 420, 11, '2020-07-24 01:57:27'),
(684, 421, 11, '2020-07-24 01:57:27'),
(685, 422, 11, '2020-07-24 01:57:27'),
(686, 423, 11, '2020-07-24 01:57:27'),
(687, 424, 11, '2020-07-24 01:57:27'),
(688, 425, 11, '2020-07-24 01:57:27'),
(689, 426, 11, '2020-07-24 01:57:27'),
(690, 427, 11, '2020-07-24 01:57:27'),
(691, 428, 11, '2020-07-24 01:57:27'),
(692, 419, 0, '2020-09-24 15:24:00'),
(693, 419, 0, '2020-09-25 02:37:52'),
(694, 419, 0, '2020-09-25 02:59:39'),
(695, 419, 0, '2020-09-25 03:21:07'),
(696, 428, 1, '2020-09-25 03:22:40'),
(697, 419, 7, '2020-09-25 04:15:43'),
(698, 419, 0, '2020-09-25 11:33:42'),
(699, 428, 9, '2020-09-25 16:09:52'),
(700, 45, 9, '2020-09-26 00:59:07'),
(701, 428, 12, '2020-09-26 01:01:37'),
(702, 427, 8, '2020-09-26 01:03:09'),
(703, 427, 12, '2020-09-26 01:04:41'),
(704, 419, 150, '2020-09-26 03:02:40'),
(705, 419, 44, '2020-09-26 03:55:34'),
(706, 419, 23, '2020-09-26 03:56:15'),
(707, 419, 11, '2020-09-26 03:56:29'),
(708, 427, 24, '2020-09-26 03:57:06'),
(709, 419, 51, '2020-09-26 03:58:25'),
(710, 427, 51, '2020-09-26 04:00:38'),
(711, 428, 49, '2020-09-26 04:02:41'),
(712, 428, 32, '2020-09-26 04:03:38'),
(713, 428, 51, '2020-09-26 04:06:58'),
(714, 419, 1, '2020-09-26 04:09:57'),
(715, 419, 50, '2020-09-26 04:16:18'),
(716, 419, 57, '2020-09-26 04:17:57'),
(717, 419, 0, '2020-09-26 04:26:41'),
(718, 429, 11, '2020-09-26 04:27:39'),
(719, 430, 11, '2020-09-26 04:27:39'),
(720, 431, 11, '2020-09-26 04:27:39'),
(721, 432, 11, '2020-09-26 04:27:39'),
(722, 433, 11, '2020-09-26 04:27:39'),
(723, 434, 11, '2020-09-26 04:27:39'),
(724, 435, 11, '2020-09-26 04:27:39'),
(725, 436, 11, '2020-09-26 04:27:39'),
(726, 437, 11, '2020-09-26 04:27:39'),
(727, 438, 11, '2020-09-26 04:27:39'),
(728, 429, 60, '2020-09-26 04:29:29'),
(729, 430, 60, '2020-09-26 04:29:29'),
(730, 431, 60, '2020-09-26 04:29:29'),
(731, 432, 60, '2020-09-26 04:29:29'),
(732, 433, 60, '2020-09-26 04:29:29'),
(733, 434, 60, '2020-09-26 04:29:29'),
(734, 435, 60, '2020-09-26 04:29:29'),
(735, 436, 60, '2020-09-26 04:29:29'),
(736, 437, 60, '2020-09-26 04:29:29'),
(737, 438, 60, '2020-09-26 04:29:29'),
(738, 429, 43, '2020-09-26 04:29:16'),
(739, 430, 43, '2020-09-26 04:29:16'),
(740, 431, 43, '2020-09-26 04:29:16'),
(741, 432, 43, '2020-09-26 04:29:16'),
(742, 433, 43, '2020-09-26 04:29:16'),
(743, 434, 43, '2020-09-26 04:29:16'),
(744, 435, 43, '2020-09-26 04:29:16'),
(745, 436, 43, '2020-09-26 04:29:16'),
(746, 437, 43, '2020-09-26 04:29:16'),
(747, 438, 43, '2020-09-26 04:29:16'),
(748, 44, 0, '2020-09-26 04:31:38'),
(749, 419, 26, '2020-09-27 03:03:38'),
(750, 419, 51, '2020-09-27 03:04:16'),
(751, 419, 70, '2020-09-27 14:40:18'),
(752, 419, 50, '2020-09-27 14:42:07'),
(753, 419, 18, '2020-09-27 14:44:07'),
(754, 419, 51, '2020-09-27 14:45:04'),
(755, 419, 1, '2020-09-27 15:17:34'),
(756, 419, 18, '2020-09-27 15:49:15'),
(757, 423, 2, '2020-09-27 15:51:49'),
(758, 421, 2, '2020-09-27 17:12:19'),
(759, 419, 1, '2020-09-27 18:26:30'),
(760, 419, 140, '2020-09-27 18:27:23'),
(761, 419, 57, '2020-09-27 19:05:40'),
(762, 419, 78, '2020-09-27 19:13:18'),
(763, 419, 31, '2020-09-27 19:16:56'),
(764, 419, 0, '2020-09-27 19:23:37'),
(765, 419, 147, '2020-09-27 19:31:01'),
(766, 419, 139, '2020-09-27 19:37:50'),
(767, 419, 0, '2020-09-27 21:56:15'),
(768, 419, 1, '2020-09-28 03:18:52'),
(769, 419, 5, '2020-09-28 03:19:18'),
(770, 419, 10, '2020-09-28 03:36:14'),
(771, 419, 0, '2020-09-28 03:37:32'),
(772, 419, 37, '2020-09-28 04:02:42'),
(773, 419, 53, '2020-09-28 04:03:43'),
(774, 420, 53, '2020-09-28 04:03:43'),
(775, 421, 53, '2020-09-28 04:03:43'),
(776, 422, 53, '2020-09-28 04:03:43'),
(777, 423, 53, '2020-09-28 04:03:43'),
(778, 419, 0, '2020-09-28 04:05:34'),
(779, 419, 0, '2020-09-28 04:05:07'),
(780, 419, 0, '2020-09-28 04:27:05'),
(781, 419, 0, '2020-09-28 04:42:11'),
(782, 419, 7, '2020-09-28 04:46:45'),
(783, 419, 0, '2020-09-28 05:03:57'),
(784, 419, 0, '2020-09-28 05:04:53'),
(785, 419, 11, '2020-09-28 05:09:46'),
(786, 419, 17, '2020-09-28 05:17:07'),
(787, 419, 0, '2020-09-28 14:40:52'),
(788, 419, 0, '2020-09-28 14:47:47'),
(789, 419, 21, '2020-09-28 18:13:13'),
(790, 419, 4, '2020-09-28 18:22:39'),
(791, 420, 4, '2020-09-28 18:22:39'),
(792, 419, 28, '2020-09-28 18:39:52'),
(793, 419, 0, '2020-09-28 20:04:00'),
(794, 419, 0, '2020-09-28 20:05:27'),
(795, 419, 0, '2020-09-28 20:05:46'),
(796, 419, 0, '2020-09-28 20:09:06'),
(797, 419, 5, '2020-09-28 20:10:05'),
(798, 419, 0, '2020-09-28 20:13:00'),
(799, 419, 0, '2020-09-28 20:14:40'),
(800, 419, 0, '2020-09-28 20:24:32'),
(801, 419, 0, '2020-09-28 20:28:37'),
(802, 429, 11, '2020-09-28 20:29:25'),
(803, 429, 11, '2020-09-28 20:30:53'),
(804, 430, 11, '2020-09-28 20:30:53'),
(805, 431, 11, '2020-09-28 20:30:53'),
(806, 432, 11, '2020-09-28 20:30:53'),
(807, 433, 11, '2020-09-28 20:30:53'),
(808, 434, 11, '2020-09-28 20:30:53'),
(809, 435, 11, '2020-09-28 20:30:53'),
(810, 436, 11, '2020-09-28 20:30:53'),
(811, 437, 11, '2020-09-28 20:30:53'),
(812, 438, 11, '2020-09-28 20:30:53'),
(813, 419, 0, '2020-09-28 21:33:19'),
(814, 419, 9, '2020-09-28 21:48:38'),
(815, 419, 0, '2020-09-28 21:48:53'),
(816, 419, 51, '2020-09-28 21:49:43'),
(817, 420, 51, '2020-09-28 21:49:43'),
(818, 421, 51, '2020-09-28 21:49:43'),
(819, 422, 51, '2020-09-28 21:49:43'),
(820, 423, 51, '2020-09-28 21:49:43'),
(821, 196, 54, '2020-09-28 21:49:22'),
(822, 197, 54, '2020-09-28 21:49:22'),
(823, 198, 54, '2020-09-28 21:49:22'),
(824, 199, 54, '2020-09-28 21:49:22'),
(825, 200, 54, '2020-09-28 21:49:22'),
(826, 201, 54, '2020-09-28 21:49:22'),
(827, 202, 54, '2020-09-28 21:49:22'),
(828, 203, 54, '2020-09-28 21:49:22'),
(829, 204, 54, '2020-09-28 21:49:22'),
(830, 205, 54, '2020-09-28 21:49:22'),
(831, 206, 54, '2020-09-28 21:49:22'),
(832, 207, 54, '2020-09-28 21:49:22'),
(833, 388, 26, '2020-09-28 21:51:30'),
(834, 389, 26, '2020-09-28 21:51:30'),
(835, 390, 26, '2020-09-28 21:51:30'),
(836, 391, 26, '2020-09-28 21:51:30'),
(837, 392, 26, '2020-09-28 21:51:30'),
(838, 393, 26, '2020-09-28 21:51:30'),
(839, 394, 26, '2020-09-28 21:51:30'),
(840, 395, 26, '2020-09-28 21:51:30'),
(841, 396, 26, '2020-09-28 21:51:30'),
(842, 397, 26, '2020-09-28 21:51:30'),
(843, 418, 26, '2020-09-28 21:51:30'),
(844, 419, 77, '2020-09-28 22:18:47'),
(845, 419, 0, '2020-09-28 22:38:14'),
(846, 419, 54, '2020-09-28 23:06:16'),
(847, 419, 51, '2020-09-28 23:12:19'),
(848, 420, 51, '2020-09-28 23:12:19'),
(849, 421, 51, '2020-09-28 23:12:19'),
(850, 422, 51, '2020-09-28 23:12:19'),
(851, 423, 51, '2020-09-28 23:12:19'),
(852, 424, 51, '2020-09-28 23:12:19'),
(853, 425, 51, '2020-09-28 23:12:19'),
(854, 426, 51, '2020-09-28 23:12:19'),
(855, 427, 51, '2020-09-28 23:12:19'),
(856, 428, 51, '2020-09-28 23:12:19'),
(857, 196, 26, '2020-09-28 23:15:25'),
(858, 419, 26, '2020-09-28 23:18:15'),
(859, 419, 11, '2020-09-28 23:19:55'),
(860, 419, 143, '2020-09-28 23:20:13'),
(861, 398, 0, '2020-09-28 23:39:43'),
(862, 439, 51, '2020-09-28 23:53:43'),
(863, 439, 51, '2020-09-28 23:54:54'),
(864, 440, 51, '2020-09-28 23:54:54'),
(865, 441, 51, '2020-09-28 23:54:54'),
(866, 442, 51, '2020-09-28 23:54:54'),
(867, 443, 51, '2020-09-28 23:54:54'),
(868, 444, 51, '2020-09-28 23:54:54'),
(869, 445, 51, '2020-09-28 23:54:54'),
(870, 446, 51, '2020-09-28 23:54:54'),
(871, 447, 51, '2020-09-28 23:54:54'),
(872, 448, 51, '2020-09-28 23:54:54'),
(873, 439, 0, '2020-09-29 14:46:29'),
(874, 439, 0, '2020-09-29 15:26:52'),
(875, 439, 0, '2020-09-29 15:27:01'),
(876, 439, 51, '2020-09-30 02:00:41'),
(877, 439, 0, '2020-09-30 02:48:20'),
(878, 439, 0, '2020-09-30 02:56:02'),
(879, 439, 0, '2020-09-30 02:57:52'),
(880, 439, 10, '2020-09-30 03:24:39'),
(881, 439, 34, '2020-09-30 03:25:42'),
(882, 459, 63, '2020-11-02 16:02:16'),
(883, 459, 5, '2020-11-02 16:03:56'),
(884, 459, 1, '2020-11-02 16:05:15'),
(885, 439, 5, '2020-11-02 16:05:58'),
(886, 459, 4, '2020-11-02 16:06:57'),
(887, 459, 50, '2020-11-02 16:54:10'),
(888, 439, 51, '2020-11-02 16:55:04'),
(889, 459, 51, '2020-11-02 16:56:44'),
(890, 460, 31, '2020-11-02 18:43:09'),
(891, 460, 108, '2020-11-02 18:44:48'),
(892, 439, 0, '2020-11-02 19:16:37'),
(893, 460, 51, '2020-11-02 20:57:18'),
(894, 461, 51, '2020-11-02 20:57:18'),
(895, 439, 1, '2020-11-02 22:23:22'),
(896, 462, 51, '2020-11-02 22:34:06'),
(897, 463, 51, '2020-11-02 22:34:06'),
(898, 464, 51, '2020-11-02 22:34:06'),
(899, 465, 51, '2020-11-02 22:34:06'),
(900, 466, 51, '2020-11-02 22:34:06'),
(901, 467, 51, '2020-11-02 22:34:06'),
(902, 468, 51, '2020-11-02 22:34:06'),
(903, 469, 51, '2020-11-02 22:34:06'),
(904, 470, 51, '2020-11-02 22:34:06'),
(905, 471, 51, '2020-11-02 22:34:06'),
(906, 439, 0, '2020-11-02 22:43:50'),
(907, 439, 0, '2020-11-02 22:43:56'),
(908, 460, 0, '2020-11-05 02:51:08'),
(909, 460, 51, '2020-11-07 21:55:05'),
(910, 44, 0, '2020-11-07 21:56:31'),
(911, 45, 0, '2020-11-07 21:56:31'),
(912, 439, 71, '2020-11-07 21:57:07'),
(913, 440, 125, '2020-11-08 02:20:01'),
(914, 441, 125, '2020-11-08 02:20:01'),
(915, 442, 125, '2020-11-08 02:20:01'),
(916, 443, 125, '2020-11-08 02:20:01'),
(917, 444, 125, '2020-11-08 02:20:01'),
(918, 445, 125, '2020-11-08 02:20:01'),
(919, 446, 125, '2020-11-08 02:20:01'),
(920, 447, 125, '2020-11-08 02:20:01'),
(921, 448, 125, '2020-11-08 02:20:01'),
(922, 459, 125, '2020-11-08 02:20:01'),
(923, 472, 125, '2020-11-08 02:20:01'),
(924, 473, 125, '2020-11-08 02:20:01'),
(925, 474, 125, '2020-11-08 02:20:01'),
(926, 475, 125, '2020-11-08 02:20:01'),
(927, 476, 125, '2020-11-08 02:20:01'),
(928, 477, 125, '2020-11-08 02:20:01'),
(929, 478, 125, '2020-11-08 02:20:01'),
(930, 479, 125, '2020-11-08 02:20:01'),
(931, 480, 125, '2020-11-08 02:20:01'),
(932, 481, 125, '2020-11-08 02:20:01'),
(933, 482, 125, '2020-11-08 02:20:01'),
(934, 483, 125, '2020-11-08 02:20:01'),
(935, 484, 125, '2020-11-08 02:20:01'),
(936, 485, 125, '2020-11-08 02:20:01'),
(937, 486, 125, '2020-11-08 02:20:01'),
(938, 487, 125, '2020-11-08 02:20:01'),
(939, 488, 125, '2020-11-08 02:20:01'),
(940, 489, 125, '2020-11-08 02:20:01'),
(941, 490, 125, '2020-11-08 02:20:01'),
(942, 491, 125, '2020-11-08 02:20:01'),
(943, 492, 125, '2020-11-08 02:20:01'),
(944, 493, 125, '2020-11-08 02:20:01'),
(945, 494, 125, '2020-11-08 02:20:01'),
(946, 495, 125, '2020-11-08 02:20:01'),
(947, 496, 125, '2020-11-08 02:20:01'),
(948, 497, 125, '2020-11-08 02:20:01'),
(949, 498, 125, '2020-11-08 02:20:01'),
(950, 499, 125, '2020-11-08 02:20:01'),
(951, 500, 125, '2020-11-08 02:20:01'),
(952, 501, 125, '2020-11-08 02:20:01'),
(953, 398, 152, '2020-11-09 20:26:23'),
(954, 399, 152, '2020-11-09 20:26:23'),
(955, 400, 152, '2020-11-09 20:26:23'),
(956, 401, 152, '2020-11-09 20:26:23'),
(957, 402, 152, '2020-11-09 20:26:23'),
(958, 403, 152, '2020-11-09 20:26:23'),
(959, 404, 152, '2020-11-09 20:26:23'),
(960, 405, 152, '2020-11-09 20:26:23'),
(961, 406, 152, '2020-11-09 20:26:23'),
(962, 407, 152, '2020-11-09 20:26:23'),
(963, 408, 152, '2020-11-09 20:26:23'),
(964, 409, 152, '2020-11-09 20:26:23'),
(965, 410, 152, '2020-11-09 20:26:23'),
(966, 411, 152, '2020-11-09 20:26:23'),
(967, 412, 152, '2020-11-09 20:26:23'),
(968, 413, 152, '2020-11-09 20:26:23'),
(969, 414, 152, '2020-11-09 20:26:23'),
(970, 415, 152, '2020-11-09 20:26:23'),
(971, 416, 152, '2020-11-09 20:26:23'),
(972, 417, 152, '2020-11-09 20:26:23'),
(973, 449, 4, '2020-11-10 01:18:27'),
(974, 450, 4, '2020-11-10 01:18:27'),
(975, 451, 4, '2020-11-10 01:18:27'),
(976, 452, 4, '2020-11-10 01:18:27'),
(977, 453, 4, '2020-11-10 01:18:27'),
(978, 454, 4, '2020-11-10 01:18:27'),
(979, 455, 4, '2020-11-10 01:18:27'),
(980, 456, 4, '2020-11-10 01:18:27'),
(981, 457, 4, '2020-11-10 01:18:27'),
(982, 458, 4, '2020-11-10 01:18:27'),
(983, 449, 54, '2020-11-10 16:18:32'),
(984, 502, 1, '2020-11-10 23:17:44'),
(985, 503, 1, '2020-11-10 23:17:44'),
(986, 504, 1, '2020-11-10 23:17:44'),
(987, 505, 1, '2020-11-10 23:17:44'),
(988, 506, 1, '2020-11-10 23:17:44'),
(989, 507, 1, '2020-11-10 23:17:44'),
(990, 508, 1, '2020-11-10 23:17:44'),
(991, 509, 1, '2020-11-10 23:17:44'),
(992, 510, 1, '2020-11-10 23:17:44'),
(993, 511, 1, '2020-11-10 23:17:44'),
(994, 44, 0, '2020-11-11 00:07:35'),
(995, 512, 64, '2020-12-02 02:01:32'),
(996, 458, 152, '2020-12-02 02:04:47'),
(997, 196, 0, '2020-12-03 15:10:34'),
(998, 44, 0, '2020-12-03 16:42:34'),
(999, 44, 0, '2020-12-03 18:23:47'),
(1000, 44, 0, '2020-12-03 18:34:49'),
(1001, 44, 0, '2020-12-03 18:38:40'),
(1002, 44, 0, '2020-12-03 18:39:51'),
(1003, 535, 58, '2020-12-03 22:16:00'),
(1004, 536, 58, '2020-12-03 22:16:00'),
(1005, 537, 58, '2020-12-03 22:16:00'),
(1006, 538, 58, '2020-12-03 22:16:00'),
(1007, 539, 58, '2020-12-03 22:16:00'),
(1008, 540, 1, '2020-12-03 22:35:08'),
(1009, 541, 1, '2020-12-03 22:35:08'),
(1010, 542, 1, '2020-12-03 22:35:08'),
(1011, 543, 1, '2020-12-03 22:35:08'),
(1012, 544, 1, '2020-12-03 22:35:08'),
(1013, 543, 46, '2020-12-03 22:47:37'),
(1014, 535, 46, '2020-12-04 03:18:12'),
(1015, 535, 46, '2020-12-04 03:20:10'),
(1016, 535, 1, '2020-12-04 03:24:45'),
(1017, 535, 2, '2020-12-04 03:24:01'),
(1018, 536, 2, '2020-12-04 03:27:21'),
(1019, 535, 3, '2020-12-04 03:27:13'),
(1020, 535, 4, '2020-12-04 03:28:44'),
(1021, 535, 5, '2020-12-04 03:28:28'),
(1022, 535, 5, '2020-12-04 03:29:50'),
(1023, 535, 6, '2020-12-04 03:30:33'),
(1024, 535, 7, '2020-12-04 03:30:16'),
(1025, 535, 7, '2020-12-04 03:31:49'),
(1026, 537, 8, '2020-12-04 03:32:45'),
(1027, 535, 9, '2020-12-04 03:34:28'),
(1028, 535, 10, '2020-12-04 03:39:24'),
(1029, 535, 10, '2020-12-04 03:44:44'),
(1030, 535, 11, '2020-12-04 03:46:18'),
(1031, 538, 12, '2020-12-04 03:46:42'),
(1032, 535, 13, '2020-12-04 03:46:07'),
(1033, 535, 13, '2020-12-04 03:47:27'),
(1034, 535, 14, '2020-12-04 03:49:45'),
(1035, 535, 14, '2020-12-04 03:49:55'),
(1036, 535, 14, '2020-12-04 03:56:47'),
(1037, 535, 15, '2020-12-04 03:59:07'),
(1038, 535, 16, '2020-12-04 04:02:07'),
(1039, 535, 16, '2020-12-04 04:03:58'),
(1040, 539, 16, '2020-12-04 04:04:47'),
(1041, 535, 17, '2020-12-04 04:05:26'),
(1042, 535, 18, '2020-12-04 04:12:22'),
(1043, 535, 18, '2020-12-04 04:12:03'),
(1044, 535, 19, '2020-12-04 04:15:27'),
(1045, 535, 19, '2020-12-04 04:15:42'),
(1046, 535, 20, '2020-12-04 04:17:59'),
(1047, 535, 19, '2020-12-04 04:18:24'),
(1048, 543, 21, '2020-12-04 04:21:11'),
(1049, 535, 22, '2020-12-04 04:26:03'),
(1050, 535, 22, '2020-12-04 04:27:07'),
(1051, 535, 20, '2020-12-04 04:29:32'),
(1052, 544, 19, '2020-12-04 04:30:07'),
(1053, 535, 22, '2020-12-04 09:09:28'),
(1054, 535, 0, '2020-12-04 09:11:05'),
(1055, 535, 4, '2020-12-04 09:12:44'),
(1056, 535, 0, '2020-12-04 09:12:58'),
(1057, 535, 0, '2020-12-04 09:14:16'),
(1058, 536, 0, '2020-12-04 09:14:59'),
(1059, 535, 168, '2020-12-05 02:52:32'),
(1060, 536, 169, '2020-12-05 02:54:30'),
(1061, 545, 153, '2020-12-05 02:58:33'),
(1062, 546, 154, '2020-12-05 02:58:15'),
(1063, 547, 162, '2020-12-05 03:00:05'),
(1064, 548, 163, '2020-12-05 03:01:47'),
(1065, 565, 166, '2020-12-05 03:12:54'),
(1066, 566, 167, '2020-12-05 03:13:57'),
(1067, 567, 168, '2020-12-05 03:14:52'),
(1068, 565, 169, '2020-12-05 03:15:38'),
(1069, 568, 169, '2020-12-05 03:15:30'),
(1070, 569, 170, '2020-12-05 03:17:23'),
(1071, 570, 171, '2020-12-05 03:19:35'),
(1072, 571, 172, '2020-12-05 03:20:40'),
(1073, 565, 166, '2020-12-05 03:31:37'),
(1074, 572, 153, '2020-12-05 10:14:55'),
(1075, 573, 154, '2020-12-05 10:16:01'),
(1076, 574, 155, '2020-12-05 10:19:22'),
(1077, 575, 156, '2020-12-05 10:20:26'),
(1078, 576, 157, '2020-12-05 10:21:32'),
(1079, 577, 158, '2020-12-05 10:24:23'),
(1080, 578, 159, '2020-12-05 10:25:40'),
(1081, 579, 160, '2020-12-05 10:26:27'),
(1082, 580, 161, '2020-12-05 10:27:41'),
(1083, 581, 162, '2020-12-05 10:28:28'),
(1084, 582, 163, '2020-12-05 10:28:56'),
(1085, 581, 165, '2020-12-05 10:30:30'),
(1086, 581, 162, '2020-12-05 10:31:28'),
(1087, 583, 165, '2020-12-05 10:32:00'),
(1088, 584, 164, '2020-12-05 10:33:34'),
(1089, 44, 1, '2020-12-05 23:11:33'),
(1090, 45, 1, '2020-12-05 23:11:33'),
(1091, 196, 10, '2020-12-05 23:11:08'),
(1092, 197, 10, '2020-12-05 23:11:08'),
(1093, 198, 10, '2020-12-05 23:11:08'),
(1094, 199, 10, '2020-12-05 23:11:08'),
(1095, 200, 10, '2020-12-05 23:11:08'),
(1096, 201, 10, '2020-12-05 23:11:08'),
(1097, 202, 10, '2020-12-05 23:11:08'),
(1098, 203, 10, '2020-12-05 23:11:08'),
(1099, 204, 10, '2020-12-05 23:11:08'),
(1100, 205, 10, '2020-12-05 23:11:08'),
(1101, 206, 10, '2020-12-05 23:11:08'),
(1102, 207, 10, '2020-12-05 23:11:08'),
(1103, 512, 10, '2020-12-05 23:11:08'),
(1104, 513, 10, '2020-12-05 23:11:08'),
(1105, 514, 10, '2020-12-05 23:11:08'),
(1106, 515, 10, '2020-12-05 23:11:08'),
(1107, 516, 10, '2020-12-05 23:11:08'),
(1108, 517, 10, '2020-12-05 23:11:08'),
(1109, 518, 10, '2020-12-05 23:11:08'),
(1110, 519, 10, '2020-12-05 23:11:08'),
(1111, 520, 10, '2020-12-05 23:11:08'),
(1112, 521, 10, '2020-12-05 23:11:08'),
(1113, 522, 10, '2020-12-05 23:11:08'),
(1114, 523, 10, '2020-12-05 23:11:08'),
(1115, 524, 10, '2020-12-05 23:11:08'),
(1116, 388, 167, '2020-12-05 23:12:09'),
(1117, 389, 172, '2020-12-05 23:13:55'),
(1118, 390, 172, '2020-12-05 23:13:55'),
(1119, 391, 172, '2020-12-05 23:13:55'),
(1120, 392, 172, '2020-12-05 23:13:55'),
(1121, 393, 172, '2020-12-05 23:13:55'),
(1122, 394, 172, '2020-12-05 23:13:55'),
(1123, 395, 172, '2020-12-05 23:13:55'),
(1124, 396, 172, '2020-12-05 23:13:55'),
(1125, 397, 172, '2020-12-05 23:13:55'),
(1126, 418, 172, '2020-12-05 23:13:55'),
(1127, 389, 164, '2020-12-05 23:15:11'),
(1128, 390, 164, '2020-12-05 23:15:11'),
(1129, 391, 164, '2020-12-05 23:15:11'),
(1130, 392, 164, '2020-12-05 23:15:11'),
(1131, 398, 166, '2020-12-06 16:04:47'),
(1132, 399, 166, '2020-12-06 16:04:47'),
(1133, 400, 166, '2020-12-06 16:04:47'),
(1134, 401, 166, '2020-12-06 16:04:47'),
(1135, 402, 166, '2020-12-06 16:04:47'),
(1136, 403, 166, '2020-12-06 16:04:47'),
(1137, 404, 166, '2020-12-06 16:04:47'),
(1138, 405, 166, '2020-12-06 16:04:47'),
(1139, 406, 166, '2020-12-06 16:04:47'),
(1140, 407, 166, '2020-12-06 16:04:47'),
(1141, 408, 168, '2020-12-06 16:05:39'),
(1142, 409, 168, '2020-12-06 16:05:39'),
(1143, 410, 168, '2020-12-06 16:05:39'),
(1144, 411, 168, '2020-12-06 16:05:39'),
(1145, 412, 168, '2020-12-06 16:05:39'),
(1146, 413, 168, '2020-12-06 16:05:39'),
(1147, 414, 168, '2020-12-06 16:05:39'),
(1148, 415, 168, '2020-12-06 16:05:39'),
(1149, 416, 168, '2020-12-06 16:05:39'),
(1150, 417, 168, '2020-12-06 16:05:39'),
(1151, 585, 167, '2020-12-06 22:16:31'),
(1152, 585, 167, '2020-12-06 22:16:56'),
(1153, 586, 167, '2020-12-06 22:16:56'),
(1154, 587, 167, '2020-12-06 22:16:56'),
(1155, 588, 167, '2020-12-06 22:16:56'),
(1156, 589, 167, '2020-12-06 22:16:56'),
(1157, 590, 167, '2020-12-06 22:16:56'),
(1158, 591, 167, '2020-12-06 22:16:56'),
(1159, 592, 167, '2020-12-06 22:16:56'),
(1160, 593, 167, '2020-12-06 22:16:56'),
(1161, 594, 167, '2020-12-06 22:16:56'),
(1162, 458, 83, '2020-12-06 22:23:26'),
(1163, 565, 0, '2020-12-27 15:56:17'),
(1164, 565, 167, '2020-12-30 13:41:11'),
(1165, 460, 86, '2020-12-30 17:25:23'),
(1166, 460, 86, '2020-12-30 17:25:25'),
(1167, 565, 0, '2020-12-30 20:31:12'),
(1168, 565, 0, '2020-12-30 20:31:16'),
(1169, 565, 167, '2021-01-05 09:59:39'),
(1170, 595, 1, '2021-02-02 16:57:05'),
(1171, 596, 16, '2021-03-20 20:20:07'),
(1172, 597, 16, '2021-03-20 20:20:07'),
(1173, 598, 16, '2021-03-20 20:20:07'),
(1174, 599, 16, '2021-03-20 20:20:07'),
(1175, 600, 16, '2021-03-20 20:20:07'),
(1176, 601, 16, '2021-03-20 20:20:07'),
(1177, 602, 16, '2021-03-20 20:20:07'),
(1178, 603, 16, '2021-03-20 20:20:07'),
(1179, 604, 16, '2021-03-20 20:20:07'),
(1180, 605, 16, '2021-03-20 20:20:07'),
(1181, 606, 16, '2021-03-20 20:20:07'),
(1182, 607, 16, '2021-03-20 20:20:07'),
(1183, 608, 16, '2021-03-20 20:20:07'),
(1184, 609, 16, '2021-03-20 20:20:07'),
(1185, 610, 16, '2021-03-20 20:20:07'),
(1186, 449, 4, '2021-03-20 20:21:44'),
(1187, 458, 6, '2021-03-20 20:22:52'),
(1188, 525, 6, '2021-03-20 20:22:52'),
(1189, 526, 6, '2021-03-20 20:22:52'),
(1190, 527, 6, '2021-03-20 20:22:52'),
(1191, 528, 6, '2021-03-20 20:22:52'),
(1192, 529, 6, '2021-03-20 20:22:52'),
(1193, 530, 6, '2021-03-20 20:22:52'),
(1194, 531, 6, '2021-03-20 20:22:52'),
(1195, 532, 6, '2021-03-20 20:22:52'),
(1196, 533, 6, '2021-03-20 20:22:52'),
(1197, 534, 6, '2021-03-20 20:22:52'),
(1198, 44, 92, '2021-03-25 13:20:09'),
(1199, 44, 1, '2021-03-25 13:23:27'),
(1200, 44, 0, '2021-03-25 13:25:11'),
(1201, 44, 1, '2021-03-25 13:26:43'),
(1202, 44, 0, '2021-03-25 13:26:56'),
(1203, 44, 6, '2021-03-25 13:27:17'),
(1204, 44, 10, '2021-03-26 23:58:29'),
(1205, 44, 2, '2021-03-27 00:27:54'),
(1206, 44, 5, '2021-03-27 00:36:32'),
(1207, 44, 6, '2021-03-27 00:40:59'),
(1208, 45, 19, '2021-03-29 17:23:30'),
(1209, 44, 0, '2021-03-30 05:45:13'),
(1210, 611, 8, '2021-04-04 04:02:44'),
(1211, 612, 8, '2021-04-04 04:02:44'),
(1212, 613, 8, '2021-04-04 04:02:44'),
(1213, 614, 8, '2021-04-04 04:02:44'),
(1214, 615, 8, '2021-04-04 04:02:44'),
(1215, 616, 8, '2021-04-04 04:02:44'),
(1216, 617, 8, '2021-04-04 04:02:44'),
(1217, 618, 8, '2021-04-04 04:02:44'),
(1218, 619, 8, '2021-04-04 04:02:44'),
(1219, 620, 8, '2021-04-04 04:02:44'),
(1220, 44, 1, '2021-04-04 04:04:27'),
(1221, 44, 1, '2021-04-04 04:04:33'),
(1222, 439, 117, '2021-04-06 03:45:40'),
(1223, 439, 123, '2021-04-06 03:46:40'),
(1224, 439, 3, '2021-04-06 03:46:07'),
(1225, 439, 15, '2021-04-06 03:47:55'),
(1226, 621, 166, '2021-04-06 03:51:13'),
(1227, 622, 166, '2021-04-06 03:51:13'),
(1228, 623, 166, '2021-04-06 03:51:13'),
(1229, 624, 166, '2021-04-06 03:51:13'),
(1230, 625, 166, '2021-04-06 03:51:13'),
(1231, 626, 166, '2021-04-06 03:51:13'),
(1232, 627, 166, '2021-04-06 03:51:13'),
(1233, 628, 166, '2021-04-06 03:51:13'),
(1234, 629, 166, '2021-04-06 03:51:13'),
(1235, 630, 166, '2021-04-06 03:51:13'),
(1236, 631, 166, '2021-04-06 03:51:13'),
(1237, 632, 166, '2021-04-06 03:51:13'),
(1238, 633, 166, '2021-04-06 03:51:13'),
(1239, 634, 166, '2021-04-06 03:51:13'),
(1240, 635, 166, '2021-04-06 03:51:13'),
(1241, 636, 166, '2021-04-06 03:53:44'),
(1242, 637, 166, '2021-04-06 03:53:18'),
(1243, 638, 166, '2021-04-06 03:53:18'),
(1244, 639, 166, '2021-04-06 03:53:18'),
(1245, 640, 166, '2021-04-06 03:53:18'),
(1246, 641, 166, '2021-04-06 03:53:18'),
(1247, 642, 166, '2021-04-06 03:53:18'),
(1248, 643, 166, '2021-04-06 03:53:18'),
(1249, 644, 166, '2021-04-06 03:53:18'),
(1250, 645, 166, '2021-04-06 03:53:18'),
(1251, 646, 166, '2021-04-06 03:53:18'),
(1252, 647, 166, '2021-04-06 03:53:18'),
(1253, 648, 166, '2021-04-06 03:53:18'),
(1254, 649, 166, '2021-04-06 03:53:18'),
(1255, 650, 166, '2021-04-06 03:53:18'),
(1256, 651, 171, '2021-04-08 20:13:10'),
(1257, 651, 171, '2021-04-08 20:14:58'),
(1258, 652, 171, '2021-04-08 20:14:58'),
(1259, 653, 171, '2021-04-08 20:14:58'),
(1260, 654, 171, '2021-04-08 20:14:58'),
(1261, 655, 171, '2021-04-08 20:14:58'),
(1262, 656, 171, '2021-04-08 20:14:58'),
(1263, 657, 171, '2021-04-08 20:14:58'),
(1264, 658, 171, '2021-04-08 20:14:58'),
(1265, 659, 171, '2021-04-08 20:14:58'),
(1266, 660, 171, '2021-04-08 20:14:58'),
(1267, 651, 171, '2021-04-08 20:14:50'),
(1268, 652, 171, '2021-04-08 20:14:50'),
(1269, 653, 171, '2021-04-08 20:14:50'),
(1270, 654, 171, '2021-04-08 20:14:50'),
(1271, 655, 171, '2021-04-08 20:14:50'),
(1272, 656, 171, '2021-04-08 20:14:50'),
(1273, 657, 171, '2021-04-08 20:14:50'),
(1274, 658, 171, '2021-04-08 20:14:50'),
(1275, 659, 171, '2021-04-08 20:14:50'),
(1276, 660, 171, '2021-04-08 20:14:50'),
(1277, 651, 171, '2021-04-08 20:14:05'),
(1278, 652, 171, '2021-04-08 20:14:05'),
(1279, 653, 171, '2021-04-08 20:14:05'),
(1280, 654, 171, '2021-04-08 20:14:05'),
(1281, 655, 171, '2021-04-08 20:14:05'),
(1282, 656, 171, '2021-04-08 20:14:05'),
(1283, 657, 171, '2021-04-08 20:14:05'),
(1284, 658, 171, '2021-04-08 20:14:05'),
(1285, 659, 171, '2021-04-08 20:14:05'),
(1286, 660, 171, '2021-04-08 20:14:05'),
(1287, 661, 15, '2021-04-08 20:15:02'),
(1288, 662, 15, '2021-04-08 20:15:02'),
(1289, 663, 15, '2021-04-08 20:15:02'),
(1290, 664, 15, '2021-04-08 20:15:02'),
(1291, 665, 15, '2021-04-08 20:15:02'),
(1292, 666, 15, '2021-04-08 20:15:02'),
(1293, 667, 15, '2021-04-08 20:15:02'),
(1294, 668, 15, '2021-04-08 20:15:02'),
(1295, 669, 15, '2021-04-08 20:15:02'),
(1296, 670, 15, '2021-04-08 20:15:02'),
(1297, 462, 169, '2021-04-08 21:04:50'),
(1298, 463, 169, '2021-04-08 21:04:50'),
(1299, 464, 169, '2021-04-08 21:04:50'),
(1300, 465, 169, '2021-04-08 21:04:50'),
(1301, 466, 169, '2021-04-08 21:04:50'),
(1302, 467, 169, '2021-04-08 21:04:50'),
(1303, 468, 169, '2021-04-08 21:04:50'),
(1304, 469, 169, '2021-04-08 21:04:50'),
(1305, 470, 169, '2021-04-08 21:04:50'),
(1306, 471, 169, '2021-04-08 21:04:50'),
(1307, 676, 1, '2021-06-09 23:41:12'),
(1308, 677, 1, '2021-06-09 23:41:12'),
(1309, 678, 1, '2021-06-09 23:41:12'),
(1310, 679, 1, '2021-06-09 23:41:12'),
(1311, 680, 1, '2021-06-09 23:41:12'),
(1312, 681, 1, '2021-06-09 23:41:12'),
(1313, 682, 1, '2021-06-09 23:41:12'),
(1314, 683, 1, '2021-06-09 23:41:12'),
(1315, 684, 1, '2021-06-09 23:41:12'),
(1316, 685, 1, '2021-06-09 23:41:12'),
(1317, 579, 166, '2021-06-11 10:25:19'),
(1318, 579, 166, '2021-06-11 10:25:20'),
(1319, 583, 166, '2021-06-11 10:26:56'),
(1320, 581, 166, '2021-06-11 11:27:31'),
(1321, 706, 1, '2021-07-08 14:37:33'),
(1322, 707, 1, '2021-07-08 14:37:33'),
(1323, 708, 1, '2021-07-08 14:37:33'),
(1324, 709, 1, '2021-07-08 14:37:33'),
(1325, 710, 1, '2021-07-08 14:37:33'),
(1326, 711, 1, '2021-07-08 14:37:33'),
(1327, 712, 1, '2021-07-08 14:37:33'),
(1328, 713, 1, '2021-07-08 14:37:33'),
(1329, 714, 1, '2021-07-08 14:37:33'),
(1330, 715, 1, '2021-07-08 14:37:33'),
(1331, 716, 4, '2021-07-08 14:37:18'),
(1332, 717, 4, '2021-07-08 14:37:18'),
(1333, 718, 4, '2021-07-08 14:37:18'),
(1334, 719, 4, '2021-07-08 14:37:18'),
(1335, 720, 4, '2021-07-08 14:37:18'),
(1336, 721, 4, '2021-07-08 14:37:18'),
(1337, 722, 4, '2021-07-08 14:37:18'),
(1338, 723, 4, '2021-07-08 14:37:18'),
(1339, 724, 4, '2021-07-08 14:37:18'),
(1340, 725, 4, '2021-07-08 14:37:18'),
(1341, 717, 5, '2021-07-09 02:28:36'),
(1342, 721, 9, '2021-07-09 02:36:23'),
(1343, 715, 0, '2021-07-09 03:43:28'),
(1344, 715, 6, '2021-07-09 03:43:18'),
(1345, 715, 11, '2021-07-09 03:44:13'),
(1346, 706, 6, '2021-07-09 03:45:00'),
(1347, 707, 6, '2021-07-09 03:45:00'),
(1348, 708, 6, '2021-07-09 03:45:00'),
(1349, 709, 6, '2021-07-09 03:45:00'),
(1350, 710, 6, '2021-07-09 03:45:00'),
(1351, 711, 6, '2021-07-09 03:45:00'),
(1352, 712, 6, '2021-07-09 03:45:00'),
(1353, 713, 6, '2021-07-09 03:45:00'),
(1354, 714, 6, '2021-07-09 03:45:00'),
(1355, 715, 6, '2021-07-09 03:45:00'),
(1356, 716, 6, '2021-07-09 03:52:31'),
(1357, 717, 6, '2021-07-09 03:52:31'),
(1358, 718, 6, '2021-07-09 03:52:31'),
(1359, 719, 6, '2021-07-09 03:52:31'),
(1360, 720, 6, '2021-07-09 03:52:31'),
(1361, 721, 6, '2021-07-09 03:52:31'),
(1362, 722, 6, '2021-07-09 03:52:31'),
(1363, 723, 6, '2021-07-09 03:52:31'),
(1364, 724, 6, '2021-07-09 03:52:31'),
(1365, 725, 6, '2021-07-09 03:52:31'),
(1366, 706, 22, '2021-07-09 12:28:08'),
(1367, 707, 22, '2021-07-09 12:28:08'),
(1368, 708, 22, '2021-07-09 12:28:08'),
(1369, 709, 22, '2021-07-09 12:28:08'),
(1370, 710, 22, '2021-07-09 12:28:08'),
(1371, 711, 22, '2021-07-09 12:28:08'),
(1372, 712, 22, '2021-07-09 12:28:08'),
(1373, 713, 22, '2021-07-09 12:28:08'),
(1374, 714, 22, '2021-07-09 12:28:08'),
(1375, 715, 22, '2021-07-09 12:28:08'),
(1376, 716, 22, '2021-07-09 12:29:54'),
(1377, 717, 22, '2021-07-09 12:29:54'),
(1378, 718, 22, '2021-07-09 12:29:54'),
(1379, 719, 22, '2021-07-09 12:29:54'),
(1380, 720, 22, '2021-07-09 12:29:54'),
(1381, 721, 22, '2021-07-09 12:29:54'),
(1382, 722, 22, '2021-07-09 12:29:54'),
(1383, 723, 22, '2021-07-09 12:29:54'),
(1384, 724, 22, '2021-07-09 12:29:54'),
(1385, 725, 22, '2021-07-09 12:29:54'),
(1386, 716, 1, '2021-07-14 22:47:09'),
(1387, 717, 1, '2021-07-14 22:47:09'),
(1388, 718, 1, '2021-07-14 22:47:09'),
(1389, 719, 1, '2021-07-14 22:47:09'),
(1390, 720, 1, '2021-07-14 22:47:09'),
(1391, 721, 1, '2021-07-14 22:47:09'),
(1392, 722, 1, '2021-07-14 22:47:09'),
(1393, 723, 1, '2021-07-14 22:47:09'),
(1394, 724, 1, '2021-07-14 22:47:09'),
(1395, 725, 1, '2021-07-14 22:47:09'),
(1396, 716, 2, '2021-07-14 23:11:10'),
(1397, 726, 1, '2021-07-14 23:12:12'),
(1398, 727, 1, '2021-07-14 23:12:12'),
(1399, 728, 1, '2021-07-14 23:12:12'),
(1400, 729, 1, '2021-07-14 23:12:12'),
(1401, 730, 1, '2021-07-14 23:12:12'),
(1402, 731, 1, '2021-08-09 03:05:59'),
(1403, 716, 153, '2021-08-09 15:04:28'),
(1404, 717, 154, '2021-08-09 15:05:20'),
(1405, 718, 155, '2021-08-09 15:06:11'),
(1406, 719, 156, '2021-08-09 15:08:21'),
(1407, 720, 156, '2021-08-09 15:08:21'),
(1408, 720, 157, '2021-08-09 15:10:29'),
(1409, 723, 159, '2021-08-09 15:11:29'),
(1410, 724, 160, '2021-08-09 15:13:59'),
(1411, 706, 15, '2021-08-09 17:57:10'),
(1412, 707, 15, '2021-08-09 17:57:10'),
(1413, 708, 15, '2021-08-09 17:57:10'),
(1414, 709, 15, '2021-08-09 17:57:10'),
(1415, 710, 15, '2021-08-09 17:57:10'),
(1416, 711, 15, '2021-08-09 17:57:10'),
(1417, 712, 15, '2021-08-09 17:57:10'),
(1418, 713, 15, '2021-08-09 17:57:10'),
(1419, 714, 15, '2021-08-09 17:57:10'),
(1420, 715, 15, '2021-08-09 17:57:10'),
(1421, 725, 162, '2021-08-09 17:59:55'),
(1422, 716, 163, '2021-08-09 18:00:29'),
(1423, 726, 163, '2021-08-09 18:01:31'),
(1424, 727, 164, '2021-08-09 18:02:55'),
(1425, 728, 164, '2021-08-09 18:02:55'),
(1426, 729, 165, '2021-08-09 18:03:21'),
(1427, 730, 165, '2021-08-09 18:03:21'),
(1428, 727, 61, '2021-08-09 23:09:47'),
(1429, 728, 61, '2021-08-09 23:09:47'),
(1430, 722, 156, '2021-08-10 00:02:20'),
(1431, 722, 160, '2021-08-10 00:05:56'),
(1432, 706, 153, '2021-08-24 17:06:12'),
(1433, 707, 0, '2021-08-24 17:08:33'),
(1434, 707, 2, '2021-08-24 17:08:11'),
(1435, 707, 2, '2021-08-24 17:09:55'),
(1436, 706, 1, '2021-08-24 17:10:27'),
(1437, 707, 2, '2021-08-24 17:10:27'),
(1438, 708, 2, '2021-08-24 17:10:27'),
(1439, 709, 2, '2021-08-24 17:10:27'),
(1440, 710, 2, '2021-08-24 17:10:27'),
(1441, 711, 2, '2021-08-24 17:10:27'),
(1442, 712, 2, '2021-08-24 17:10:27'),
(1443, 713, 2, '2021-08-24 17:10:27'),
(1444, 714, 0, '2021-08-24 17:15:00'),
(1445, 714, 167, '2021-08-24 17:16:49'),
(1446, 715, 167, '2021-08-24 17:16:49'),
(1447, 732, 162, '2021-08-24 17:17:53'),
(1448, 733, 162, '2021-08-24 17:17:53'),
(1449, 734, 162, '2021-08-24 17:17:53'),
(1450, 735, 162, '2021-08-24 17:17:53'),
(1451, 737, 166, '2021-08-24 17:18:01'),
(1452, 738, 166, '2021-08-24 17:18:01'),
(1453, 736, 166, '2021-08-24 17:19:27'),
(1454, 716, 155, '2021-08-24 17:21:09'),
(1455, 717, 155, '2021-08-24 17:21:09'),
(1456, 718, 155, '2021-08-24 17:21:09'),
(1457, 719, 155, '2021-08-24 17:21:09'),
(1458, 720, 153, '2021-08-24 17:22:02'),
(1459, 721, 153, '2021-08-24 17:22:02'),
(1460, 722, 153, '2021-08-24 17:22:02'),
(1461, 723, 153, '2021-08-24 17:22:02'),
(1462, 724, 164, '2021-08-24 17:23:15'),
(1463, 725, 164, '2021-08-24 17:23:15'),
(1464, 726, 164, '2021-08-24 17:23:15'),
(1465, 731, 168, '2021-08-24 17:24:34'),
(1466, 739, 168, '2021-08-24 17:24:34'),
(1467, 721, 3, '2021-08-25 17:21:43'),
(1468, 722, 3, '2021-08-25 17:21:43'),
(1469, 723, 3, '2021-08-25 17:21:43'),
(1470, 724, 3, '2021-08-25 17:21:43'),
(1471, 725, 3, '2021-08-25 17:21:43'),
(1472, 740, 167, '2021-08-25 17:55:41'),
(1473, 716, 2, '2021-08-25 17:58:22'),
(1474, 716, 1, '2021-08-25 17:59:00'),
(1475, 716, 155, '2021-08-25 18:00:57'),
(1476, 741, 7, '2021-08-25 18:01:29'),
(1477, 742, 7, '2021-08-25 18:01:29'),
(1478, 743, 7, '2021-08-25 18:01:29'),
(1479, 741, 160, '2021-08-25 18:02:35'),
(1480, 742, 160, '2021-08-25 18:03:09'),
(1481, 743, 160, '2021-08-25 18:03:09'),
(1482, 44, 21, '2021-10-07 18:29:13'),
(1483, 706, 164, '2021-10-22 23:15:12'),
(1484, 707, 154, '2021-10-22 23:16:19'),
(1485, 708, 153, '2021-10-22 23:17:52'),
(1486, 709, 163, '2021-10-22 23:19:18'),
(1487, 710, 163, '2021-10-22 23:19:18'),
(1488, 711, 162, '2021-10-22 23:20:08'),
(1489, 712, 162, '2021-10-22 23:20:08'),
(1490, 713, 0, '2021-10-22 23:21:31'),
(1491, 714, 0, '2021-10-22 23:21:31'),
(1492, 713, 161, '2021-10-22 23:22:13'),
(1493, 714, 161, '2021-10-22 23:22:13'),
(1494, 732, 155, '2021-10-22 23:23:05'),
(1495, 733, 157, '2021-10-22 23:24:04'),
(1496, 734, 1, '2021-10-22 23:25:29'),
(1497, 735, 49, '2021-10-22 23:27:00'),
(1498, 735, 159, '2021-10-22 23:28:29'),
(1499, 736, 171, '2021-10-22 23:54:16'),
(1500, 661, 46, '2021-11-15 00:29:12'),
(1501, 744, 3, '2021-11-15 01:27:39'),
(1502, 745, 3, '2021-11-15 01:27:39'),
(1503, 746, 3, '2021-11-15 01:27:39'),
(1504, 747, 3, '2021-11-15 01:27:39'),
(1505, 748, 3, '2021-11-15 01:27:39'),
(1506, 749, 3, '2021-11-15 01:27:39'),
(1507, 750, 3, '2021-11-15 01:27:39'),
(1508, 751, 3, '2021-11-15 01:27:39'),
(1509, 752, 3, '2021-11-15 01:27:39'),
(1510, 753, 3, '2021-11-15 01:27:39'),
(1511, 754, 38, '2021-11-15 02:05:01'),
(1512, 755, 164, '2021-11-28 23:25:24'),
(1513, 756, 164, '2021-11-28 23:25:24'),
(1514, 757, 164, '2021-11-28 23:25:24'),
(1515, 758, 164, '2021-11-28 23:25:24'),
(1516, 759, 164, '2021-11-28 23:25:24'),
(1517, 760, 164, '2021-11-28 23:25:24'),
(1518, 761, 164, '2021-11-28 23:25:24'),
(1519, 762, 164, '2021-11-28 23:25:24'),
(1520, 763, 164, '2021-11-28 23:25:24'),
(1521, 764, 164, '2021-11-28 23:25:24'),
(1522, 765, 164, '2021-11-28 23:25:24'),
(1523, 766, 164, '2021-11-28 23:25:24'),
(1524, 767, 42, '2021-12-02 22:44:18'),
(1525, 768, 42, '2021-12-02 22:44:18'),
(1526, 769, 42, '2021-12-02 22:44:18'),
(1527, 770, 42, '2021-12-02 22:44:18'),
(1528, 771, 42, '2021-12-02 22:44:18'),
(1529, 772, 42, '2021-12-02 22:44:18'),
(1530, 767, 56, '2021-12-02 22:45:03'),
(1531, 768, 56, '2021-12-02 22:45:03'),
(1532, 769, 56, '2021-12-02 22:45:03'),
(1533, 770, 56, '2021-12-02 22:45:03'),
(1534, 771, 56, '2021-12-02 22:45:03'),
(1535, 772, 56, '2021-12-02 22:45:03'),
(1536, 767, 162, '2021-12-02 22:46:43'),
(1537, 768, 162, '2021-12-02 22:46:43'),
(1538, 769, 162, '2021-12-02 22:46:43'),
(1539, 770, 162, '2021-12-02 22:46:43'),
(1540, 771, 162, '2021-12-02 22:46:43'),
(1541, 772, 162, '2021-12-02 22:46:43'),
(1542, 709, 154, '2021-12-06 22:16:12'),
(1543, 709, 154, '2021-12-06 22:16:17'),
(1544, 713, 155, '2021-12-06 22:18:33'),
(1545, 734, 162, '2021-12-06 22:19:45'),
(1546, 735, 162, '2021-12-06 22:19:45'),
(1547, 735, 159, '2021-12-06 22:20:23'),
(1548, 716, 4, '2021-12-06 23:37:34'),
(1549, 716, 4, '2021-12-06 23:37:38'),
(1550, 773, 155, '2021-12-09 22:04:03'),
(1551, 774, 157, '2021-12-09 22:07:15'),
(1552, 775, 160, '2021-12-09 22:09:49'),
(1553, 776, 160, '2021-12-09 22:09:49'),
(1554, 775, 160, '2021-12-09 22:09:53'),
(1555, 776, 160, '2021-12-09 22:09:53'),
(1556, 776, 164, '2021-12-09 22:12:59'),
(1557, 777, 171, '2021-12-09 22:17:27'),
(1558, 778, 161, '2021-12-09 22:18:32'),
(1559, 779, 161, '2021-12-09 22:18:32'),
(1560, 780, 162, '2021-12-09 22:19:06'),
(1561, 781, 160, '2021-12-09 22:21:44'),
(1562, 782, 159, '2021-12-09 22:22:08'),
(1563, 783, 162, '2021-12-09 22:26:45'),
(1564, 784, 157, '2021-12-09 22:28:56'),
(1565, 785, 161, '2021-12-09 22:29:32'),
(1566, 786, 161, '2021-12-09 22:29:32'),
(1567, 787, 161, '2021-12-09 22:29:32'),
(1568, 786, 165, '2021-12-09 22:32:45');



INSERT INTO `facings` (`facingID`, `shelfID`, `facingIDForUser`, `initialValues`, `shelfRelativeAddress`, `depth`, `width`, `height`, `activationDate`, `deactivationDate`, `RS485Address`, `version`, `deviceTypeID`, `backBrightness`, `numberOfSensors`, `geolocation`, `mfdate`, `SN`) VALUES
(44, 23, 'f1', '', 1, 22, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(45, 23, 'f2', '', 2, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(46, 1, 'rr', '', 5, 24, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(47, 1, 'rr', '', 6, 24, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(48, 1, 'rr', '', 7, 24, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(49, 1, 'rr', '', 8, 24, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(50, 1, 'f', '', 9, 12, 2, 15, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(51, 1, 'f', '', 10, 12, 2, 15, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(52, 1, 'f', '', 11, 12, 2, 15, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(53, 1, 'f', '', 12, 12, 2, 15, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(54, 1, 'f', '', 13, 12, 2, 15, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(55, 24, '', '', 2, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(56, 24, '', '', 3, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(57, 24, '', '', 4, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(58, 24, '', '', 5, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(61, 2, 'F', '', 1, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(62, 2, 'F', '', 2, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(63, 2, 'F', '', 3, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(64, 2, 'F', '', 4, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(65, 2, 'F', '', 5, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(66, 2, 'F', '', 6, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(67, 2, 'F', '', 7, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(68, 2, 'F', '', 8, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(69, 2, 'F', '', 9, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(70, 2, 'F', '', 10, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(71, 2, 'F', '', 11, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(72, 2, 'F', '', 12, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(73, 2, 'F', '', 13, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(74, 2, 'F', '', 14, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(75, 2, 'F', '', 15, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(78, 2, 'F', '', 18, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(79, 2, 'F', '', 19, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(80, 2, 'F', '', 20, 12, 2, 12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(81, 24, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(82, 24, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(83, 24, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(84, 24, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(85, 24, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(86, 24, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(87, 24, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(88, 24, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(89, 24, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(90, 24, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(91, 24, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(92, 24, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(93, 24, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(94, 24, '', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(95, 1, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(96, 1, 'f15', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(98, 26, 'f', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(99, 26, 'f', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(100, 26, 'f', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(101, 26, 'f', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(102, 26, 'f', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(103, 26, 'f', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(104, 26, 'f', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(105, 26, 'f', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(106, 26, 'f', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(107, 26, 'f', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(108, 26, 'f', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(109, 26, 'f', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(110, 26, 'f', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(111, 26, 'f', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(112, 26, 'f', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(115, 26, 'f', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(116, 26, 'f', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(117, 26, 'f', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(138, 29, 'f', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(139, 29, 'f', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(140, 29, 'f', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(141, 29, 'f', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(142, 29, 'f', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(143, 29, 'f', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(144, 29, 'f', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(145, 29, 'f', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(146, 29, 'f', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(147, 29, 'f', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(148, 29, 'f', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(149, 29, 'f', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(150, 29, 'f', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(151, 29, 'f', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(152, 29, 'f', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(155, 29, 'f', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(156, 29, 'f', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(157, 29, 'f', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(158, 28, 'f', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(159, 28, 'f', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(160, 28, 'f', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(161, 28, 'f', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(162, 28, 'f', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(163, 28, 'f', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(164, 28, 'f', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(165, 28, 'f', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(166, 28, 'f', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(167, 28, 'f', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(168, 28, 'f', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(169, 28, 'f', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(170, 28, 'f', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(171, 28, 'f', '', 22, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(172, 28, 'f', '', 23, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(173, 28, '', '', 24, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(174, 31, 'f1', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(175, 31, 'f1', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(176, 31, 'f1', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(177, 31, 'f1', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(178, 31, 'f1', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(179, 31, 'f1', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(180, 31, 'f1', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(181, 31, 'f1', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(182, 31, 'f1', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(183, 31, 'f1', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(184, 31, 'f1', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(185, 31, 'f1', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(186, 32, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(187, 32, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(188, 32, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(189, 32, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(190, 32, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(191, 32, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(192, 32, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(193, 32, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(194, 32, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(195, 32, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(196, 34, 'f01', '', 1, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(197, 34, 'f02', '', 2, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(198, 34, 'f03', '', 3, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(199, 34, 'f04', '', 5, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(200, 34, 'f05', '', 6, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(201, 34, 'f06', '', 7, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(202, 34, 'f07', '', 8, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(203, 34, 'f08', '', 9, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(204, 34, 'f09', '', 10, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(205, 34, 'f10', '', 11, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(206, 34, 'f11', '', 12, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(207, 34, 'f12', '', 13, 20, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(208, 24, 'f0', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(209, 28, '', '', 25, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(210, 28, '', '', 26, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(211, 28, '', '', 27, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(212, 28, '', '', 28, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(213, 29, '', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(214, 29, '', '', 22, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(215, 29, '', '', 23, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(216, 29, '', '', 24, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(217, 29, '', '', 25, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(218, 29, '', '', 26, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(219, 29, '', '', 27, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(220, 29, '', '', 28, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(221, 29, '', '', 29, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(222, 29, '', '', 30, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(223, 30, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(224, 30, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(225, 30, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(226, 30, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(227, 30, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(228, 30, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(229, 30, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(230, 30, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(231, 30, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(232, 30, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(235, 28, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(236, 28, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(237, 28, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(238, 33, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(239, 33, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(240, 33, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(241, 33, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(242, 33, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(243, 33, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(244, 33, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(245, 33, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(246, 33, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(247, 33, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(248, 33, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(249, 33, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(250, 33, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(251, 33, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(252, 33, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(255, 33, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(256, 33, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(257, 33, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(258, 33, '', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(259, 33, '', '', 22, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(260, 33, '', '', 23, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(261, 33, '', '', 24, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(262, 33, '', '', 25, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(263, 33, '', '', 26, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(264, 33, '', '', 27, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(265, 33, '', '', 28, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(266, 33, '', '', 29, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(267, 33, '', '', 30, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(268, 30, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(269, 30, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(270, 30, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(271, 30, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(272, 30, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(275, 30, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(276, 30, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(277, 30, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(278, 30, '', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(279, 30, '', '', 22, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(280, 30, '', '', 23, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(281, 30, '', '', 24, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(282, 30, '', '', 25, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(283, 30, '', '', 26, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(284, 30, '', '', 27, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(285, 30, '', '', 28, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(286, 30, '', '', 29, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(287, 30, '', '', 30, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(288, 30, '', '', 31, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(289, 30, '', '', 32, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(290, 30, '', '', 33, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(291, 30, '', '', 34, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(292, 30, '', '', 35, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(293, 28, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(294, 28, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(295, 28, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(296, 36, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(297, 36, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(298, 36, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(299, 36, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(300, 36, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(301, 36, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(302, 36, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(303, 36, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(304, 36, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(305, 36, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(306, 36, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(307, 36, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(308, 35, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(309, 35, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(310, 35, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(311, 35, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(312, 35, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(313, 35, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(314, 35, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(315, 35, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(316, 35, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(317, 35, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(318, 35, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(319, 35, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(320, 35, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(321, 35, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(322, 35, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(323, 33, '', '', 31, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(324, 37, '', '', 1, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(325, 37, '', '', 2, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(326, 37, '', '', 6, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(327, 37, '', '', 7, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(328, 37, '', '', 8, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(329, 37, '', '', 9, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(330, 37, '', '', 10, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(331, 37, '', '', 11, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(332, 37, '', '', 12, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(333, 37, '', '', 13, 24, 2, 10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(334, 37, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(335, 37, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(336, 37, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(337, 39, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(338, 39, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(339, 39, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(340, 39, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(341, 39, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(342, 39, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(343, 39, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(344, 39, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(345, 39, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(346, 39, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(347, 43, 'f1', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(348, 43, 'g2', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(349, 43, 'f3', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(350, 38, 'f1', '', 1, 22, 2, 54, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(351, 38, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(352, 38, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(353, 38, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(354, 38, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(355, 38, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(356, 38, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(357, 38, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(358, 38, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(359, 43, 'f4', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(360, 43, 'f5', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(361, 43, 'f5', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(362, 43, 'f5', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(363, 43, 'f5', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(364, 43, 'f5', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(365, 33, '', '', 32, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(366, 43, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(388, 47, 'f1', '', 1, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(389, 47, 'f1', '', 2, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(390, 47, 'f1', '', 3, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(391, 47, 'f1', '', 4, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(392, 47, 'f1', '', 5, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(393, 47, 'f1', '', 6, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(394, 47, 'f1', '', 7, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(395, 47, 'f1', '', 8, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(396, 47, 'f1', '', 9, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(397, 47, 'f1', '', 10, 24, 2, 24, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(398, 48, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(399, 48, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(400, 48, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(401, 48, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(402, 48, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(403, 48, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(404, 48, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(405, 48, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(406, 48, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(407, 48, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(408, 48, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(409, 48, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(410, 48, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(411, 48, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(412, 48, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(415, 48, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(416, 48, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(417, 48, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(418, 47, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(419, 49, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(420, 49, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(421, 49, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(422, 49, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(423, 49, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(424, 49, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(425, 49, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(426, 49, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(427, 49, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(428, 49, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(429, 50, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(430, 50, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(431, 50, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(432, 50, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(433, 50, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(434, 50, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(435, 50, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(436, 50, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(437, 50, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(438, 50, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(439, 51, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(440, 51, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(441, 51, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(442, 51, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(443, 51, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(444, 51, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(445, 51, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(446, 51, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(447, 51, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(448, 51, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(449, 54, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(450, 54, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(451, 54, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(452, 54, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(453, 54, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(454, 54, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(455, 54, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(456, 54, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(457, 54, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(458, 54, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(459, 51, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(460, 52, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(461, 52, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(462, 53, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(463, 53, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(464, 53, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(465, 53, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(466, 53, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(467, 53, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(468, 53, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(469, 53, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(470, 53, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(471, 53, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(472, 51, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(473, 51, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(474, 51, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(475, 51, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(478, 51, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(479, 51, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(480, 51, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(481, 51, '', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(482, 51, '', '', 22, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(483, 51, '', '', 23, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(484, 51, '', '', 24, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(485, 51, '', '', 25, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(486, 51, '', '', 26, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(487, 51, '', '', 27, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(488, 51, '', '', 28, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(489, 51, '', '', 29, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(490, 51, '', '', 30, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(491, 51, '', '', 31, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(492, 51, '', '', 32, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(493, 51, '', '', 33, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(494, 51, '', '', 34, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(495, 51, '', '', 35, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(496, 51, '', '', 36, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(497, 51, '', '', 37, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(498, 51, '', '', 38, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(499, 51, '', '', 39, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(500, 51, '', '', 40, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(501, 51, '', '', 41, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(502, 55, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(503, 55, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(504, 55, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(505, 55, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(506, 55, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(507, 55, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(508, 55, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(509, 55, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(510, 55, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(511, 55, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(512, 34, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(513, 34, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(516, 34, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(517, 34, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(518, 34, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(519, 34, '', '', 21, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(520, 34, '', '', 22, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(521, 34, '', '', 23, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(522, 34, '', '', 24, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(523, 34, '', '', 25, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(524, 34, '', '', 26, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(525, 54, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(526, 54, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(527, 54, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(528, 54, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(529, 54, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(532, 54, '', '', 18, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(533, 54, '', '', 19, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(534, 54, '', '', 20, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(565, 59, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(566, 59, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(567, 59, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(568, 59, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(569, 59, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(570, 59, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(571, 59, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(572, 60, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(573, 60, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(574, 60, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(575, 60, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(576, 60, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(577, 60, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(578, 60, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(579, 60, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(582, 60, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(583, 60, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(584, 60, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(585, 61, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(586, 61, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(587, 61, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(588, 61, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(589, 61, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(590, 61, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(591, 61, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(592, 61, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(593, 61, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(594, 61, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(595, 59, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(596, 62, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(597, 62, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(598, 62, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(599, 62, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(600, 62, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(601, 62, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(602, 62, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(603, 62, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(604, 62, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(605, 62, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(606, 62, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(607, 62, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(608, 62, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(609, 62, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(610, 62, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(611, 63, 'f1', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(612, 63, 'f1', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(613, 63, 'f1', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(614, 63, 'f1', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(615, 63, 'f1', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(616, 63, 'f1', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(617, 63, 'f1', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(618, 63, 'f1', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(619, 63, 'f1', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(620, 63, 'f1', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(621, 64, 'f1', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(622, 64, 'f1', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(623, 64, 'f1', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(624, 64, 'f1', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(625, 64, 'f1', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(626, 64, 'f1', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(627, 64, 'f1', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(628, 64, 'f1', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(629, 64, 'f1', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(630, 64, 'f1', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(631, 64, 'f1', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(632, 64, 'f1', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(633, 64, 'f1', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(634, 64, 'f1', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(635, 64, 'f1', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(636, 65, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(637, 65, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(638, 65, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(639, 65, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(640, 65, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(641, 65, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(642, 65, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(643, 65, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(644, 65, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(645, 65, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(646, 65, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(647, 65, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(648, 65, '', '', 13, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(649, 65, '', '', 14, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(650, 65, '', '', 15, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(651, 66, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(652, 66, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(653, 66, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(654, 66, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(655, 66, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(656, 66, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(657, 66, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(658, 66, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(659, 66, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(660, 66, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(661, 67, 'f1', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(662, 67, 'f1', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(663, 67, 'f1', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(664, 67, 'f1', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(665, 67, 'f1', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(666, 67, 'f1', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(667, 67, 'f1', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(668, 67, 'f1', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(669, 67, 'f1', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(670, 67, 'f1', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(671, 34, '', '', 27, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '');


INSERT INTO `facings` (`facingID`, `shelfID`, `facingIDForUser`, `initialValues`, `shelfRelativeAddress`, `depth`, `width`, `height`, `activationDate`, `deactivationDate`, `RS485Address`, `version`, `deviceTypeID`, `backBrightness`, `numberOfSensors`, `geolocation`, `mfdate`, `SN`) VALUES
(672, 34, '', '', 28, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(673, 34, '', '', 29, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(674, 34, '', '', 30, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(675, 34, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(676, 68, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(677, 68, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(678, 68, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(679, 68, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(680, 68, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(681, 68, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(682, 68, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(683, 68, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(684, 68, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(685, 68, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(686, 71, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(687, 71, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(688, 71, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(689, 71, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(690, 71, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(691, 71, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(692, 71, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(693, 71, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(694, 71, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(695, 71, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(696, 70, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(697, 70, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(698, 70, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(699, 70, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(700, 70, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(701, 70, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(702, 70, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(703, 70, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(704, 70, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(705, 70, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(706, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 1, 24,2,12, '2021-12-07 00:00:00', NULL, '3', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '00000432070b'),
(707, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 2, 24,2,12, '2021-12-07 00:00:00', NULL, '4', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '00000483c4ff'),
(708, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 3, 24,2,12, '2021-12-07 00:00:00', NULL, '7', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '000004134b92'),
(709, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 4, 24,2,12, '2021-12-07 00:00:00', NULL, '8', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '0000041b0aa1'),
(710, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 5, 24,2,12, '2021-12-07 00:00:00', NULL, '10', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '0000046f8bda'),
(711, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 6, 24,2,12, '2021-12-07 00:00:00', NULL, '11', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '000004662299'),
(712, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 7, 24,2,12, '2021-12-07 00:00:00', NULL, '13', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '000004430015'),
(713, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 8, 24,2,12, '2021-12-07 00:00:00', NULL, '14', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '000004a000c6'),
(714, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 9, 24,2,12, '2021-12-07 00:00:00', NULL, '16', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '0000045f59a3'),
(732, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 10, 24,2,12, '2021-12-07 00:00:00', NULL, '17', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '00000402363c'),
(733, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 11, 24,2,12, '2021-12-07 00:00:00', NULL, '18', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '000004b54642'),
(734, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 12, 24,2,12, '2021-12-07 00:00:00', NULL, '20', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '00000412287f'),
(735, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 13, 24,2,12, '2021-12-07 00:00:00', NULL, '21', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '0000048f9b03'),
(736, 72, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 14, 24,2,12, '2021-12-07 00:00:00', NULL, '24', NULL, 210, NULL, NULL, NULL, '2021-12-07 00:00:00', '00000488c3cc'),
(744, 74, 'f1', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(745, 74, 'f1', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(746, 74, 'f1', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(747, 74, 'f1', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(748, 74, 'f1', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(749, 74, 'f1', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(750, 74, 'f1', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(751, 74, 'f1', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(752, 74, 'f1', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(753, 74, 'f1', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(755, 75, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(756, 75, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(757, 75, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(758, 75, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(759, 75, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(760, 75, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(761, 75, '', '', 7, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(762, 75, '', '', 8, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(763, 75, '', '', 9, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(764, 75, '', '', 10, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(765, 75, '', '', 11, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(766, 75, '', '', 12, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(767, 76, '', '', 1, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(768, 76, '', '', 2, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(769, 76, '', '', 3, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(770, 76, '', '', 4, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(771, 76, '', '', 5, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(772, 76, '', '', 6, 24,2,12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, ''),
(773, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 1, 24,2,12, '2021-12-10 00:00:00', NULL, '48', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004f27fb5'),
(774, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 2, 24,2,12, '2021-12-10 00:00:00', NULL, '3', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004add0c4'),
(775, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 3, 24,2,12, '2021-12-10 00:00:00', NULL, '4', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '0000045a93ab'),
(776, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 4, 24,2,12, '2021-12-10 00:00:00', NULL, '7', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004391556'),
(777, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 5, 24,2,12, '2021-12-10 00:00:00', NULL, '9', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004b533e0'),
(778, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 6, 24,2,12, '2021-12-10 00:00:00', NULL, '10', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '00000463993c'),
(779, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 7, 24,2,12, '2021-12-10 00:00:00', NULL, '12', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004697a2b'),
(780, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 8, 24,2,12, '2021-12-10 00:00:00', NULL, '13', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004b05e29'),
(781, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 9, 24,2,12, '2021-12-10 00:00:00', NULL, '15', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004806fca'),
(782, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 10, 24,2,12, '2021-12-10 00:00:00', NULL, '16', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '00000410b9a7'),
(783, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 11, 24,2,12, '2021-12-10 00:00:00', NULL, '18', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004967c87'),
(784, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 12, 24,2,12, '2021-12-10 00:00:00', NULL, '19', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004c630bb'),
(785, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 13, 24,2,12, '2021-12-10 00:00:00', NULL, '21', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '0000048276d8'),
(786, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 14, 24,2,12, '2021-12-10 00:00:00', NULL, '22', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004785bb4'),
(787, 73, '', '3:1000;4:1000;5:1000;6:1000;7:1000;8:1000;9:1000;10:1000;11:1000;12:1000;13:1000;14:1000;15:1000;16:1000;17:1000;18:1000;19:1000;20:1000;21:1000;22:1000;23:1000;24:1000;25:1000;', 15, 24,2,12, '2021-12-10 00:00:00', NULL, '24', NULL, 210, NULL, NULL, NULL, '2021-12-10 00:00:00', '000004116514');





INSERT INTO `factorys` (`factoryID`, `factoryName`, `factoryAddr1`, `factoryAddr2`, `factoryAddr3`, `factoryCountryCode`, `manufacturerID`) VALUES
(1, 'Factory 1', '123 Fuzhou Rd', 'Shanghai, China', NULL, 156, 1);



INSERT INTO `hardwareids` (`hardwareidID`, `batchID`, `serialnumber`, `counter`, `address`) VALUES
(2890, 2, '0DaMo08TN001', 1, 3346),
(2891, 2, '0DaMo08TO002', 2, 3347),
(4734, 4, '00000488c3cc', 0, 24),
(4735, 4, '000004f06f1d', 0, 23),
(4736, 4, '0000048f9b03', 0, 21),
(4737, 4, '00000412287f', 0, 20),
(4738, 4, '000004b54642', 0, 18),
(4739, 4, '00000402363c', 0, 17),
(4740, 4, '0000045f59a3', 0, 16),
(4741, 4, '000004a000c6', 0, 14),
(4742, 4, '000004430015', 0, 13),
(4743, 4, '000004662299', 0, 11),
(4744, 4, '0000046f8bda', 0, 10),
(4745, 4, '0000041b0aa1', 0, 8),
(4746, 4, '000004134b92', 0, 7),
(4747, 4, '000004bd0929', 0, 6),
(4748, 4, '00000483c4ff', 0, 4),
(4749, 4, '00000432070b', 0, 3),
(4750, 4, '0000049f5387', 0, 48),
(4751, 4, '00000410b9a7', 0, 23),
(4753, 4, '000004806fca', 0, 22),
(4755, 4, '000004b05e29', 0, 21),
(4757, 4, '000004697a2b', 0, 19),
(4759, 4, '00000463993c', 0, 18),
(4761, 4, '000004b533e0', 0, 17),
(4763, 4, '000004d96c5e', 0, 16),
(4765, 4, '000004391556', 0, 15),
(4767, 4, '0000045a93ab', 0, 14),
(4769, 4, '000004c630bb', 0, 13),
(4771, 4, '000004a1988f', 0, 12),
(4773, 4, '000004add0c4', 0, 11),
(4775, 4, '000004785bb4', 0, 9),
(4777, 4, '000004033605', 0, 8),
(4779, 4, '000004f27fb5', 0, 7),
(4781, 4, '000004967c87', 0, 6),
(4783, 4, '0000048276d8', 0, 5),
(4785, 4, '000004116514', 0, 3),
(4786, 4, '000004b291d5', 0, 2);



INSERT INTO `manufacturers` (`manufacturerID`, `mfrName`, `mfrAddr1`, `mfrAddr2`, `mfrAddr3`, `mfrCountryCode`) VALUES
(1, '制作精良的履带和货架公司。', '44-51 Upper Cross Street', 'Singapore', NULL, 702);



INSERT INTO `merchandiseitems` (`merchandiseItemID`, `productID`, `storeID`, `supplierID`, `country`, `state`, `invSufficientThreshold`, `alertThreshold`, `shortageThreshold`) VALUES
(1, 1, 1, 1, NULL, NULL, 75, 40, 30),
(2, 2, 1, 34, NULL, NULL, 75, 40, 30),
(3, 3, 1, 34, NULL, NULL, 75, 40, 30);





INSERT INTO `products` (`productID`, `upc`, `productName`, `manufacturer`, `brand`, `variety`, `description`, `category`, `unit_material`, `volume`, `vol_measurement_unit`, `packing_type`, `unit_packing_type`, `quantity`, `weight`, `weight_measurement_unit`, `width`, `depth`, `height`, `dimension_measurement_unit`, `super_category`, `transparency`) VALUES
(0, '00000000000zzz', 'test', 'test', NULL, NULL, NULL, NULL, NULL, NULL, 'ounce', NULL, NULL, 0, NULL, 'ounce', NULL, NULL, NULL, 'inch', 'beverage', 0),
(1, '049000028904-s', 'Coca Cola  12 fl oz Can', 'Coca Cola Company', 'Coca Cola', 'cola', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(2, '049000028911-s', 'Diet Coke 12 fl oz Can', 'Coca Cola Company', 'Coca Cola', 'diet cola', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(3, '049000042559-s', 'Coca Cola Zero Sugar  12 fl oz Can', 'Coca Cola Company', 'Coca Cola', 'zero cola', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(4, '049000030730-s', 'Fanta Orange Soda 12 fl oz Can', 'Coca Cola Company', 'Fanta', 'orange soda', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(5, '049000028928-s', 'Sprite 12 fl oz Can', 'Coca Cola Company', 'Sprite', 'soda', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(6, '049000024685-s', 'Coca Cola 16.9 fl oz Bottle', 'Coca Cola Company', 'Coca Cola', 'cola', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, ' ounce', 'Bottle', 'Bottle', 1, 468.71, 'grams', 2.35, 2.35, 8.85, 'inch', 'beverage', 0),
(7, '049000024692-s', 'Diet Coke 16.9 fl oz Bottle', 'Coca Cola Company', 'Coca Cola', 'diet cola', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, ' ounce', 'Bottle', 'Bottle', 1, 468.71, 'grams', 2.35, 2.35, 8.85, 'inch', 'beverage', 0),
(8, '049000045840-s', 'Coca Cola Zero Sugar  16.9 fl oz Bottle', 'Coca Cola Company', 'Coca Cola', 'zero cola', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, ' ounce', 'Bottle', 'Bottle', 1, 468.71, 'grams', 2.35, 2.35, 8.85, 'inch', 'beverage', 0),
(9, '049000028263-s', 'Dasani Purified Water 16.9 fl oz Bottle', 'Coca Cola Company', 'DASANI', 'purified water', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, 'ounce', 'Bottle', 'Bottle', 1, 485.72, 'grams', 2.5, 2.5, 8.76, 'inch', 'beverage', 0),
(10, '049000031683-s', 'Fanta Orange Soda  16.9 fl oz Bottle', 'Coca Cola Company', 'Fanta', 'orange soda', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, ' ounce', 'Bottle', 'Bottle', 1, 468.71, 'grams', 2.35, 2.35, 8.85, 'inch', 'beverage', 0),
(11, '786162003690-s', 'smartwater 16.9 fl oz Bottle', 'Coca Cola Company', 'Smartwater', 'purified water', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, ' ounce', 'Bottle', 'Bottle', 1, 468.71, 'grams', 2.31, 1.98, 8.91, 'inch', 'beverage', 0),
(12, '049000024708-s', 'Sprite 16.9 fl oz Bottle', 'Coca Cola Company', 'Sprite', 'soda', '16.9 fl oz Bottle', 'soda', 'plastic', 16.9, ' ounce', 'Bottle', 'Bottle', 1, 468.71, 'grams', 2.35, 2.35, 8.85, 'inch', 'beverage', 0),
(13, '049000000450', 'Diet Coke  20 fl oz Bottle', 'Coca Cola Company', 'Coca Cola', 'diet cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.86, 'inch', 'beverage', 0),
(14, '0004900004086', 'Coca Cola  Zero Calorie 20 fl oz Bottle', 'Coca Cola Company', 'Coca Cola', 'zero cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.86, 'inch', 'beverage', 0),
(15, '0004900001916', 'Fanta  Orange Soda 20 fl oz Bottle', 'Coca Cola Company', 'Fanta', 'orange soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.86, 'inch', 'beverage', 0),
(16, '0004900000764', 'Sprite Lemon Lime Soda 20 oz Bottle', 'Coca Cola Company', 'Sprite', 'lemon lime soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.86, 'inch', 'beverage', 0),
(17, '0004900000044', 'Coca Cola  20 fl oz Bottle', 'Coca Cola Company', 'Coca Cola', 'cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.86, 'inch', 'beverage', 0),
(18, '0001200017174', 'Diet Pepsi Soda 20 fl oz Bottle', 'Pepsi Company', 'Pepsi', 'diet cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.88, 2.88, 8.5, 'inch', 'beverage', 0),
(19, '0001200000129', 'Pepsi Cola Soda 20 fl oz Bottle', 'Pepsi Company', 'Pepsi', 'cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.88, 2.88, 8.5, 'inch', 'beverage', 0),
(20, '0001200001880', 'Pepsi Zero Sugar Cola Soda 20 fl oz Bottle', 'Pepsi Company', 'Pepsi', 'zero cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.88, 2.88, 8.5, 'inch', 'beverage', 0),
(21, '0001200000131', 'Mountain Dew Citrus Soda 20 fl oz Bottle', 'Pepsi Company', 'Mountain Dew ', 'soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.88, 2.88, 8.5, 'inch', 'beverage', 0),
(22, '049000024685', 'Coca Cola 6pk/16.9 fl oz Bottles', 'Coca Cola Company', 'Coca Cola', 'cola', '6pk/16.9 fl oz Bottles', 'soda', 'plastic', 101.4, ' ounce', 'Box', 'Bottle', 6, 3200, 'grams', 4.75, 8.85, 8.85, 'inch', 'beverage', 0),
(23, '00049000024692', 'Diet Coke 6pk/16.9 fl oz Bottles', 'Coca Cola Company', 'Coca Cola', 'diet cola', '6pk/16.9 fl oz Bottles', 'soda', 'plastic', 101.4, 'ounce', 'Box', 'Bottle', 6, 3200, 'grams', 4.75, 8.85, 8.85, 'inch', 'beverage', 0),
(24, '00049000045840', 'Coca Cola Zero Sugar  6pk/16.9 fl oz Bottles', 'Coca Cola Company', 'Coca Cola', 'zero cola', '6pk/16.9 fl oz Bottles', 'soda', 'plastic', 101.4, ' ounce', 'Box', 'Bottle', 6, 3200, 'grams', 4.75, 8.85, 8.85, 'inch', 'beverage', 0),
(25, '00049000031683', 'Fanta Orange Soda 6pk/16.9 fl oz Bottles', 'Coca Cola Company', 'Fanta', 'orange soda', '6pk/16.9 fl oz Bottles', 'soda', 'plastic', 101.4, ' ounce', 'Box', 'Bottle', 6, 3200, 'grams', 4.75, 8.85, 8.85, 'inch', 'beverage', 0),
(26, '0000007.86E+11', 'smartwater 6pk/16.9 fl oz Bottles', 'Coca Cola Company', 'Smartwater', 'purified water', '6pk/16.9 fl oz Bottles', 'purified water', 'plastic', 101.4, ' ounce', 'Box', 'Bottle', 6, 3200, 'grams', 7, 4, 9, 'inch', 'beverage', 1),
(27, '00049000024708', 'Sprite 6pk/16.9 fl oz Bottles', 'Coca Cola Company', 'Sprite', 'soda', '6pk/16.9 fl oz Bottles', 'soda', 'plastic', 101.4, ' ounce', 'Box', 'Bottle', 6, 3200, 'grams', 4.75, 8.85, 8.85, 'inch', 'beverage', 0),
(28, '00049000028263', 'Dasani Purified Water 12pk/16.9 fl oz  Bottles', 'Coca Cola Company', 'DASANI', 'purified water', '6pk/16.9 fl oz Bottles', 'soda', 'plastic', 101.4, 'ounce', 'Box', 'Bottle', 12, 3200, 'grams', 7.57, 10.16, 8.85, 'inch', 'beverage', 0),
(29, '00049000028904', 'Coca Cola  12pk/12 fl oz Cans', 'Coca Cola Company', 'Coca Cola', 'cola', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(30, '00049000028911', 'Diet Coke 12pk/12 fl oz Cans', 'Coca Cola Company', 'Coca Cola', 'diet cola', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(31, '00049000042559', 'Coca Cola Zero Sugar  12pk/12 fl oz Cans', 'Coca Cola Company', 'Coca Cola', 'zero cola', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(32, '00049000030730', 'Fanta Orange Soda  12pk/12 fl oz Cans', 'Coca Cola Company', 'Fanta', 'orange soda', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(33, '00049000028928', 'Sprite 12pk/12 fl oz Cans', 'Coca Cola Company', 'Sprite', 'soda', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(34, '00007800008240', 'Dr Pepper Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'Dr Pepper', 'soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(35, '00007800008340', 'Diet Dr Pepper Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'Dr Pepper', 'diet soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(36, '00007800003351', 'Dr Pepper & Cream Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'Dr Pepper', 'pepper&cream soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(37, '00007800009840', 'Dr. Pepper Cherry Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'Dr Pepper', 'cherry soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(38, '00049000018011', 'Coca-Cola Cherry Soda 20 fl oz Bottle', 'Coca Cola Company', 'Coca-Cola', 'cherry cola', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(39, '00025000058011', 'Minute Maid Pink Lemonade Beverage 20 fl oz Bottle', 'Coca Cola Company', 'Minute Maid', 'lemonade', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(40, '00025000058028', 'Minute Maid Fruit Punch 20 fl oz Bottle', 'Coca Cola Company', 'Minute Maid', 'fruit punch', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(41, '00078000113402', 'Sunkist Orange Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'Sunkist', 'orange soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(42, '00078000052404', 'A&W Root Beer Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'A&W', 'root beer soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(43, '00078000152401', 'Canada Dry Ginger Ale Soda 20 fl oz Bottle', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(44, '00012000001345', 'Diet Mountain Dew Soda 20 fl oz Bottle', 'Pepsi Company', 'Mountain Dew ', 'diet soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(45, '00049000093209', 'Sprite Ginger Soda 20 fl oz Bottle', 'Coca Cola Company', 'Sprite', 'ginger soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(46, '00018200531682', 'Bud Light Beer Cans 12 oz 24 pk Cans', 'Anheuser-Busch', 'Bud Light', 'beer', '24pk/12 fl oz Cans', 'beer', 'metal', 288, 'ounce', 'Box', 'Can', 24, 9706.88, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(47, '018200531682-s', 'Bud Light Beer Cans 12 oz Can', 'Anheuser-Busch', 'Bud Light', 'beer', '12 fl oz Can', 'beer', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(48, '00018200110306', 'Budweiser Lager Beer 30pk/12 fl oz Cans', 'Anheuser-Busch', 'Budweiser', 'beer', '30pk/12 fl oz Cans', 'beer', 'metal', 360, 'ounce', 'Box', 'Can', 30, 12133.5, 'grams', 12.97, 7.78, 9.75, 'inch', 'beverage', 0),
(49, '018200110306-s', 'Budweiser Lager Beer 12 fl oz Can', 'Anheuser-Busch ', 'Budweiser', 'beer', '12 fl oz Can', 'beer', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(50, '00014800646702', 'Hawaiian Punch, Fruit Juicy Red, 10-Ounce Bottles (Pack of 24)', 'Dr Pepper Snapple', 'Hawaiian Punch', 'fruit punch', '6pk/10 fl oz Bottles', 'Fruit Flavored Drinks', 'plastic', 60, 'ounce', 'Box', 'Can', 6, 1774.45, 'grams', 6.2, 4.7, 6.7, 'inch', 'beverage', 0),
(51, '014800646702-s', 'Hawaiian Punch, Fruit Juicy Red, 10-Ounce Bottle', 'Dr Pepper Snapple', 'Hawaiian Punch', 'fruit punch', '10 fl oz Bottle', 'Fruit Flavored Drinks', 'plastic', 10, 'ounce', 'Bottle', 'Can', 1, 295.74, 'grams', 2.1, 2.1, 6.8, 'inch', 'beverage', 0),
(52, '00072890000200', 'Heineken Premium Lager Cans 12 oz 12 pk', 'Heineken N.V.', 'Heineken', 'beer', '12pk/12 fl oz Cans', 'beer', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(53, '072890000200-s', 'Heineken Premium Lager Cans 12 oz', 'Heineken N.V.', 'Heineken', 'beer', '12 fl oz Can', 'beer', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(54, '00611269426724', 'Red Bull Energy Drink, 8.4-Fluid Ounce Cans, 12 Pack', 'Red Bull GmbH', 'Red Bull', 'energy drink', '12pk/8.4 fl oz Cans', 'soda', 'metal', 100.8, 'ounce', 'Box', 'Can', 12, 1411.81, 'grams', 4.25, 12.8, 5.4, 'inch', 'beverage', 0),
(55, '611269426724-s', 'Red Bull Energy Drink, 8.4-Fluid Ounce Cans', 'Red Bull GmbH', 'Red Bull', 'energy drink', '8.4 fl oz Can', 'soda', 'metal', 8.4, 'ounce', 'Can', 'Can', 1, 240, 'grams', 2.1, 2.1, 5.3, 'inch', 'beverage', 0),
(56, '00611269122114', 'Red Bull Sugar Free Energy Drink - 24 pk. - 8.4 oz.', 'Red Bull GmbH', 'Red Bull', 'energy drink', '24pk/8.4 fl oz Cans', 'soda', 'metal', 201.6, 'ounce', 'Box', 'Can', 24, 2823.61, 'grams', 4.25, 12.8, 5.4, 'inch', 'beverage', 0),
(57, '611269122114-s', 'Red Bull Sugar Free Energy Drink 8.4 oz.', 'Red Bull GmbH', 'Red Bull', 'energy drink', '8.4 fl oz Can', 'soda', 'metal', 8.4, 'ounce', 'Can', 'Can', 1, 240, 'grams', 2.1, 2.1, 5.3, 'inch', 'beverage', 0),
(58, '00018200008337', 'Bud Light Beer Cans 12 oz 6 pk Bottles', 'Anheuser-Busch', 'Bud Light', 'beer', '12 oz 6 pk Bottles', 'beer', 'glass', 72, 'ounce', 'Box', 'Bottle', 6, 2041.17, 'grams', 7.59, 5.25, 9.04, 'inch', 'beverage', 0),
(59, '018200008337-s', 'Bud Light Beer Cans 12 oz Bottle', 'Anheuser-Busch', 'Bud Light', 'beer', '12 oz Bottle', 'beer', 'glass', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.2, 'grams', 2.5, 2.5, 9, 'inch', 'beverage', 0),
(60, '00018200008344', 'Budweiser Beer Bottles 12 oz, 6 pk Bottles', 'Anheuser-Busch ', 'Budweiser', 'beer', '12 oz 6 pk Bottles', 'beer', 'glass', 72, 'ounce', 'Box', 'Bottle', 6, 2041.17, 'grams', 7.59, 5.25, 9.04, 'inch', 'beverage', 0),
(61, '018200008344-s', 'Budweiser Beer Bottles 12 oz, Bottle', 'Anheuser-Busch ', 'Budweiser', 'beer', '12 oz Bottle', 'beer', 'glass', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.2, 'grams', 2.5, 2.5, 9, 'inch', 'beverage', 0),
(62, '00075720004096', 'Poland Spring Brand 100% Natural Spring Water  24pk/16.9 fl oz Bottles', 'Poland Spring', 'Poland Spring', 'sping water', '24pk/16.9 fl oz Bottles', 'purified water', 'plastic', 402.6, 'ounce', 'Box', 'Bottle', 24, 11413.52, 'grams', 15.7, 10, 8.1, 'inch', 'beverage', 1),
(63, '075720004096-s', 'Poland Spring Brand 100% Natural Spring Water 16.9 fl oz Bottle', 'Poland Spring', 'Poland Spring', 'sping water', '16.9 fl oz Bottle', 'purified water', 'plastic', 16.9, 'ounce', 'Bottle', 'Bottle', 1, 500, 'grams', 2.35, 2.35, 8.85, 'inch', 'beverage', 1),
(64, '00075720734115', 'Poland Spring Brand 100% Natural Spring Water  6pk/23.7 fl oz Sport Cap Bot', 'Poland Spring', 'Poland Spring', 'sping water', '6pk/23.7 fl oz Bottles', 'purified water', 'plastic', 142.2, 'ounce', 'Box', 'Bottle', 6, 4031.3, 'grams', 9, 6, 10.1, 'inch', 'beverage', 1),
(65, '075720734115-s', 'Poland Spring Brand 100% Natural Spring Water 23.7 fl oz Sport Cap Bottle', 'Poland Spring', 'Poland Spring', 'sping water', '23.7 fl oz Bottle', 'purified water', 'plastic', 23.7, 'ounce', 'Bottle', 'Bottle', 1, 671.88, 'grams', 2.9, 2.9, 10.1, 'inch', 'beverage', 1),
(66, '00075720456666', 'Poland Spring Spring Water - 50.7 oz - 12 ct', 'Poland Spring', 'Poland Spring', 'sping water', '12pk/50.7 oz Bottles', 'purified water', 'plastic', 608.4, 'ounce', 'Box', 'Bottle', 12, 17247.85, 'grams', 15, 13.5, 11, 'inch', 'beverage', 1),
(67, '075720456666-s', 'Poland Spring Spring Water 50.7 oz', 'Poland Spring', 'Poland Spring', 'sping water', '50.7 oz Bottle', 'purified water', 'plastic', 50.7, 'ounce', 'Bottle', 'Bottle', 1, 1437.32, 'grams', 3.75, 3.75, 10.5, 'inch', 'beverage', 1),
(68, '00025000061530', 'Minute Maid Orange Juice Bottle, 12 fl oz', 'Coca Cola Company', 'Minute Maid', 'orange juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.194, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(69, '00002500006151', 'Minute Maid Apple Juice 12 FL Ooz Bottle', 'Coca Cola Company', 'Minute Maid', 'Apple Juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(70, '025000056024-s', 'Minute Maid Cranberry Apple Raspberry 12 fl oz Bottle', 'Coca Cola Company', 'Minute Maid', 'Mix Juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(71, '047393601674-s', 'Minute maid Tropical Blend 12 fl oz Bottle', 'Coca Cola Company', 'Minute Maid', 'Mix Juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(72, '025000056062-s', 'Minute maid Cranberry Grape 12 fl oz Bottle', 'Coca Cola Company', 'Minute Maid', 'Mix Juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(75, '826653943460-s', 'Minute maid Peach Mango 12 fl oz Bottle', 'Coca Cola Company', 'Minute Maid', 'Mix Juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(76, '048500002803-s', 'Tropicana pure premium Original 6oz', 'Pepsi Company', 'Tropicana', 'orange juice', '6 fl oz paper box', 'juice', 'paper', 6, 'ounce', 'paper box', 'paper box', 1, 170.097, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(77, '048500006290-s', 'Tropicana pure premium Original 8oz', 'Pepsi Company', 'Tropicana', 'orange juice', '8 fl oz paper box', 'juice', 'paper', 8, 'ounce', 'paper box', 'paper box', 1, 226.796, 'grams', 4.5, 7.5, 4.4, 'inch', 'beverage', 0),
(78, '00048500002817', 'Tropicana pure premium Original 10oz', 'Pepsi Company', 'Tropicana', 'orange juice', '8 fl oz paper box', 'juice', 'paper', 10, 'ounce', 'paper box', 'paper box', 1, 283.495, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(79, '00048500017753', 'Tropicana pure premium Original 12oz', 'Pepsi Company', 'Tropicana', 'orange juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', 2.35, 2.35, 7.03, 'inch', 'beverage', 0),
(80, '00048500018521', 'Tropicana pure premium Original 14oz', 'Pepsi Company', 'Tropicana', 'orange juice', '14 fl oz paper box', 'juice', 'paper', 14, 'ounce', 'paper box', 'paper box', 1, 396.893, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(82, '00048500202746', 'Tropicana pure premium Original 52oz', 'Pepsi Company', 'Tropicana', 'orange juice', '52 fl oz Bottle', 'juice', 'plastic', 52, 'ounce', 'Bottle', 'Bottle', 1, 1474.18, 'grams', 4.05, 4.54, 10.04, 'inch', 'beverage', 0),
(83, '00048500201022', 'Tropicana pure premium Original 59oz', 'Pepsi Company', 'Tropicana', 'orange juice', '59 fl oz Bottle', 'juice', 'plastic', 59, 'ounce', 'Bottle', 'Bottle', 1, 1672.62, 'grams', 4.3, 4.55, 10.04, 'inch', 'beverage', 0),
(84, '00048500018330', 'Tropicana pure premium Original 89oz', 'Pepsi Company', 'Tropicana', 'orange juice', '89 fl oz Bottle', 'juice', 'plastic', 89, 'ounce', 'Bottle', 'Bottle', 1, 2523.11, 'grams', 4.51, 6.41, 9.39, 'inch', 'beverage', 0),
(85, '00048500021699', 'Tropicana pure premium Original 128oz', 'Pepsi Company', 'Tropicana', 'orange juice', '128 fl oz Bottle', 'juice', 'plastic', 128, 'ounce', 'Bottle', 'Bottle', 1, 3628.74, 'grams', 13.8, 11.6, 10.6, 'inch', 'beverage', 0),
(86, '00048500017777', 'Tropicana pure premium  Home Style (Some Pulp) 12 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '12 fl oz Bottle', 'juice', 'plastic', 12, 'ounce', 'Bottle', 'Bottle', 1, 340.19, 'grams', 2.35, 2.35, 7.03, 'inch', 'beverage', 0),
(89, '00048500202753', 'Tropicana pure premium  Home Style (Some Pulp) 52 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '52 fl oz Bottle', 'juice', 'plastic', 52, 'ounce', 'Bottle', 'Bottle', 1, 1474.18, 'grams', 4.05, 4.54, 10.04, 'inch', 'beverage', 0),
(90, '00048500301395', 'Tropicana pure premium  Home Style (Some Pulp) 59 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '59 fl oz Bottle', 'juice', 'plastic', 59, 'ounce', 'Bottle', 'Bottle', 1, 1672.62, 'grams', 4.3, 4.55, 10.04, 'inch', 'beverage', 0),
(91, '00048500018293', 'Tropicana pure premium  Home Style (Some Pulp) 89 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '89 fl oz Bottle', 'juice', 'plastic', 89, 'ounce', 'Bottle', 'Bottle', 1, 2523.11, 'grams', 4.51, 6.41, 9.39, 'inch', 'beverage', 0),
(92, '00048500018583', 'Tropicana pure premium  Grovestand (Lops Of Pulp) 14 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '14 fl oz paper box', 'juice', 'paper', 14, 'ounce', 'paper box', 'paper box', 1, 396.893, 'grams', NULL, NULL, NULL, 'inch', 'beverage', 0),
(93, '00048500202760', 'Tropicana pure premium  Grovestand (Lops Of Pulp) 52 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '52 fl oz Bottle', 'juice', 'plastic', 52, 'ounce', 'Bottle', 'Bottle', 1, 1474.18, 'grams', 4.05, 4.54, 10.04, 'inch', 'beverage', 0),
(94, '00048500304143', 'Tropicana pure premium  Grovestand (Lops Of Pulp) 59 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '59 fl oz Bottle', 'juice', 'plastic', 59, 'ounce', 'Bottle', 'Bottle', 1, 1672.62, 'grams', 4.3, 4.55, 10.04, 'inch', 'beverage', 0),
(95, '00048500018316', 'Tropicana pure premium  Grovestand (Lops Of Pulp) 89 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '89 fl oz Bottle', 'juice', 'plastic', 89, 'ounce', 'Bottle', 'Bottle', 1, 2523.11, 'grams', 4.51, 6.41, 9.39, 'inch', 'beverage', 0),
(96, '00048500009062', 'Tropicana pure premium  Grovestand (Lops Of Pulp) 128 oz', 'Pepsi Company', 'Tropicana', 'orange juice', '128 fl oz Bottle', 'juice', 'plastic', 128, 'ounce', 'Bottle', 'Bottle', 1, 3628.74, 'grams', 13.8, 11.6, 10.6, 'inch', 'beverage', 0),
(97, '00078000168402', 'Canada Dry Green Tea Ginger Ale - 20 fl oz Bottle', 'Keurig Dr Pepper', 'Canada Dry', 'green tea ginger ale soda', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(98, '00078000168167', 'Canada Dry Green Tea Ginger Ale -12 Fl. Oz., 12 Count Cans', 'Keurig Dr Pepper', 'Canada Dry', 'green tea ginger ale soda', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(99, '078000168167-s', 'Canada Dry Green Tea Ginger Ale - 12 Fl. Oz. Can', 'Keurig Dr Pepper', 'Canada Dry', 'green tea ginger ale soda', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(100, '00078000030266', 'Canada Dry Ginger Ale and Orangeade - 20 fl oz Bottle', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale and orangeade', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(101, '00078000030297', 'Canada Dry Ginger Ale and Orangeade - 12pk/12 fl oz Cans', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale and orangeade', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(102, '078000030297-s', 'Canada Dry Ginger Ale and Orangeade -12 fl oz Can', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale and orangeade', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(103, '00078000030242', 'Canada Dry Ginger Ale and Lemonade - 20 fl oz Bottle', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale and lemonade', '20 fl oz Bottle', 'soda', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 591, 'grams', 2.87, 2.87, 8.89, 'inch', 'beverage', 0),
(104, '00078000030280', 'Canada Dry Ginger Ale and Lemonade -12pk/12 fl oz Cans', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale and lemonade', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(105, '078000030280-s', 'Canada Dry Ginger Ale and Lemonade -12 fl oz Can', 'Keurig Dr Pepper', 'Canada Dry', 'ginger ale and lemonade', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(106, '00078000032390', 'Canada Dry Diet Ginger Ale and Lemonade -12pk/12 fl oz Cans', 'Keurig Dr Pepper', 'Canada Dry', 'diet ginger ale and lemonade', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(107, '078000032390-s', 'Canada Dry Diet Ginger Ale and Lemonade -12 fl oz Can', 'Keurig Dr Pepper', 'Canada Dry', 'diet ginger ale and lemonade', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(108, '00078000033328', 'Canada Dry Bold Ginger Ale, 12 fl oz cans, 12 pack', 'Keurig Dr Pepper', 'Canada Dry', 'bold ginger ale', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(109, '078000033328-s', 'Canada Dry Bold Ginger Ale, 12 fl oz can', 'Keurig Dr Pepper', 'Canada Dry', 'bold ginger ale', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(110, '00078000156164', 'Canada Dry Cranberry Ginger Ale, 12 fl oz cans, 12 pack', 'Keurig Dr Pepper', 'Canada Dry', 'cranberry ginger ale', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(111, '078000156164-s', 'Canada Dry Cranberry Ginger Ale, 12 fl oz can', 'Keurig Dr Pepper', 'Canada Dry', 'cranberry ginger ale', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(112, '00078000141160', 'Diet Canada Dry Cranberry Ginger Ale, 12 fl oz cans, 12 pack', 'Keurig Dr Pepper', 'Canada Dry', 'diet cranberry ginger ale', '12pk/12 fl oz Cans', 'soda', 'metal', 144, 'ounce', 'Box', 'Can', 12, 4853.44, 'grams', 15.8, 5.3, 4.9, 'inch', 'beverage', 0),
(113, '078000141160-s', 'Diet Canada Dry Cranberry Ginger Ale, 12 fl oz can', 'Keurig Dr Pepper', 'Canada Dry', 'diet cranberry ginger ale', '12 fl oz Can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 404.45, 'grams', 2.5, 2.5, 4.83, 'inch', 'beverage', 0),
(114, '00052000010381', 'Gatorade Frost Thirst Quencher Sports Drink, Arctic Blitz, 32 oz Bottle', 'Pepsi Company', 'Gatorade', 'Arctic Blitz', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(115, '00052000010275', 'Gatorade Arctic Blitz Sports Drink - 8pk/20 fl oz Bottles', 'Pepsi Company', 'Gatorade', 'Arctic Blitz', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(116, '052000010275-s', 'Gatorade Arctic Blitz Sports Drink - 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', 'Arctic Blitz', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(117, '00052000104066', 'Gatorade Thirst Quencher Fierce Blue Cherry Drink, 32 Fl. Oz.', 'Pepsi Company', 'Gatorade', 'Arctic Blitz', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(118, '00052000104127', 'Gatorade Fierce Blue Cherry Sports Drink - 8pk/20 fl oz Bottles', 'Pepsi Company', 'Gatorade', 'Arctic Blitz', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(119, '052000104127-s', 'Gatorade Fierce Blue Cherry Sports Drink - 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', 'Arctic Blitz', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(120, '00052000325553', 'Gatorade Thirst Quencher Cool Blue 32 Fluid Ounce Bottle', 'Pepsi Company', 'Gatorade', 'cool blue', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(121, '00052000208443', 'Gatorade Thirst Quencher Cool Blue Raspberry - 8pk/20 fl oz Bottles', 'Pepsi Company', 'Gatorade', 'cool blue', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(122, '052000208443-s', 'Gatorade Thirst Quencher Cool Blue Raspberry - 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', 'cool blue', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(123, '00052000338751', 'Gatorade Thirst Quencher Fruit Punch Sports Drink, 32 Fl. Oz.', 'Pepsi Company', 'Gatorade', 'fruit punch', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(124, '00052000208061', 'Gatorade Thirst Quencher, Fruit Punch, 8pk/20 fl oz Bottles', 'Pepsi Company', 'Gatorade', 'fruit punch', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(125, '052000208061-s', 'Gatorade Thirst Quencher, Fruit Punch, 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', 'fruit punch', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(126, '00300848274534', 'Gatorade Thirst Quencher Fierce  Glacier Cherry  Drink, 32 Fl. Oz.', 'Pepsi Company', 'Gatorade', ' Glacier Cherry ', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(127, '00052000102451', 'Gatorade Fierce Glacier Cherry  Sports Drink - 8pk/20 fl oz Bottles', 'Pepsi Company', 'Gatorade', ' Glacier Cherry ', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(128, '052000102451-s', 'Gatorade Fierce  Glacier Cherry  Sports Drink - 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', ' Glacier Cherry ', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(129, '00052000320169', 'Gatorade Thirst Quencher Frost Glacier Freeze Sports Drink, 32 Fl. Oz.', 'Pepsi Company', 'Gatorade', ' Frost Glacier Freeze', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(130, '00052000208085', 'Gatorade Thirst Quencher Frost Glacier Freeze Sports Drink, 8pk/20 fl oz Bo', 'Pepsi Company', 'Gatorade', ' Frost Glacier Freeze', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(131, '052000208085-s', 'Gatorade Thirst Quencher Frost Glacier Freeze Sports Drink, 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', ' Frost Glacier Freeze', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(132, '00052000104073', 'Gatorade Fierce Green Apple Sports Drink - 32 fl oz Bottle', 'Pepsi Company', 'Gatorade', 'Green apple', '32 fl oz Bottle', 'sports drinks', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.75, 3.75, 8.25, 'inch', 'beverage', 0),
(133, '00052000101577', 'Gatorade Fierce Green Apple Sports Drink - 8pk/20 fl oz Bottles', 'Pepsi Company', 'Gatorade', 'Green apple', '8pk/20 fl oz Bottles', 'sports drinks', 'plastic', 160, 'ounce', 'Box', 'Bottle', 8, 4535.92, 'grams', 5.75, 11.5, 7.68, 'inch', 'beverage', 0),
(134, '052000101577-s', 'Gatorade Fierce Green Apple Sports Drink - 20 fl oz Bottle', 'Pepsi Company', 'Gatorade', 'Green apple', '20 fl oz Bottle', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 566.99, 'grams', 2.88, 2.88, 7.68, 'inch', 'beverage', 0),
(135, '00076183003961', 'Snapple Takes 2 to Mango Tea, 32 Fl Oz Bottle', 'Keurig Dr Pepper', 'Snapple', 'mango tea', '32 fl oz Bottle', 'tea', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.43, 3.43, 9.07, 'inch', 'beverage', 0),
(136, '00076183002940', 'Snapple Takes 2 to Mango Tea - 6pk/16 fl oz Glass Bottles', 'Keurig Dr Pepper', 'Snapple', 'mango tea', '6pk/16 fl oz Bottles', 'tea', 'glass', 96, 'ounce', 'Box', 'Bottle', 6, 2721.55, 'grams', 5.74, 8.58, 7.16, 'inch', 'beverage', 0),
(137, '076183002940-s', 'Snapple Takes 2 to Mango Tea - 16 fl oz Glass Bottle', 'Keurig Dr Pepper', 'Snapple', 'mango tea', '16 fl oz Bottle', 'tea', 'glass', 16, 'ounce', 'Bottle', 'Bottle', 1, 453.592, 'grams', 2.85, 2.85, 6.5, 'inch', 'beverage', 0),
(138, '00076183323564', 'Snapple Peach Tea, 32 Fl Oz Bottle', 'Keurig Dr Pepper', 'Snapple', 'peach tea', '32 fl oz Bottle', 'tea', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.43, 3.43, 9.07, 'inch', 'beverage', 0),
(139, '00076183007136', 'Snapple Peach Tea - 6pk/16 fl oz Bottles', 'Keurig Dr Pepper', 'Snapple', 'peach tea', '6pk/16 fl oz Bottles', 'tea', 'glass', 96, 'ounce', 'Box', 'Bottle', 6, 2721.55, 'grams', 5.74, 8.58, 7.16, 'inch', 'beverage', 0),
(140, '076183007136-s', 'Snapple Peach Tea - 16 fl oz Bottle', 'Keurig Dr Pepper', 'Snapple', 'peach tea', '16 fl oz Bottle', 'tea', 'glass', 16, 'ounce', 'Bottle', 'Bottle', 1, 453.592, 'grams', 2.85, 2.85, 6.5, 'inch', 'beverage', 0),
(141, '00076183323748', 'Snapple Lemon Tea, 32 Fl. Oz.', 'Keurig Dr Pepper', 'Snapple', 'lemon tea', '32 fl oz Bottle', 'tea', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.43, 3.43, 9.07, 'inch', 'beverage', 0),
(142, '00076183273746', 'Snapple Lemon Tea - 6pk/16 fl oz Glass Bottles', 'Keurig Dr Pepper', 'Snapple', 'lemon tea', '6pk/16 fl oz Bottles', 'tea', 'glass', 96, 'ounce', 'Box', 'Bottle', 6, 2721.55, 'grams', 5.74, 8.58, 7.16, 'inch', 'beverage', 0),
(143, '076183273746-s', 'Snapple Lemon Tea - 16 fl oz Glass Bottle', 'Keurig Dr Pepper', 'Snapple', 'lemon tea', '16 fl oz Bottle', 'tea', 'glass', 16, 'ounce', 'Bottle', 'Bottle', 1, 453.592, 'grams', 2.85, 2.85, 6.5, 'inch', 'beverage', 0),
(144, '00076183323786', 'Snapple Raspberry Tea, 32 Fl. Oz.', 'Keurig Dr Pepper', 'Snapple', 'raspberry tea', '32 fl oz Bottle', 'tea', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.43, 3.43, 9.07, 'inch', 'beverage', 0),
(145, '00076183263785', 'Snapple Raspberry Tea - 6pk/16 fl oz Glass Bottles', 'Keurig Dr Pepper', 'Snapple', 'raspberry tea', '6pk/16 fl oz Bottles', 'tea', 'glass', 96, 'ounce', 'Box', 'Bottle', 6, 2721.55, 'grams', 5.74, 8.58, 7.16, 'inch', 'beverage', 0),
(146, '076183263785-s', 'Snapple Raspberry Tea - 16 fl oz Glass Bottle', 'Keurig Dr Pepper', 'Snapple', 'raspberry tea', '16 fl oz Bottle', 'tea', 'glass', 16, 'ounce', 'Bottle', 'Bottle', 1, 453.592, 'grams', 2.85, 2.85, 6.5, 'inch', 'beverage', 0),
(147, '00076183260807', 'Snapple Green Tea - 6pk/16 fl oz Glass Bottles', 'Keurig Dr Pepper', 'Snapple', 'green tea ', '6pk/16 fl oz Bottles', 'tea', 'glass', 96, 'ounce', 'Box', 'Bottle', 6, 2721.55, 'grams', 5.74, 8.58, 7.16, 'inch', 'beverage', 0),
(148, '076183260807-s', 'Snapple Green Tea - 16 fl oz Glass Bottle', 'Keurig Dr Pepper', 'Snapple', 'green tea ', '16 fl oz Bottle', 'tea', 'glass', 16, 'ounce', 'Bottle', 'Bottle', 1, 453.592, 'grams', 2.85, 2.85, 6.5, 'inch', 'beverage', 0),
(149, '00076183323632', 'Snapple Kiwi Strawberry Juice Drink, 32 Fl Oz Bottle', 'Keurig Dr Pepper', 'Snapple', 'kiwi strawberry', '32 fl oz Bottle', 'tea', 'plastic', 32, 'ounce', 'Bottle', 'Bottle', 1, 907.185, 'grams', 3.43, 3.43, 9.07, 'inch', 'beverage', 0),
(150, '00076183263631', 'Snapple Kiwi Strawberry - 6pk/16 fl oz Glass Bottles', 'Keurig Dr Pepper', 'Snapple', 'kiwi strawberry', '6pk/16 fl oz Bottles', 'tea', 'glass', 96, 'ounce', 'Box', 'Bottle', 6, 2721.55, 'grams', 5.74, 8.58, 7.16, 'inch', 'beverage', 0),
(151, '076183263631-s', 'Snapple Kiwi Strawberry - 16 fl oz Glass Bottle', 'Keurig Dr Pepper', 'Snapple', 'kiwi strawberry', '16 fl oz Bottle', 'tea', 'glass', 16, 'ounce', 'Bottle', 'Bottle', 1, 453.592, 'grams', 2.85, 2.85, 6.5, 'inch', 'beverage', 0),
(152, '00007188133608', 'Flintstone Vitamins', 'Bayer', 'Flintstone', 'gummy', 'bottle of flintstones', 'multivitamins', NULL, NULL, 'ounce', NULL, NULL, 0, NULL, 'ounce', NULL, NULL, NULL, 'inch', 'vitamins', 0),
(153, '3179730012564', 'Perrier 4 Pack', 'Nestles', 'Perrier', 'unflavored', '4pk 11 fl oz bottles', 'sparkling water', 'plastic', 44, 'ounce', 'Box', 'Bottle', 4, 0, 'grams', 5.5, 5.5, 7.5, 'inch', 'beverage', 0),
(154, '3179730109295', 'Perrier', 'Nestles', 'Perrier', 'unflavored', '11 fl oz bottle', 'sparkling water', 'plastic', 11, 'ounce', 'Bottle', 'Bottle', 1, 0, 'grams', 2.5, 2.5, 7.5, 'inch', 'beverage', 0),
(155, '6901672500017', 'Kronenbourg 1664 Lager Beer Bottle', 'Brasseries Kronenbourg', 'Kronenbourg', 'Lager', '9.3 fl oz bottle', 'beer', 'glass', 9.3, 'ounce', 'Bottle', 'Bottle', 1, 0, 'grams', 2.25, 2.25, 8, 'inch', 'beverage', 0),
(156, '01200003067', 'Pepsi Soda', 'Pepsi Company', 'Pepsi', 'Classic', '12 fl oz can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 0, 'grams', 2.5, 2.5, 5, 'inch', 'beverage', 0),
(157, '078000009132', 'Crush Strawberry Soda', 'Keurig Dr Pepper ', 'Crush', 'Strawberry Soda', '12 fl oz can', 'soda', 'metal', 12, 'ounce', 'Can', 'Can', 1, 0, 'grams', 2.5, 2.5, 5, 'inch', 'beverage', 0),
(158, '5449000000996', 'Coke', 'Coca Cola Company', 'Coke', 'Classic', '11.2 fl oz can', 'soda', 'metal', 11.2, 'ounce', 'Can', 'Can', 1, 0, 'grams', 2.5, 2.5, 5, 'inch', 'beverage', 0),
(159, '6948960100078', 'Bud Large Beer Can', 'Anheuser-Busch', 'Budweiser', 'Classic', '16 fl oz can', 'beer', 'metal', 16, 'ounce', 'Can', 'Can', 1, 0, 'grams', 2.5, 2.5, 6.5, 'inch', 'beverage', 0),
(160, '6934024590169', 'Gatorade Luis Suarez limited', 'Pepsi Company', 'Gatorade', 'Luis Suarez', '20 fl oz can', 'sports drinks', 'plastic', 20, 'ounce', 'Bottle', 'Bottle', 1, 0, 'grams', 2.5, 2.5, 9, 'inch', 'beverage', 0),
(161, '8015839000109', 'Paradiso Water', 'Natural Water Co', 'Paradiso Water', 'unflavored', '16 fl oz bottle', 'purified water', 'plastic', 16, 'ounce', 'Bottle', 'Bottle', 1, 0, 'grams', 2.5, 2.5, 8, 'inch', 'beverage', 1),
(162, '8858908306012', 'Chia seed drink with pomegranate', 'Chia Seed Drink Maker', 'Chia seed drink', 'pomegranate', '9,8 fl oz bottle', 'juice', 'glass', 9.8, 'ounce', 'Bottle', 'Bottle', 1, 0, 'grams', 2.5, 2.5, 7, 'inch', 'beverage', 0),
(163, '8858908306036', 'Chia seed drink with mango', 'Chia Seed Drink Maker', 'Chia seed drink', 'mango', '9,8 fl oz bottle', 'juice', 'glass', 9.8, 'ounce', 'Bottle', 'Bottle', 1, 0, 'grams', 2.5, 2.5, 7, 'inch', 'beverage', 0),
(164, '5902078350009', 'Perlage sparkling 6pack', 'Nałęczów Zdrój Sp. z o.o', 'Perlage', 'unflavored', '6pk 11.2 fl oz can', 'sparkling water', 'metal', 67.2, 'ounce', 'none', 'Can', 6, 0, 'grams', 5, 7.5, 5, 'inch', 'beverage', 0),
(165, '5902078004803', 'Perlage sparkling', 'Nałęczów Zdrój Sp. z o.o', 'Perlage', 'unflavored', '11.2 fl oz can', 'sparkling water', 'metal', 11.2, 'ounce', 'Can', 'Can', 1, 0, 'grams', 2.5, 2.5, 5, 'inch', 'beverage', 0),
(166, '015700052013', 'Swiss Miss Classics Rich Chocolate Hot Cocoa Mix - 10oz', 'Conagra Brands', 'Swiss Miss', 'classic', '10 oz Hot Cocoa Mix', 'chocolate drink', 'carboard', 10, 'ounce', 'Box', 'Box', 1, 0, 'grams', 7.5, 1.875, 5.25, 'inch', 'beverage', 0),
(167, '9421021171424', 'Vogel Cafe Style Light Berry', 'Goodman Fielder New Zealand Limited', 'Vogel', 'Cafe Style Light Berry', '0.9 lb box', 'cereal', 'carboard', 64, 'ounce', 'Box', 'Box', 1, 0.9, 'lbs', 6.625, 2.375, 9, 'inch', 'breakfast foods', 0),
(168, '8712566174003', 'Knorr Curry Sauce', 'Unilever', 'Knorr', 'Curry Sauce', '2.2 lb container', 'condiment', 'plastic', 64, 'ounce', 'Container', 'Container', 1, 2.2, 'lbs', 5, 4.5, 8.75, 'inch', 'general foods', 0),
(169, '8722700108207', 'Knorr Vegetable Cube', 'Unilever', 'Knorr', 'Vegetable Cube', '1.3 lb container', 'prepared food', 'plastic', 64, 'ounce', 'Container', 'Container', 1, 1.3, 'lbs', 5, 4.5, 4.75, 'inch', 'general foods', 0),
(170, '701750684259', 'Delizia hazelnut cream', 'Delizia Brothers', 'Delizia', 'Hazelnut Cream', '0.28 lb container', 'pastries', 'paper', 64, 'ounce', 'Container', 'Container', 1, 0.28, 'lbs', 9.5, 1.5, 4.5, 'inch', 'general foods', 0),
(171, '9300652806571', 'Nutri-brex', 'Sanitarium', 'nutri-brex', 'plain', '0.82 lb box', 'cereal', 'cardboard', 64, 'ounce', 'Box', 'Box', 1, 0.82, 'lbs', 4, 8, 3.5, 'inch', 'breakfast foods', 0),
(172, '674306331818', 'Norway\'s Purest Omega-3 Fish Oil 90 Count, Glass Bottle', 'Norska Co.', 'Norway\'s Purest', 'Omega-3 Fish Oil', '15.34 oz glass bottle', 'vitamin', 'glass', 64, 'ounce', 'Bottle', 'Bottle', 1, 0, 'lbs', 2.375, 2.375, 4.75, 'inch', 'general foods', 0);




INSERT INTO `sensorchanges` (`sensorchangeID`, `facingID`, `timeStamp`, `state`) VALUES
(98809, 736, '2021-11-15 15:23:36', '01-17:204;7:3541;'),
(98810, 710, '2021-11-15 15:24:50', '-0'),
(98811, 710, '2021-11-15 15:25:00', '0000011-22:190;19:174;16:187;13:195;10:189;7:2512;4:3018;'),
(98812, 710, '2021-11-15 15:27:43', '-0'),
(98813, 710, '2021-11-15 15:27:53', '0000011-22:179;19:179;16:187;13:180;10:194;7:2511;4:3022;'),
(98814, 710, '2021-11-15 15:28:37', '-0'),
(98815, 710, '2021-11-15 15:28:44', '0000011-22:197;19:176;16:174;13:181;10:198;7:2503;4:3009;'),
(98816, 711, '2021-11-15 15:28:45', '1111111-22:1809;19:2453;16:2358;13:2523;10:2423;7:2377;4:2628;'),
(98817, 710, '2021-11-15 15:31:17', '0000011-22:186;19:181;16:185;13:191;10:196;7:2505;4:3016;'),
(98818, 710, '2021-11-15 15:34:37', '-0'),
(98819, 710, '2021-11-15 15:34:47', '0000011-22:185;19:186;16:195;13:178;10:186;7:2527;4:3011;'),
(98820, 711, '2021-11-15 15:35:05', '-0'),
(99157, 736, '2021-12-10 12:43:17', '01-18:163;8:3608;');



INSERT INTO `shelfs` (`shelfID`, `displayfixtureID`, `level`, `depth`, `width`, `height`, `IPAddress`, `port`, `MAC`, `shelfIDForUser`, `mfdate`, `SN`) VALUES
(2, 1, 4, 44, 55, 66, '', '', '', 's20', NULL, ''),
(23, 22, 1, 22, 48, 24, '', '', '', 's122999', NULL, ''),
(24, 1, 2, 22, 32, 12, '', '', '', 's23', NULL, ''),
(26, 1, 3, 0, 0, 0, '', '', '', 's222', NULL, ''),
(28, 24, 1, 0, 48, 18, '', '', '', 's1-1xz', NULL, ''),
(29, 24, 2, 36, 48, 120, '', '', '', 's2', NULL, ''),
(30, 24, 3, 0, 0, 0, '', '', '', 's3', NULL, ''),
(31, 26, 1, 0, 0, 0, '', '', '', 's1', NULL, ''),
(32, 26, 2, 0, 0, 0, '', '', '', 's2', NULL, ''),
(33, 24, 4, 12, 12, 12, '', '', '', 's43', NULL, ''),
(34, 28, 1, 22, 48, 20, '', '', '', 's1', NULL, ''),
(35, 30, 2, 24, 36, 48, '', '', '', 's2', NULL, ''),
(36, 30, 1, 0, 0, 0, '', '', '', 's1', NULL, ''),
(37, 24, 6, 24, 48, 72, '', '', '', 's53', NULL, ''),
(38, 31, 1, 24, 17, 12, '', '', '', 's1tp19', NULL, ''),
(39, 24, 22, 0, 0, 0, '', '', '', '', NULL, ''),
(40, 29, 1, 22, 22, 78, '', '', '', 's1', NULL, ''),
(41, 31, 2, 22, 43, 17, '', '', '', 's2', NULL, ''),
(42, 24, 23, 0, 0, 0, '', '', '', 's23', NULL, ''),
(43, 33, 1, 0, 0, 0, '', '', '', 's1z', NULL, ''),
(45, 34, 1, 0, 0, 0, '', '', '', 's1', NULL, ''),
(47, 35, 1, 24, 48, 24, '', '', '', 's1', NULL, ''),
(48, 35, 2, 0, 0, 0, '', '', '', 's2', NULL, ''),
(49, 36, 1, 0,0,0, '', '', '', 's1', NULL, ''),
(50, 36, 2, 0,0,0, '', '', '', 's2', NULL, ''),
(51, 37, 1, 0,0,0, '', '', '', 's1', NULL, ''),
(52, 37, 2, 0,0,0, '', '', '', 's2', NULL, ''),
(53, 37, 3, 0,0,0, '', '', '', 's3', NULL, ''),
(54, 38, 1, 0,0,0, '', '', '', 's1', NULL, ''),
(55, 28, 2, 0,0,0, '', '', '', 's2', NULL, ''),
(59, 40, 1, 24,0,0, '', '', '', 'AS22', NULL, ''),
(60, 40, 2, 0,0,0, '', '', '', 's2', NULL, ''),
(61, 38, 2, 0,0,0, '', '', '', 's2', NULL, ''),
(62, 41, 1, 0,0,0, '', '', '', 's1', NULL, ''),
(63, 42, 1, 0,0,0, '', '', '', 's1', NULL, ''),
(64, 43, 1, 0,0,0, '', '', '', 's1-77SSS', NULL, ''),
(65, 43, 2, 12, 34, 12, '', '', '', 's2', NULL, ''),
(66, 44, 1, 0,0,0, '', '', '', 's1', NULL, ''),
(67, 44, 2, 0,0,0, '', '', '', 's2', NULL, ''),
(68, 45, 1, 0,0,0, '', '', '', '192.168.34.210', NULL, ''),
(69, 22, 2, 0,0,0, '', '', '', 'x1', NULL, ''),
(72, 46, 2, 0,0,0, '192.168.33.46', '23333', '', 'PNPSocTester_B', '2021-08-25 08:00:00', '0DaMo08TN001'),
(73, 46, 1, 0,0,0, '192.168.33.47', '23333', '', 'PNPSocTester_A', '2021-08-25 00:00:00', ''),
(74, 43, 3, 0,0,0, '', '', '', 's3', NULL, ''),
(75, 47, 1, 0,0,0, '', '', '', 's1-s', NULL, ''),
(76, 48, 1, 0,0,0, '', '', '', 's1', NULL, '');


INSERT INTO `stores` (`storeID`, `clientID`, `storeNumber`, `storeName`, `address`, `city`, `state`, `zipcode`, `district`, `country`, `latitude`, `longitude`) VALUES
(4, 2, '002', 'BostonWest', '88 Bunker Hill Boulevard', 'Boston', 'MA', '54223', 'NewEngland', 'US', '34.3454323', '-34.12345'),
(5, 2, '003', 'New York Store', '425 W. 87th Street', 'New York', 'NY', '11275', 'Eastern', 'US', '35.544445', '-24.65734'),
(6, 1, '003.2A', 'New York Store', '425 W. 87th Street', 'New York', 'NY', '11275', 'Eastern', 'US', '35.544445', '-24.65734'),
(7, 1, '0001', 'Westport Store', 'Post Road', 'Westport', 'CT', '06880', 'NorthEast', 'USA', '56.555444', '55.5444'),
(8, 1, '00004', 'New Haven Store', '123 New Haven Road', 'New Haven', 'CT', '00543', 'East Sagamore', 'US', '45,444334', '50.54345'),
(9, 1, '00005', 'Old London', '342 Old London Road', 'Old London', 'CT', '221233', 'Central Harbor', 'US', '54.00444', '57.000'),
(10, 1, '00006-1bc', 'Darian Store', '3412 Darian Road', 'Darian', 'CT', '11111', 'West Oakwood', 'US', '44.444444', '-17.65544'),
(11, 1, '00007', 'Stanford Store', '4455 Stanford Circle', 'Stanford ', 'CT', '11223', 'North Central', 'US', '34.4433', '23.34444'),
(12, 1, '0017', 'Binghamton Store', '485 Binghamton Lane', 'Binghamton', 'NY', '07033', 'Western', 'US', '45.4444444', '34.3333333'),
(13, 1, '0018', 'Utica Store', '4556 Utica Place', 'Utica', 'NY', '23343', 'Central', 'US', '44,55444', '55.443333'),
(14, 1, '0019', 'Buffalo Main Store', '3434 Buffalo Plaza N', 'Buffalo', 'NY', '22232', 'North', 'US', '55.443454', '54.332333'),
(15, 1, '0020', 'Chicago Store', '33 Chicago Street', 'Chicago', 'IL', '22232', 'MidWest', 'US', '45,55554', '23,33345'),
(16, 1, '0021', 'Aurora Store', '222 Aurora Drive', 'Aurora', 'IL', '33233', 'MidWest', 'US', '34,44444', '53,33233');



INSERT INTO `useraccounts` (`useraccountID`, `clientID`, `username`, `password`, `usertype`, `firstname`, `lastname`, `apppermissions`, `clientIDs`, `storeIDs`, `displayfixtureIDs`, `writetablespermission`, `rawSQLexecutepermission`) VALUES
(1, 2, 'danrothman', 'fang1111!', 'sup', 'Dan', 'Rothman', NULL, '2', '4', NULL, 0, 0),
(2, 2, 'keqin', 'youngk', 'user', 'Keqin', 'Chen', NULL, '2', '5', NULL, 0, 0),
(3, 2, 'ericsun', 'nuscire', 'user', 'Eric', 'Sun', NULL, '2', '4,5', NULL, 0, 0),
(4, 1, 'zhangmeng', 'shanghai', 'user', 'Zhang', 'Meng', NULL, '1', '', NULL, 0, 0),
(5, 2, 'sharon', 'stone', 'user', 'Sharon', 'Stone', NULL, '2', ' ', NULL, 0, 0),
(6, 1, 'shanghaitest', 'shanghai', 'user', 'Shanghai', 'Test', NULL, '', '7', NULL, 0, 0);


